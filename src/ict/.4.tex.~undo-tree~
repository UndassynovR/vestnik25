(undo-tree-save-format-version . 1)
"dc3a692184f80551735c84226075a590f3df15b6"
[nil nil nil nil (26474 23243 175334 467000) 0 nil]
([nil nil ((667 . 668) (#("
" 0 1 (fontified t)) . -667) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 606 (t 26474 22916 23024 797000)) nil (26474 23243 175332 504000) 0 nil])
([nil nil ((nil rear-nonsticky nil 618 . 619) (nil fontified nil 606 . 619) (606 . 619)) nil (26474 23243 175289 635000) 0 nil])
([nil nil ((37329 . 37330) 618) nil (26474 23243 175285 750000) 0 nil])
([nil nil ((#("\\bfseries " 0 9 (face font-lock-keyword-face fontified t) 9 10 (face (bold) fontified t)) . 23) (undo-tree-id43 . -9) (undo-tree-id44 . -10) (t 26474 23243 191553 254000)) nil (26474 30015 949036 898000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -43) (undo-tree-id117 . -1) 44 (43 . 44) (31 . 43) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -31) (undo-tree-id118 . -1) (27 . 32) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -27) (undo-tree-id119 . -1) (22 . 28) (t 26474 30015 974700 207000)) nil (26474 30047 63522 994000) 0 nil])
([nil nil ((nil rear-nonsticky nil 255 . 256) (nil fontified nil 42 . 256) (42 . 256)) nil (26474 30047 63520 471000) 0 nil])
([nil nil ((209 . 210) (#("
" 0 1 (fontified t)) . -209) (undo-tree-id96 . -1) (#("
" 0 1 (fontified t)) . -209) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (161 . 162) (#("
" 0 1 (face (bold) fontified t)) . -161) (undo-tree-id115 . -1) (86 . 87) (#("
" 0 1 (fontified t)) . -86) (undo-tree-id116 . -1) 66) nil (26474 30047 63518 935000) 0 nil])
([nil nil ((#("\\textsuperscript{\\envelope }" 0 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 26 (face font-lock-keyword-face fontified t) 26 28 (fontified t)) . 57) (undo-tree-id62 . -27) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -28)) nil (26474 30047 63604 974000) 0 nil])
([nil nil ((#("\\textsuperscript{2}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 59) (undo-tree-id148 . -18) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -19)) nil (26474 30070 476685 130000) 0 nil] [nil nil ((#("\\textsuperscript{2}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 59) (undo-tree-id45 . -18) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -19)) ((59 . 78)) (26474 30047 63482 297000) 0 nil])
([nil nil ((#("} " 0 2 (fontified t)) . 64) (undo-tree-id146 . -1) (undo-tree-id147 . -2)) nil (26474 30070 476676 245000) 0 nil])
nil
([nil nil ((#("{\\bfseries " 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (face (bold) fontified t)) . 64) (undo-tree-id145 . -10)) nil (26474 30070 476674 764000) 0 nil])
([nil nil ((64 . 65)) nil (26474 30070 476673 372000) 0 nil])
([nil nil ((#("\\textsuperscript{1}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 79) (undo-tree-id128 . -18) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -19)) nil (26474 30070 476672 479000) 0 nil])
([nil nil ((#("\\textsuperscript{1}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 96) (undo-tree-id127 . -18)) nil (26474 30070 476661 400000) 0 nil])
([nil nil ((#("} {\\bfseries" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 12 (face font-lock-keyword-face fontified t)) . 111) (undo-tree-id123 . -11) (undo-tree-id124 . -11) (undo-tree-id125 . -11) (undo-tree-id126 . -11) 122) nil (26474 30070 476660 121000) 0 nil])
([nil nil ((#("\\textsuperscript{1,3}" 0 16 (face font-lock-keyword-face fontified t) 16 21 (fontified t)) . 112) (undo-tree-id121 . -20) (undo-tree-id122 . -21)) nil (26474 30070 476656 447000) 0 nil])
([nil nil ((180 . 181) (#("
" 0 1 (fontified t)) . -180) (undo-tree-id120 . -1) 179) nil (26474 30070 476652 69000) 0 nil])
([nil nil ((127 . 236) (#("Identifying effective machine learning algorithms for sentimental analysis of comments in the Kazakh language" 0 53 (fontified t) 53 54 (fontified t) 54 109 (fontified t)) . 127) (t 26474 30070 531134 926000)) nil (26474 30080 209062 352000) 0 nil])
([nil nil ((2164 . 2264) (#("Қазақ тіліндегі пікірлерді сентименталды талдау үшін машиналық
оқытудың тиімді алгоритмдерін анықтау" 0 100 (face (bold) fontified t)) . 2164) (t 26474 30080 270855 482000)) nil (26474 30101 752574 640000) 0 nil])
([nil nil ((40 . 44) (#("i" 0 1 (face font-lock-function-name-face fontified nil)) . -40) (undo-tree-id173 . -1) (32 . 41) (#("i" 0 1 (face font-lock-function-name-face fontified nil)) . -32) (undo-tree-id174 . -1) (29 . 33) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -29) (undo-tree-id175 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -30) (undo-tree-id176 . -1) 31 (26 . 31) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -26) (undo-tree-id177 . -1) (22 . 27) (21 . 22) (t 26474 30101 812237 424000) 21) nil (26474 30131 983972 434000) 0 nil])
([nil nil ((nil rear-nonsticky nil 507 . 508) (#("
" 0 1 (fontified nil)) . -530) (507 . 531) 482) nil (26474 30131 983968 666000) 0 nil])
([nil nil ((509 . 512) (#("begin" 0 5 (face font-lock-keyword-face fontified t)) . 509) (undo-tree-id172 . -4)) nil (26474 30131 983968 7000) 0 nil])
([nil nil ((nil rear-nonsticky nil 529 . 530) (#("
" 0 1 (fontified nil)) . -552) (529 . 553)) nil (26474 30131 983966 862000) 0 nil])
([nil nil ((545 . 548) (#("i" 0 1 (face font-lock-function-name-face fontified nil latex-env-pair t)) . -545) (undo-tree-id168 . -1) (542 . 546) (#("i" 0 1 (face font-lock-function-name-face fontified nil latex-env-pair t)) . -542) (undo-tree-id169 . -1) (540 . 543) (#("i" 0 1 (face font-lock-function-name-face fontified nil latex-env-pair t)) . -540) (undo-tree-id170 . -1) (537 . 541) (#("articleheading" 0 14 (face font-lock-function-name-face fontified t latex-env-pair t)) . 537) (undo-tree-id171 . -13)) nil (26474 30131 983965 785000) 0 nil])
([nil nil ((nil rear-nonsticky nil 931 . 932) (#("
" 0 1 (fontified nil)) . -951) (931 . 952) 930) nil (26474 30131 983962 362000) 0 nil])
([nil nil ((933 . 936) (#("begin" 0 5 (face font-lock-keyword-face fontified t)) . 933) (undo-tree-id165 . -4) (undo-tree-id166 . -5) (undo-tree-id167 . -5)) nil (26474 30131 983958 859000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2234 . 2235) (#("
" 0 1 (fontified nil)) . -2257) (2234 . 2258) (t 26474 30132 35370 265000)) nil (26474 30151 707687 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2584 . 2585) (#("
" 0 1 (fontified nil)) . -2626) (2584 . 2627) 2549) nil (26474 30151 707686 694000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2627) (undo-tree-id181 . -1)) nil (26474 30151 707685 916000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2942 . 2943) (#("
" 0 1 (fontified nil)) . -2962) (2942 . 2963) 2850) nil (26474 30151 707683 866000) 0 nil])
([nil nil ((2944 . 2947) (#("begin" 0 5 (face font-lock-keyword-face fontified t)) . 2944) (undo-tree-id178 . -4) (undo-tree-id179 . -5) (undo-tree-id180 . -5)) nil (26474 30151 707680 244000) 0 nil])
([nil nil ((nil latex-env-pair t 2587 . 2600) (nil fontified t 2587 . 2600) (nil face font-lock-function-name-face 2587 . 2600) (#("articleheading" 0 14 (face font-lock-function-name-face fontified t latex-env-pair t)) . -2587) (2601 . 2614) (nil latex-env-pair t 2240 . 2253) (nil fontified t 2240 . 2253) (nil face font-lock-function-name-face 2240 . 2253) (#("articleheading" 0 14 (face font-lock-function-name-face fontified t latex-env-pair t)) . -2240) (2254 . 2267) (nil latex-env-pair t 512 . 525) (nil fontified t 512 . 525) (nil face font-lock-function-name-face 512 . 525) (#("articleheading" 0 14 (face font-lock-function-name-face fontified t latex-env-pair t)) . -512) (526 . 539) (nil fontified t 29 . 42) (t 26474 30151 749804 614000) (nil latex-env-pair t 29 . 42) (t 26474 30151 749804 614000) (nil face font-lock-function-name-face 29 . 42) (t 26474 30151 749804 614000) (#("articleheading" 0 14 (face font-lock-function-name-face latex-env-pair t fontified t)) . -29) (t 26474 30151 749804 614000) (43 . 56) (t 26474 30151 749804 614000)) nil (26474 30181 708437 250000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4303 . 4304) (#("
" 0 1 (fontified nil)) . -4325) (4303 . 4326) (t 26474 30181 764943 406000)) nil (26474 30217 638726 529000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4680 . 4681) (#("
" 0 1 (fontified nil)) . -4721) (4680 . 4722) 4634) nil (26474 30217 638725 822000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4722) (undo-tree-id185 . -1)) nil (26474 30217 638724 678000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5047 . 5048) (#("
" 0 1 (fontified nil)) . -5067) (5047 . 5068) 4955) nil (26474 30217 638722 738000) 0 nil])
([nil nil ((5049 . 5052) (#("begin" 0 5 (face font-lock-keyword-face fontified t)) . 5049) (undo-tree-id182 . -4) (undo-tree-id183 . -5) (undo-tree-id184 . -5)) nil (26474 30234 782749 278000) 0 nil])
([nil nil ((6457 . 6478) (17742 . 17758) (t 26474 30217 679912 906000)) ((#("\\end{multicols}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 17742) (undo-tree-id186 . 16) (#("\\begin{multicols}{2}
" 6 17 (latex-env-pair t)) . 6457) (undo-tree-id187 . -21)) (26474 30236 14501 418000) 0 nil])
([nil nil ((#("{\\bfseries Figure 1 - Word cloud of positive comments}" 0 1 (fontified t) 1 9 (fontified t face font-lock-keyword-face) 9 10 (face font-lock-keyword-face fontified t) 10 53 (face (bold) fontified t) 53 54 (fontified t)) . -17895) (undo-tree-id196 . -9) (undo-tree-id197 . -9) (undo-tree-id198 . -9) (undo-tree-id199 . -15) (undo-tree-id200 . -15) 17910) nil (26474 30251 189950 715000) 0 nil] [nil nil ((#("{\\bfseries Materials and methods.}" 1 10 (face font-lock-keyword-face) 10 33 (face (bold))) . -9363) 17904) ((9363 . 9397)) (26474 30234 374268 866000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17919 . 17920) (nil fontified nil 17878 . 17920) (17878 . 17920)) nil (26474 30251 189946 896000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 17937) (undo-tree-id194 . -1) (undo-tree-id195 . -1)) nil (26474 30251 189946 138000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 17937) (undo-tree-id193 . -1)) nil (26474 30251 189944 105000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 17936) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1)) nil (26474 30251 190030 788000) 0 nil])
([nil nil ((#("{\\bfseries Figure 2 - Word cloud of negative comments}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 53 (face (bold) fontified t) 53 54 (fontified t)) . -18052) (undo-tree-id205 . -15) (undo-tree-id206 . -15) 18067) nil (26474 30258 223449 716000) 0 nil] [nil nil ((#("{\\bfseries Materials and methods.}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 33 (face (bold) fontified t) 33 34 (fontified t)) . -9363) 18053) ((9363 . 9397)) (26474 30251 189928 329000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18076 . 18077) (nil fontified nil 18035 . 18077) (18035 . 18077)) nil (26474 30258 223447 294000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 18093) (undo-tree-id203 . -1) (undo-tree-id204 . -1)) nil (26474 30258 223446 462000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18093) (undo-tree-id202 . -1)) nil (26474 30258 223444 282000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18093) (undo-tree-id201 . -1)) nil (26474 30258 223440 309000) 0 nil])
([nil nil ((#("{\\bfseries Figure 3 - Bigram analysis for negative and positive reviews}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 71 (face (bold) fontified t) 71 72 (fontified t)) . -18591) (undo-tree-id258 . -12) (undo-tree-id259 . -12) (undo-tree-id260 . -12) (undo-tree-id261 . -12) (undo-tree-id262 . -12) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (undo-tree-id265 . -12) (undo-tree-id266 . -12) (undo-tree-id267 . -12) (undo-tree-id268 . -12) 18603 (t 26474 30258 251748 772000)) nil (26474 30264 160667 37000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18633 . 18634) (nil fontified nil 18574 . 18634) (18574 . 18634)) nil (26474 30264 160530 26000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18649) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1)) nil (26474 30264 160529 33000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18649) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1)) nil (26474 30264 160521 126000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18649) (undo-tree-id207 . -1)) nil (26474 30665 426253 552000) 0 nil])
([nil nil ((nil fontified t 17836 . 17837) (t 26474 30667 179014 392000) (#("8" 0 1 (fontified t)) . -17836) (t 26474 30667 179014 392000) (17837 . 17838) 17836 (t 26474 30667 179014 392000)) nil (26474 30669 161961 612000) 0 nil] [nil nil ((#("8" 0 1 (fontified t)) . -17836) (t 26474 30264 184578 538000) (17837 . 17838) 17836 (t 26474 30264 184578 538000)) ((#("7" 0 1 (fontified nil)) . 17837) (17836 . 17837)) (26474 30665 42223 51000) 0 nil])
([nil nil ((nil fontified t 17836 . 17837) (#("7" 0 1 (fontified t)) . -17836) (17837 . 17838) 17836) nil (26474 30669 161957 294000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -17992) (17993 . 17994) 17992) ((#("7" 0 1 (fontified nil)) . 17993) (17992 . 17993)) (26474 30664 594147 583000) 0 nil])
([nil nil ((nil fontified t 17836 . 17837) (t 26474 30669 201956 338000) (#("6" 0 1 (fontified t)) . -17836) (t 26474 30669 201956 338000) (17837 . 17838) 17836 (t 26474 30669 201956 338000)) nil (26474 30682 178145 852000) 0 nil])
([nil nil ((#("	\\includegraphics[width=0.7\\textwidth]{media/ict/image10}
	\\caption*{Figure 2 - Word cloud of negative comments}
" 0 1 (fontified t) 1 17 (face font-lock-keyword-face fontified t) 17 26 (fontified t) 26 27 (fontified t) 27 37 (face font-lock-keyword-face fontified t) 37 39 (fontified t) 39 56 (face font-lock-builtin-face fontified t) 56 58 (fontified t) 58 59 (fontified t) 59 68 (face font-lock-keyword-face fontified t) 68 69 (fontified t) 69 110 (fontified t) 110 111 (fontified t rear-nonsticky t) 111 113 (fontified t)) . 17966) (undo-tree-id778 . -112) (undo-tree-id779 . -58) (undo-tree-id780 . -58) (undo-tree-id781 . -69) (undo-tree-id782 . -26) (undo-tree-id783 . -26) (undo-tree-id784 . -113) (undo-tree-id785 . -113) (undo-tree-id787 . -58) (undo-tree-id789 . -58) (undo-tree-id791 . -58) (undo-tree-id793 . -58) (undo-tree-id795 . -58) (undo-tree-id797 . -58) (undo-tree-id799 . -58) (undo-tree-id801 . -58) (undo-tree-id802 . -58) (undo-tree-id804 . -58) (undo-tree-id806 . -113) 18024 (t 26474 30549 5405 632000)) ((17966 . 18079)) (26474 30664 66225 651000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 17935) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (t 26474 30472 538599 917000)) ((17935 . 17936)) (26474 30546 581523 291000) 0 nil])
([nil nil ((nil fontified t 17836 . 17837) (#("7" 0 1 (fontified t)) . -17836) (17837 . 17838) 17836) nil (26474 30684 282042 598000) 0 nil] [nil nil ((nil fontified t 17836 . 17837) (#("7" 0 1 (fontified t)) . -17836) (17837 . 17838) 17836) ((#("8" 0 1 (fontified nil)) . 17837) (17836 . 17837) (t 26474 30681 959590 226000)) (26474 30681 922942 117000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17922 . 17923) (#("
" 0 1 (fontified nil)) . -18034) (17921 . 18035) 17867) ((#("
	\\includegraphics[width=0.7\\textwidth]{media/ict/image10}
	\\caption*{Figure 2 - Word cloud of negative comments}
" 0 1 (fontified t) 1 2 (fontified nil rear-nonsticky nil) 2 18 (face font-lock-keyword-face fontified nil) 18 27 (fontified nil) 27 28 (fontified nil) 28 38 (face font-lock-keyword-face fontified nil) 38 40 (fontified nil) 40 57 (face font-lock-builtin-face fontified nil) 57 59 (fontified nil) 59 60 (fontified nil) 60 69 (face font-lock-keyword-face fontified nil) 69 70 (fontified nil) 70 111 (fontified nil) 111 112 (fontified nil rear-nonsticky t) 112 113 (fontified nil) 113 114 (fontified nil)) . 17921) (undo-tree-id809 . -27) (undo-tree-id810 . -27) (undo-tree-id811 . -27) (undo-tree-id812 . -27) (undo-tree-id813 . -27) (undo-tree-id814 . -27) (undo-tree-id815 . -27) (undo-tree-id816 . -27) (undo-tree-id817 . -27) (undo-tree-id818 . -27) (undo-tree-id819 . -27) (undo-tree-id820 . -27) (undo-tree-id821 . -27) (undo-tree-id822 . -27) (undo-tree-id823 . -27) (undo-tree-id824 . -27) (undo-tree-id825 . -27) (undo-tree-id826 . -27) (undo-tree-id827 . -27) (undo-tree-id828 . -27) (undo-tree-id829 . -27) (undo-tree-id830 . -27) (undo-tree-id831 . -27) (undo-tree-id832 . -27) (undo-tree-id833 . -27) (undo-tree-id834 . -27) (undo-tree-id835 . -27) (undo-tree-id836 . -27) (undo-tree-id837 . -27) (undo-tree-id838 . -27) (undo-tree-id839 . -27) (undo-tree-id840 . -27) (undo-tree-id841 . -27) (18034 . 18035) (nil rear-nonsticky t 17922 . 17923)) (26474 30663 873431 29000) 0 nil])
([nil nil ((#("
After removing duplicate data, correcting misspelled words, and
performing the transformation mentioned above, we can have a visual
overview of the dataset. Different types of visualization were used to
review the sentiment data beforehand. By visualizing sentiment data,
quantitative and visual analyses were conducted to clearly see the
positive and negative words that are often used. Figures 1, 2, 3 show
overviews of the preprocessed data. Figure 1 shows a cloud of positive
comments, while Figure 2 shows a cloud of negative comments.
" 0 256 (fontified t) 256 273 (fontified t) 273 326 (fontified t) 326 340 (fontified t) 340 464 (fontified t) 464 481 (fontified t) 481 542 (fontified t)) . 17221) (undo-tree-id274 . -541) (undo-tree-id275 . -481) (undo-tree-id276 . -481) (undo-tree-id277 . -542) (undo-tree-id279 . -94) (undo-tree-id281 . -94) (undo-tree-id283 . -94) (undo-tree-id285 . -30) (undo-tree-id287 . -30) (undo-tree-id289 . -30) (undo-tree-id291 . -30) (undo-tree-id293 . -30) (undo-tree-id295 . -30) (undo-tree-id297 . -30) (undo-tree-id299 . -30) (undo-tree-id301 . -1) (undo-tree-id303 . -1) (undo-tree-id305 . -1) (undo-tree-id307 . -1) (undo-tree-id309 . -1) (undo-tree-id311 . -1) (undo-tree-id313 . -1) (undo-tree-id315 . -1) (undo-tree-id317 . -1) (undo-tree-id319 . -65) (undo-tree-id321 . -65) (undo-tree-id323 . -133) (undo-tree-id325 . -133) (undo-tree-id327 . -133) (undo-tree-id329 . -204) (undo-tree-id331 . -204) (undo-tree-id333 . -273) (undo-tree-id335 . -273) (undo-tree-id337 . -273) (undo-tree-id339 . -340) (undo-tree-id341 . -340) (undo-tree-id343 . -340) (undo-tree-id345 . -340) (undo-tree-id347 . -340) (undo-tree-id349 . -340) (undo-tree-id351 . -340) (undo-tree-id353 . -340) (undo-tree-id355 . -340) (undo-tree-id357 . -340) (undo-tree-id359 . -410) (undo-tree-id361 . -410) (undo-tree-id363 . -410) (undo-tree-id365 . -410) (undo-tree-id367 . -410) (undo-tree-id369 . -410) (undo-tree-id371 . -410) (undo-tree-id373 . -481) (undo-tree-id375 . -481) (undo-tree-id377 . -481) (undo-tree-id379 . -481) (undo-tree-id381 . -481) (undo-tree-id383 . -481) (undo-tree-id385 . -481) (undo-tree-id387 . -481) (undo-tree-id389 . -481) (undo-tree-id391 . -481) (undo-tree-id392 . -481) (undo-tree-id394 . -481) (undo-tree-id396 . -542) 17702) ((17221 . 17763)) (26474 30546 424101 219000) 0 nil] [nil nil ((nil fontified t 17836 . 17837) (t 26474 30474 372547 291000) (#("7" 0 1 (fontified t)) . -17836) (t 26474 30474 372547 291000) (17837 . 17838) 17836 (t 26474 30474 372547 291000)) ((#("6" 0 1 (fontified nil)) . 17837) (17836 . 17837)) (26474 30514 214870 627000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -18531) (t 26474 30684 318522 529000) (18532 . 18533) 18531 (t 26474 30684 318522 529000)) nil (26474 30724 544597 569000) 0 nil])
nil
([nil nil ((#("
\\begin{figure}[H]
	\\centering
\\end{figure}
" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t latex-env-pair t) 8 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 35 (face font-lock-keyword-face fontified t) 35 36 (fontified t latex-env-pair t) 36 42 (face font-lock-function-name-face fontified t latex-env-pair t) 42 43 (fontified t latex-env-pair t) 43 44 (fontified t)) . 18048) (undo-tree-id559 . -43) (undo-tree-id560 . -31) (undo-tree-id561 . -31) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -19) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -19) (undo-tree-id568 . -19) (undo-tree-id569 . -31) (undo-tree-id570 . -31) (undo-tree-id571 . -31) (undo-tree-id572 . -43) (undo-tree-id573 . -43) (undo-tree-id574 . -31) (undo-tree-id575 . -31) (undo-tree-id577 . -19) (undo-tree-id579 . -19) (undo-tree-id581 . -19) (undo-tree-id583 . -19) (undo-tree-id585 . -19) (undo-tree-id587 . -19) (undo-tree-id589 . -19) (undo-tree-id591 . -19) (undo-tree-id593 . -19) (undo-tree-id595 . -19) (undo-tree-id597 . -19) (undo-tree-id599 . -19) (undo-tree-id601 . -19) (undo-tree-id603 . -19) (undo-tree-id605 . -19) (undo-tree-id607 . -19) (undo-tree-id609 . -19) (undo-tree-id611 . -19) (undo-tree-id613 . -19) (undo-tree-id615 . -19) (undo-tree-id617 . -19) (undo-tree-id619 . -19) (undo-tree-id621 . -19) (undo-tree-id623 . -19) (undo-tree-id625 . -19) (undo-tree-id627 . -19) (undo-tree-id629 . -19) (undo-tree-id631 . -19) (undo-tree-id633 . -31) (undo-tree-id635 . -31) (undo-tree-id637 . -31) (undo-tree-id639 . -31) (undo-tree-id641 . -31) (undo-tree-id643 . -31) (undo-tree-id645 . -31) (undo-tree-id647 . -31) (undo-tree-id649 . -31) (undo-tree-id651 . -31) (undo-tree-id653 . -31) (undo-tree-id655 . -31) (undo-tree-id657 . -31) (undo-tree-id659 . -31) (undo-tree-id661 . -31) (undo-tree-id663 . -31) (undo-tree-id665 . -31) (undo-tree-id667 . -31) (undo-tree-id669 . -31) (undo-tree-id671 . -31) (undo-tree-id673 . -31) (undo-tree-id675 . -31) (undo-tree-id677 . -31) (undo-tree-id679 . -31) (undo-tree-id681 . -31) (undo-tree-id683 . -31) (undo-tree-id685 . -31) (undo-tree-id687 . -31) (undo-tree-id689 . -31) (undo-tree-id691 . -31) (undo-tree-id693 . -31) (undo-tree-id695 . -31) (undo-tree-id697 . -31) (undo-tree-id699 . -31) (undo-tree-id701 . -31) (undo-tree-id703 . -31) (undo-tree-id705 . -31) (undo-tree-id707 . -31) (undo-tree-id709 . -31) (undo-tree-id711 . -31) (undo-tree-id713 . -31) (undo-tree-id715 . -19) (undo-tree-id717 . -19) (undo-tree-id719 . -19) (undo-tree-id721 . -19) (undo-tree-id723 . -19) (undo-tree-id725 . -19) (undo-tree-id727 . -1) (undo-tree-id729 . -1) (undo-tree-id731 . -1) (undo-tree-id733 . -1) (undo-tree-id735 . -1) (undo-tree-id737 . -1) (undo-tree-id739 . -1) (undo-tree-id741 . -1) (undo-tree-id743 . -1) (undo-tree-id745 . -1) (undo-tree-id747 . -1) (undo-tree-id749 . -19) (undo-tree-id751 . -19) (undo-tree-id753 . -19) (undo-tree-id755 . -31) (undo-tree-id757 . -31) (undo-tree-id759 . -31) (undo-tree-id761 . -31) (undo-tree-id763 . -31) (undo-tree-id765 . -31) (undo-tree-id767 . -31) (undo-tree-id769 . -31) (undo-tree-id771 . -31) (undo-tree-id773 . -31) (undo-tree-id775 . -31) (undo-tree-id777 . -44) 18079) ((18048 . 18092)) (26474 30663 714221 909000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17548 . 17549) (#("
" 0 1 (fontified nil)) . -18090) (17548 . 18091) 17536) ((#("

After removing duplicate data, correcting misspelled words, and
performing the transformation mentioned above, we can have a visual
overview of the dataset. Different types of visualization were used to
review the sentiment data beforehand. By visualizing sentiment data,
quantitative and visual analyses were conducted to clearly see the
positive and negative words that are often used. Figures 1, 2, 3 show
overviews of the preprocessed data. Figure 1 shows a cloud of positive
comments, while Figure 2 shows a cloud of negative comments.
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil) 2 257 (fontified t) 257 274 (fontified t) 274 327 (fontified t) 327 341 (fontified t) 341 465 (fontified t) 465 482 (fontified t) 482 542 (fontified nil) 542 543 (fontified nil)) . 17548) (undo-tree-id397 . -1) (undo-tree-id398 . -542) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (18090 . 18091) (nil rear-nonsticky t 17548 . 17549) (t 26474 30519 711246 258000)) (26474 30519 661229 48000) 0 nil])
([nil nil ((nil fontified t 17991 . 17992) (t 26474 30489 372116 869000) (#("7" 0 1 (fontified t)) . -17991) (t 26474 30489 372116 869000) (17992 . 17993) 17991 (t 26474 30489 372116 869000)) ((#("6" 0 1 (fontified nil)) . 17992) (17991 . 17992) (t 26474 30499 786818 14000)) (26474 30499 766638 27000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.9\\textwidth]{media/ict/image11}
	\\caption*{Figure 3 - Bigram analysis for negative and positive reviews}
\\end{figure}

" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 56 (fontified t) 56 57 (fontified t) 57 62 (face font-lock-keyword-face fontified t) 62 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 88 (fontified t) 88 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 158 (fontified t) 158 159 (fontified t rear-nonsticky t) 159 161 (fontified t) 161 165 (face font-lock-keyword-face fontified t) 165 166 (fontified t latex-env-pair t) 166 172 (face font-lock-function-name-face fontified t latex-env-pair t) 172 173 (fontified t latex-env-pair t) 173 174 (fontified t) 174 175 (fontified t)) . 18475) (undo-tree-id842 . -174) (undo-tree-id843 . -174) (undo-tree-id844 . -16) (undo-tree-id845 . -174) (undo-tree-id846 . -99) (undo-tree-id847 . -16) (undo-tree-id848 . -16) (undo-tree-id849 . -16) (undo-tree-id850 . -16) (undo-tree-id851 . -16) (undo-tree-id852 . -16) (undo-tree-id853 . -16) (undo-tree-id854 . -16) (undo-tree-id855 . -16) (undo-tree-id856 . -16) (undo-tree-id857 . -16) (undo-tree-id858 . -16) (undo-tree-id859 . -16) (undo-tree-id860 . -16) (undo-tree-id861 . -16) (undo-tree-id862 . -28) (undo-tree-id863 . -28) (undo-tree-id864 . -28) (undo-tree-id865 . -28) (undo-tree-id866 . -28) (undo-tree-id867 . -28) (undo-tree-id868 . -28) (undo-tree-id869 . -28) (undo-tree-id870 . -28) (undo-tree-id871 . -28) (undo-tree-id872 . -28) (undo-tree-id873 . -28) (undo-tree-id874 . -28) (undo-tree-id875 . -28) (undo-tree-id876 . -28) (undo-tree-id877 . -16) (undo-tree-id878 . -16) (undo-tree-id879 . -16) (undo-tree-id880 . -16) (undo-tree-id881 . -16) (undo-tree-id882 . -16) (undo-tree-id883 . -16) (undo-tree-id884 . -16) (undo-tree-id885 . -16) (undo-tree-id886 . -16) (undo-tree-id887 . -16) (undo-tree-id888 . -16) (undo-tree-id889 . -16) (undo-tree-id890 . -16) (undo-tree-id891 . -16) (undo-tree-id892 . -16) (undo-tree-id893 . -16) (undo-tree-id894 . -16) (undo-tree-id895 . -16) (undo-tree-id896 . -16) (undo-tree-id897 . -16) (undo-tree-id898 . -16) (undo-tree-id899 . -16) (undo-tree-id900 . -16) (undo-tree-id901 . -16) (undo-tree-id902 . -16) (undo-tree-id903 . -16) (undo-tree-id904 . -16) (undo-tree-id905 . -16) (undo-tree-id906 . -16) (undo-tree-id907 . -16) (undo-tree-id908 . -16) (undo-tree-id909 . -16) (undo-tree-id910 . -16) (undo-tree-id911 . -16) (undo-tree-id912 . -16) (undo-tree-id913 . -16) (undo-tree-id914 . -29) (undo-tree-id915 . -29) (undo-tree-id916 . -29) (undo-tree-id917 . -29) (undo-tree-id918 . -29) (undo-tree-id919 . -29) (undo-tree-id920 . -29) (undo-tree-id921 . -29) (undo-tree-id922 . -29) (undo-tree-id923 . -29) (undo-tree-id924 . -29) (undo-tree-id925 . -29) (undo-tree-id926 . -29) (undo-tree-id927 . -29) (undo-tree-id928 . -29) (undo-tree-id929 . -29) (undo-tree-id930 . -29) (undo-tree-id931 . -43) (undo-tree-id932 . -43) (undo-tree-id933 . -43) (undo-tree-id934 . -43) (undo-tree-id935 . -43) (undo-tree-id936 . -101) (undo-tree-id937 . -101) (undo-tree-id938 . -101) (undo-tree-id939 . -101) (undo-tree-id940 . -101) (undo-tree-id941 . -101) (undo-tree-id942 . -173) (undo-tree-id943 . -173) (undo-tree-id944 . -173) (undo-tree-id945 . -173) (undo-tree-id946 . -173) (undo-tree-id947 . -173) (undo-tree-id948 . -173) (undo-tree-id949 . -173) (undo-tree-id950 . -173) (undo-tree-id951 . -173) (undo-tree-id952 . -173) (undo-tree-id953 . -173) (undo-tree-id954 . -173) (undo-tree-id955 . -173) (undo-tree-id956 . -173) (undo-tree-id957 . -173) (undo-tree-id958 . -173) (undo-tree-id959 . -173) (undo-tree-id960 . -173) (undo-tree-id961 . -173) (undo-tree-id962 . -173) (undo-tree-id963 . -174) (undo-tree-id964 . -174) (undo-tree-id965 . -174) (undo-tree-id966 . -174) (undo-tree-id967 . -174) (undo-tree-id968 . -174) (undo-tree-id969 . -174) (undo-tree-id970 . -174) (undo-tree-id971 . -174) (undo-tree-id972 . -174) (undo-tree-id973 . -174) (undo-tree-id974 . -174) (undo-tree-id975 . -174) (undo-tree-id976 . -174) (undo-tree-id977 . -174) (undo-tree-id978 . -174) (undo-tree-id979 . -174) (undo-tree-id980 . -174) (undo-tree-id981 . -174) (undo-tree-id982 . -174) (undo-tree-id983 . -174) (undo-tree-id984 . -174) (undo-tree-id985 . -174) (undo-tree-id986 . -174) (undo-tree-id987 . -175) 18649) nil (26474 30724 544593 758000) 0 nil])
([nil nil ((nil fontified t 17836 . 17837) (t 26474 30576 815607 573000) (#("7" 0 1 (fontified t)) . -17836) (t 26474 30576 815607 573000) (17837 . 17838) 17836 (t 26474 30576 815607 573000)) ((#("6" 0 1 (fontified nil)) . 17837) (17836 . 17837)) (26474 30663 554106 930000) 0 nil])
nil
nil
([nil nil ((nil rear-nonsticky nil 19278 . 19279) (#("
" 0 1 (fontified nil)) . -19453) (19278 . 19454)) nil (26474 30724 544490 927000) 0 nil])
([nil nil ((17836 . 17837) (#("6" 0 1 (fontified t)) . 17836) (undo-tree-id808 . -1) (t 26474 30587 466301 934000)) ((17836 . 17837) (#("1" 0 1 (fontified t)) . 17836)) (26474 30663 394692 946000) 0 nil])
([nil nil ((18093 . 18114) (19278 . 19294) 18093 (t 26474 30724 591366 780000)) nil (26474 30728 602629 318000) 0 nil])
([nil nil ((17948 . 17949) (#("7" 0 1 (fontified t)) . 17948)) ((17948 . 17949) (#("1" 0 1 (fontified t)) . 17948) (t 26474 30603 805833 41000)) (26474 30603 742982 476000) 0 nil])
([nil nil ((19491 . 19512) (20603 . 20619) (t 26474 30728 640250 584000)) nil (26474 30748 934699 275000) 0 nil])
nil
([nil nil ((#("{\\bfseries Figure 5 - Accuracy of logistic regression algorithm}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 63 (face (bold) fontified t) 63 64 (fontified t)) . -21712) (undo-tree-id1349 . -17) (undo-tree-id1350 . -17) 21729 (t 26474 30748 997666 359000)) nil (26474 30773 807021 162000) 0 nil])
([nil nil ((nil rear-nonsticky nil 21746 . 21747) (nil fontified nil 21695 . 21747) (21695 . 21747)) nil (26474 30773 807019 540000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 21764) (undo-tree-id1348 . -1)) nil (26474 30773 807018 905000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 21764) (undo-tree-id1347 . -1)) nil (26474 30773 807017 952000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 21763) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1)) nil (26474 30773 807016 133000) 0 nil])
([nil nil ((#("{\\bfseries Figure 6-Accuracy of Multinomial Naive Bayes model}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 61 (face (bold) fontified t) 61 62 (fontified t)) . -22358) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -4) (undo-tree-id1158 . -4) (undo-tree-id1159 . -4) (undo-tree-id1160 . -4) (undo-tree-id1161 . -4) (undo-tree-id1162 . -5) (undo-tree-id1163 . -5) (undo-tree-id1164 . -5) (undo-tree-id1165 . -5) (undo-tree-id1166 . -5) (undo-tree-id1167 . -5) (undo-tree-id1168 . -5) (undo-tree-id1169 . -5) (undo-tree-id1170 . -5) (undo-tree-id1171 . -5) (undo-tree-id1172 . -5) (undo-tree-id1173 . -5) (undo-tree-id1174 . -5) (undo-tree-id1175 . -5) (undo-tree-id1176 . -5) (undo-tree-id1177 . -6) (undo-tree-id1178 . -6) (undo-tree-id1179 . -6) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) (undo-tree-id1182 . -7) (undo-tree-id1183 . -7) (undo-tree-id1184 . -7) (undo-tree-id1185 . -7) (undo-tree-id1186 . -7) (undo-tree-id1187 . -8) (undo-tree-id1188 . -8) (undo-tree-id1189 . -8) (undo-tree-id1190 . -8) (undo-tree-id1191 . -8) (undo-tree-id1192 . -9) (undo-tree-id1193 . -9) (undo-tree-id1194 . -9) (undo-tree-id1195 . -9) (undo-tree-id1196 . -9) (undo-tree-id1197 . -10) (undo-tree-id1198 . -10) (undo-tree-id1199 . -10) (undo-tree-id1200 . -10) (undo-tree-id1201 . -10) (undo-tree-id1202 . -11) (undo-tree-id1203 . -11) (undo-tree-id1204 . -11) (undo-tree-id1205 . -11) (undo-tree-id1206 . -11) (undo-tree-id1207 . -12) (undo-tree-id1208 . -12) (undo-tree-id1209 . -12) (undo-tree-id1210 . -12) (undo-tree-id1211 . -12) (undo-tree-id1212 . -13) (undo-tree-id1213 . -13) (undo-tree-id1214 . -13) (undo-tree-id1215 . -13) (undo-tree-id1216 . -13) (undo-tree-id1217 . -14) (undo-tree-id1218 . -14) (undo-tree-id1219 . -14) (undo-tree-id1220 . -14) (undo-tree-id1221 . -14) (undo-tree-id1222 . -15) (undo-tree-id1223 . -15) (undo-tree-id1224 . -15) (undo-tree-id1225 . -15) (undo-tree-id1226 . -15) (undo-tree-id1227 . -16) (undo-tree-id1228 . -16) (undo-tree-id1229 . -16) (undo-tree-id1230 . -16) (undo-tree-id1231 . -16) (undo-tree-id1232 . -17) (undo-tree-id1233 . -17) (undo-tree-id1234 . -17) (undo-tree-id1235 . -17) (undo-tree-id1236 . -17) (undo-tree-id1237 . -18) (undo-tree-id1238 . -18) (undo-tree-id1239 . -18) (undo-tree-id1240 . -18) (undo-tree-id1241 . -18) (undo-tree-id1242 . -19) (undo-tree-id1243 . -19) (undo-tree-id1244 . -19) (undo-tree-id1245 . -19) (undo-tree-id1246 . -19) (undo-tree-id1247 . -20) (undo-tree-id1248 . -20) (undo-tree-id1249 . -20) (undo-tree-id1250 . -20) (undo-tree-id1251 . -20) (undo-tree-id1252 . -21) (undo-tree-id1253 . -21) (undo-tree-id1254 . -21) (undo-tree-id1255 . -21) (undo-tree-id1256 . -21) (undo-tree-id1257 . -21) (undo-tree-id1258 . -21) (undo-tree-id1259 . -21) (undo-tree-id1260 . -21) (undo-tree-id1261 . -21) (undo-tree-id1262 . -21) (undo-tree-id1263 . -21) (undo-tree-id1264 . -21) (undo-tree-id1265 . -21) (undo-tree-id1266 . -21) (undo-tree-id1267 . -21) (undo-tree-id1268 . -21) (undo-tree-id1269 . -21) (undo-tree-id1270 . -21) (undo-tree-id1271 . -21) (undo-tree-id1272 . -21) (undo-tree-id1273 . -21) (undo-tree-id1274 . -21) (undo-tree-id1275 . -21) (undo-tree-id1276 . -21) (undo-tree-id1277 . -21) (undo-tree-id1278 . -21) (undo-tree-id1279 . -21) (undo-tree-id1280 . -21) (undo-tree-id1281 . -21) (undo-tree-id1282 . -21) 22379) nil (26474 30773 806979 496000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22390 . 22391) (nil fontified nil 22341 . 22391) (22341 . 22391)) nil (26474 30773 806876 25000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22407) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1)) nil (26474 30773 806873 363000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22407) (undo-tree-id1001 . -1)) nil (26474 30773 806770 36000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22407)) nil (26474 30773 806768 738000) 0 nil])
([nil nil ((#("{\\bfseries Figure 7-One-hot vector}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 34 (face (bold) fontified t) 34 35 (fontified t)) . -24265) (undo-tree-id988 . -15) (undo-tree-id989 . -15) (undo-tree-id990 . -15) (undo-tree-id991 . -15) (undo-tree-id992 . -15) (undo-tree-id993 . -15) (undo-tree-id994 . -15) (undo-tree-id995 . -15) (undo-tree-id996 . -15) (undo-tree-id997 . -15) (undo-tree-id998 . -15) (undo-tree-id999 . -15) (undo-tree-id1000 . -15) 24280) nil (26474 30773 806767 852000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24270 . 24271) (nil fontified nil 24248 . 24271) (24248 . 24271)) nil (26474 30773 870487 189000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24286) (undo-tree-id1422 . -1)) nil (26474 30792 223329 245000) 0 nil] [nil nil ((nil rear-nonsticky nil 24308 . 24309) (nil fontified nil 24286 . 24309) (24286 . 24309)) ((#("Figure 7-One-hot vector" 0 22 (fontified nil) 22 23 (fontified nil rear-nonsticky nil)) . 24286) (undo-tree-id1356 . -22) (undo-tree-id1357 . -22) (undo-tree-id1358 . -22) (undo-tree-id1359 . -22) (undo-tree-id1360 . -22) (undo-tree-id1361 . -22) (undo-tree-id1362 . -22) (undo-tree-id1363 . -22) (undo-tree-id1364 . -22) (undo-tree-id1365 . -22) (undo-tree-id1366 . -22) (undo-tree-id1367 . -22) (undo-tree-id1368 . -22) (undo-tree-id1369 . -22) (undo-tree-id1370 . -22) (nil rear-nonsticky t 24308 . 24309)) (26474 30773 807106 389000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24286) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1)) nil (26474 30792 223326 585000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24330 . 24331) (nil fontified nil 24308 . 24331) (24308 . 24331)) ((#("Figure 7-One-hot vector" 0 22 (fontified nil) 22 23 (fontified nil rear-nonsticky nil)) . 24308) (undo-tree-id1351 . -22) (undo-tree-id1352 . -22) (undo-tree-id1353 . -22) (undo-tree-id1354 . -22) (undo-tree-id1355 . -22) (nil rear-nonsticky t 24330 . 24331)) (26474 30773 806748 7000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24286)) nil (26474 30792 223319 731000) 0 nil])
nil
([nil nil ((#("{\\bfseries Figure 8 - RNN model creation}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 40 (face (bold) fontified t) 40 41 (fontified t)) . -24926) (undo-tree-id1408 . -39) (undo-tree-id1409 . -39) 24965) nil (26474 30792 223318 826000) 0 nil])
([nil nil ((24926 . 24933) (24926 . 24927)) nil (26474 30792 223317 450000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24937 . 24938) (nil fontified nil 24909 . 24938) (24909 . 24938)) nil (26474 30792 223316 925000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24953) (undo-tree-id1407 . -1)) nil (26474 30792 223316 313000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24953) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1)) nil (26474 30792 223315 141000) 0 nil])
([nil nil ((#("nnnnnnn
" 0 7 (fontified t) 7 8 (fontified t)) . 24953) (undo-tree-id1401 . -7) (undo-tree-id1402 . 1) (undo-tree-id1403 . -7) (undo-tree-id1404 . -8)) nil (26474 30792 223313 283000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24953) (undo-tree-id1400 . 1)) nil (26474 30792 223309 977000) 0 nil])
([nil nil ((#("{\\bfseries Figure 9 - Improved LSTM algorithm code}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 50 (face (bold) fontified t) 50 51 (fontified t)) . -27596) (undo-tree-id1371 . -22) (undo-tree-id1372 . -22) (undo-tree-id1373 . -22) (undo-tree-id1374 . -22) (undo-tree-id1375 . -22) (undo-tree-id1376 . -22) (undo-tree-id1377 . -22) (undo-tree-id1378 . -22) (undo-tree-id1379 . -22) (undo-tree-id1380 . -22) (undo-tree-id1381 . -22) (undo-tree-id1382 . -22) (undo-tree-id1383 . -22) (undo-tree-id1384 . -22) (undo-tree-id1385 . -22) (undo-tree-id1386 . -22) (undo-tree-id1387 . -22) (undo-tree-id1388 . -22) (undo-tree-id1389 . -22) (undo-tree-id1390 . -22) (undo-tree-id1391 . -22) (undo-tree-id1392 . -22) (undo-tree-id1393 . -22) (undo-tree-id1394 . -22) (undo-tree-id1395 . -22) (undo-tree-id1396 . -22) (undo-tree-id1397 . -22) (undo-tree-id1398 . -22) (undo-tree-id1399 . -22) 27618) nil (26474 30792 223308 248000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27617 . 27618) (nil fontified nil 27579 . 27618) (27579 . 27618)) nil (26474 30792 223281 862000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27671 . 27672) (nil fontified nil 27633 . 27672) (27633 . 27672)) nil (26474 30792 223404 333000) 0 nil])
([nil nil ((#("Figure 9 - Improved LSTM algorithm code
" 0 38 (fontified t) 38 39 (rear-nonsticky t fontified t) 39 40 (fontified t)) . 27633) (undo-tree-id1456 . -39) (undo-tree-id1457 . -38) (undo-tree-id1458 . -38) (undo-tree-id1459 . -38) (undo-tree-id1460 . -38) (undo-tree-id1461 . -38) (undo-tree-id1462 . -38) (undo-tree-id1463 . -38) (undo-tree-id1464 . -38) (undo-tree-id1465 . -38) (undo-tree-id1466 . -38) (undo-tree-id1467 . -38) (undo-tree-id1468 . -38) (undo-tree-id1469 . -38) (undo-tree-id1470 . -38) (undo-tree-id1471 . -38) (undo-tree-id1472 . -38) (undo-tree-id1473 . -38) (undo-tree-id1474 . -38) (undo-tree-id1475 . -38) (undo-tree-id1476 . -38) (undo-tree-id1477 . -38) (undo-tree-id1478 . -38) (undo-tree-id1479 . -38) (undo-tree-id1480 . -38) (undo-tree-id1481 . -38) (undo-tree-id1482 . -38) (undo-tree-id1483 . -38) (undo-tree-id1484 . -38) (undo-tree-id1485 . -38) (undo-tree-id1486 . -38) (undo-tree-id1487 . -38) (undo-tree-id1488 . -38) (undo-tree-id1489 . -38) (undo-tree-id1490 . -40) 27671) nil (26474 30796 144939 94000) 0 nil] [nil nil ((nil rear-nonsticky nil 27709 . 27710) (nil fontified nil 27671 . 27710) (27671 . 27710)) ((#("Figure 9 - Improved LSTM algorithm code" 0 38 (fontified nil) 38 39 (rear-nonsticky nil fontified nil)) . 27671) (undo-tree-id1423 . -38) (undo-tree-id1424 . -38) (undo-tree-id1425 . -38) (undo-tree-id1426 . -38) (undo-tree-id1427 . -38) (nil rear-nonsticky t 27709 . 27710)) (26474 30792 223277 239000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27633) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1)) nil (26474 30796 144917 763000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 27633)) nil (26474 30796 144886 665000) 0 nil])
([nil nil ((29041 . 29062) (31181 . 31197) 29041 (t 26474 30796 169312 599000)) nil (26474 31803 180718 783000) 0 nil])
([nil nil ((31219 . 31234) (31242 . 31255) (t 26474 30802 78143 21000)) nil (26474 32486 558336 6000) 0 nil] [nil nil ((31219 . 31248) (#("{\\bfseries References}
" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 21 (face (bold) fontified t) 21 23 (fontified t)) . -31219) (undo-tree-id1491 . -23) 31242 (t 26474 30802 78143 21000)) ((31219 . 31242) (#("\\text{{\\bfseries References}}" 0 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t) 7 16 (face font-lock-keyword-face fontified t) 16 27 (face (bold) fontified t) 27 29 (fontified t)) . 31219)) (26474 31803 180454 267000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28677 . 28678) (nil fontified nil 28234 . 28678) (28234 . 28678) (t 26474 31816 741018 751000)) nil (26474 32492 615374 104000) 0 nil] [nil nil ((nil rear-nonsticky nil 28394 . 28395) (nil fontified nil 28234 . 28395) (28234 . 28395) (t 26474 31816 741018 751000)) ((#("№	Algorithm name	Accuracy
1	Logistic regression	83.96%
2	Multinomial Naive Bayes	83.49%
3	Linear SVM	79,25%
4	XGboost	80,1%
5	LSTM	60.00%
6	Improved LSTM	84.12%
" 0 53 (fontified nil) 53 55 (face font-lock-comment-face fontified nil) 55 86 (fontified nil) 86 88 (face font-lock-comment-face fontified nil) 88 106 (fontified nil) 106 108 (face font-lock-comment-face fontified nil) 108 122 (fontified nil) 122 124 (face font-lock-comment-face fontified nil) 124 136 (fontified nil) 136 138 (face font-lock-comment-face fontified nil) 138 159 (fontified nil) 159 160 (face font-lock-comment-face fontified nil) 160 161 (face font-lock-comment-face rear-nonsticky nil fontified nil)) . 28234) (undo-tree-id1492 . -160) (undo-tree-id1493 . -161) (undo-tree-id1494 . -161) (undo-tree-id1495 . -161) (undo-tree-id1496 . -161) (undo-tree-id1497 . -161) (nil fontified t 28370 . 28372) (nil fontified t 28358 . 28370) (nil fontified t 28356 . 28358) (nil fontified t 28342 . 28356) (nil fontified t 28340 . 28342) (nil fontified t 28322 . 28340) (nil fontified t 28320 . 28322) (nil fontified t 28289 . 28320) (nil fontified t 28287 . 28289) (nil fontified t 28234 . 28287) (nil rear-nonsticky t 28394 . 28395)) (26474 32486 558047 680000) 0 nil])
nil
([nil nil ((28248 . 28249)) nil (26474 32492 615369 503000) 0 nil])
nil
([nil nil ((28258 . 28261) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -28258) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (28251 . 28259) (28250 . 28251) (t 26474 32492 693559 401000) 28248) nil (26474 32505 711806 435000) 0 nil])
([nil nil ((#("{\\bfseries Table 1 - Results of algorithm}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 29 (face (bold) fontified t) 29 41 (face (bold) fontified t) 41 42 (fontified t)) . -28191) (undo-tree-id1510 . -11) (undo-tree-id1511 . -11) 28202 (t 26474 32505 741183 712000)) nil (26474 32526 83568 275000) 0 nil])
([nil nil ((28214 . 28219) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -28214) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (28209 . 28215) (28208 . 28209) 28192) nil (26474 32526 83565 849000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28248 . 28249) (nil fontified nil 28219 . 28249) (28219 . 28249) 28218) nil (26474 32526 83552 610000) 0 nil])
([nil nil ((28249 . 28250)) nil (26474 32526 83549 25000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 28191) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (t 26474 32526 131596 596000)) nil (26474 32531 129736 768000) 0 nil])
([nil nil ((#("% \\begin{longtable}[]{@{}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 4\\tabcolsep) * \\real{0.0942}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 4\\tabcolsep) * \\real{0.4907}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 4\\tabcolsep) * \\real{0.4151}}@{}}
% \\toprule\\noalign{}
% \\begin{minipage}[b]{\\linewidth}\\raggedright
% №
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% Algorithm name
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% Accuracy
% \\end{minipage} \\\\
% \\midrule\\noalign{}
% \\endhead
% \\bottomrule\\noalign{}
% \\endlastfoot
% 1 & Logistic regression & 83.96\\% \\\\
% 2 & Multinomial Naive Bayes & 83.49\\% \\\\
% 3 & Linear SVM & 79,25\\% \\\\
% 4 & XGboost & 80,1\\% \\\\
% 5 & LSTM & 60.00\\% \\\\
% 6 & Improved LSTM & 84.12\\% \\\\
% \\end{longtable}
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 8 (face font-lock-comment-face fontified t) 8 19 (face font-lock-comment-face fontified t latex-env-pair t) 19 26 (face font-lock-comment-face fontified t) 26 30 (face font-lock-comment-delimiter-face fontified t) 30 108 (face font-lock-comment-face fontified t) 108 112 (face font-lock-comment-delimiter-face fontified t) 112 190 (face font-lock-comment-face fontified t) 190 194 (face font-lock-comment-delimiter-face fontified t) 194 276 (face font-lock-comment-face fontified t) 276 278 (face font-lock-comment-delimiter-face fontified t) 278 297 (face font-lock-comment-face fontified t) 297 299 (face font-lock-comment-delimiter-face fontified t) 299 305 (face font-lock-comment-face fontified t) 305 315 (face font-lock-comment-face fontified t latex-env-pair t) 315 343 (face font-lock-comment-face fontified t) 343 345 (face font-lock-comment-delimiter-face fontified t) 345 347 (face font-lock-comment-face fontified t) 347 349 (face font-lock-comment-delimiter-face fontified t) 349 353 (face font-lock-comment-face fontified t) 353 363 (face font-lock-comment-face fontified t latex-env-pair t) 363 372 (face font-lock-comment-face fontified t) 372 382 (face font-lock-comment-face fontified t latex-env-pair t) 382 410 (face font-lock-comment-face fontified t) 410 412 (face font-lock-comment-delimiter-face fontified t) 412 427 (face font-lock-comment-face fontified t) 427 429 (face font-lock-comment-delimiter-face fontified t) 429 433 (face font-lock-comment-face fontified t) 433 443 (face font-lock-comment-face fontified t latex-env-pair t) 443 452 (face font-lock-comment-face fontified t) 452 462 (face font-lock-comment-face fontified t latex-env-pair t) 462 490 (face font-lock-comment-face fontified t) 490 492 (face font-lock-comment-delimiter-face fontified t) 492 501 (face font-lock-comment-face fontified t) 501 503 (face font-lock-comment-delimiter-face fontified t) 503 507 (face font-lock-comment-face fontified t) 507 517 (face font-lock-comment-face fontified t latex-env-pair t) 517 521 (face font-lock-comment-face fontified t) 521 523 (face font-lock-comment-delimiter-face fontified t) 523 542 (face font-lock-comment-face fontified t) 542 544 (face font-lock-comment-delimiter-face fontified t) 544 553 (face font-lock-comment-face fontified t) 553 555 (face font-lock-comment-delimiter-face fontified t) 555 577 (face font-lock-comment-face fontified t) 577 579 (face font-lock-comment-delimiter-face fontified t) 579 592 (face font-lock-comment-face fontified t) 592 594 (face font-lock-comment-delimiter-face fontified t) 594 631 (face font-lock-comment-face fontified t) 631 633 (face font-lock-comment-delimiter-face fontified t) 633 674 (face font-lock-comment-face fontified t) 674 676 (face font-lock-comment-delimiter-face fontified t) 676 704 (face font-lock-comment-face fontified t) 704 706 (face font-lock-comment-delimiter-face fontified t) 706 730 (face font-lock-comment-face fontified t) 730 732 (face font-lock-comment-delimiter-face fontified t) 732 754 (face font-lock-comment-face fontified t) 754 756 (face font-lock-comment-delimiter-face fontified t) 756 787 (face font-lock-comment-face fontified t) 787 789 (face font-lock-comment-delimiter-face fontified t) 789 793 (face font-lock-comment-face fontified t) 793 804 (face font-lock-comment-face fontified t latex-env-pair t) 804 805 (face font-lock-comment-face fontified t)) . 28690) (undo-tree-id1512 . -804) (undo-tree-id1513 . -787) (undo-tree-id1514 . -787) (undo-tree-id1515 . -276) (undo-tree-id1516 . -276) (undo-tree-id1517 . -276) (undo-tree-id1518 . -276) (undo-tree-id1519 . -276) (undo-tree-id1520 . -427) (undo-tree-id1521 . -427) (undo-tree-id1522 . -427) (undo-tree-id1523 . -427) (undo-tree-id1524 . -427) (undo-tree-id1525 . -490) (undo-tree-id1526 . -490) (undo-tree-id1527 . -490) (undo-tree-id1528 . -490) (undo-tree-id1529 . -490) (undo-tree-id1530 . -501) (undo-tree-id1531 . -501) (undo-tree-id1532 . -501) (undo-tree-id1533 . -501) (undo-tree-id1534 . -501) (undo-tree-id1535 . -521) (undo-tree-id1536 . -521) (undo-tree-id1537 . -521) (undo-tree-id1538 . -521) (undo-tree-id1539 . -521) (undo-tree-id1540 . -542) (undo-tree-id1541 . -542) (undo-tree-id1542 . -542) (undo-tree-id1543 . -542) (undo-tree-id1544 . -542) (undo-tree-id1545 . -542) (undo-tree-id1546 . -553) (undo-tree-id1547 . -553) (undo-tree-id1548 . -553) (undo-tree-id1549 . -553) (undo-tree-id1550 . -553) (undo-tree-id1551 . -553) (undo-tree-id1552 . -577) (undo-tree-id1553 . -577) (undo-tree-id1554 . -577) (undo-tree-id1555 . -577) (undo-tree-id1556 . -577) (undo-tree-id1557 . -577) (undo-tree-id1558 . -592) (undo-tree-id1559 . -592) (undo-tree-id1560 . -592) (undo-tree-id1561 . -592) (undo-tree-id1562 . -592) (undo-tree-id1563 . -592) (undo-tree-id1564 . -631) (undo-tree-id1565 . -631) (undo-tree-id1566 . -631) (undo-tree-id1567 . -631) (undo-tree-id1568 . -631) (undo-tree-id1569 . -631) (undo-tree-id1570 . -674) (undo-tree-id1571 . -674) (undo-tree-id1572 . -674) (undo-tree-id1573 . -674) (undo-tree-id1574 . -674) (undo-tree-id1575 . -674) (undo-tree-id1576 . -704) (undo-tree-id1577 . -704) (undo-tree-id1578 . -704) (undo-tree-id1579 . -704) (undo-tree-id1580 . -704) (undo-tree-id1581 . -704) (undo-tree-id1582 . -730) (undo-tree-id1583 . -730) (undo-tree-id1584 . -730) (undo-tree-id1585 . -730) (undo-tree-id1586 . -730) (undo-tree-id1587 . -730) (undo-tree-id1588 . -754) (undo-tree-id1589 . -754) (undo-tree-id1590 . -754) (undo-tree-id1591 . -754) (undo-tree-id1592 . -754) (undo-tree-id1593 . -754) (undo-tree-id1594 . -787) (undo-tree-id1595 . -787) (undo-tree-id1596 . -787) (undo-tree-id1597 . -787) (undo-tree-id1598 . -787) (undo-tree-id1599 . -787) (undo-tree-id1600 . -805) (undo-tree-id1601 . -805) (undo-tree-id1602 . -805) (undo-tree-id1603 . -805) (undo-tree-id1604 . -805) (undo-tree-id1605 . -805) (undo-tree-id1606 . -805) (undo-tree-id1607 . -805) (undo-tree-id1608 . -805) (undo-tree-id1609 . -805) (undo-tree-id1610 . -805) (undo-tree-id1611 . -805) (undo-tree-id1612 . -805) (undo-tree-id1613 . -805) (undo-tree-id1614 . -805) (undo-tree-id1615 . -805) (undo-tree-id1616 . -805) (undo-tree-id1617 . -805) (undo-tree-id1618 . -805) (undo-tree-id1619 . -805) (undo-tree-id1620 . -805) (undo-tree-id1621 . -787) (undo-tree-id1622 . -787) (undo-tree-id1623 . -787) (undo-tree-id1624 . -787) (undo-tree-id1625 . -787) (undo-tree-id1626 . -787) (undo-tree-id1627 . -787) (undo-tree-id1628 . -787) (undo-tree-id1629 . -787) (undo-tree-id1630 . -787) (undo-tree-id1631 . -787) (undo-tree-id1632 . -787) (undo-tree-id1633 . -787) (undo-tree-id1634 . -787) (undo-tree-id1635 . -787) (undo-tree-id1636 . -787) (undo-tree-id1637 . -787) (undo-tree-id1638 . -787) (undo-tree-id1639 . -805) 29477) nil (26474 32531 129730 625000) 0 nil])
([nil nil ((#("				" 0 4 (fontified t)) . 28359) (undo-tree-id1644 . -3) (t 26474 32531 165451 654000)) nil (26474 32561 433947 23000) 0 nil])
([nil nil ((28370 . 28374)) nil (26474 32561 433945 548000) 0 nil])
([nil nil ((#("				" 0 4 (fontified t)) . 28415) (undo-tree-id1642 . -3) (undo-tree-id1643 . -4)) nil (26474 32561 433935 734000) 0 nil])
([nil nil ((28427 . 28431)) nil (26474 32561 433909 525000) 0 nil])
([nil nil ((nil rear-nonsticky nil 36412 . 36413) (nil fontified nil 36401 . 36413) (36401 . 36413) (t 26474 32561 487578 569000)) nil (26477 3440 601720 216000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35441 . 35442) (nil fontified nil 35430 . 35442) (35430 . 35442)) nil (26477 3440 601718 900000) 0 nil])
([nil nil ((35430 . 35449) (37394 . 37411)) nil (26477 3440 601717 320000) 0 nil])
([nil nil ((30921 . 30940) (35429 . 35446) 30921) nil (26477 3440 601709 125000) 0 nil])
([nil current ((20640 . 20653) (t 26477 3440 634340 704000)) nil (26477 14144 204059 896000) 0 nil])
nil
