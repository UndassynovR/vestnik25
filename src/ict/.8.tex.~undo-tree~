(undo-tree-save-format-version . 1)
"92415dc9b65b2bdf3511d0040fa6e18f931ecac5"
[nil nil nil nil (26474 23268 429209 183000) 0 nil]
([nil nil ((nil rear-nonsticky nil 647 . 648) (nil fontified nil 635 . 648) (635 . 648) (t 26474 22916 24024 768000)) nil (26474 23268 429208 21000) 0 nil])
([nil nil ((53518 . 53519) 647) nil (26474 23268 429204 441000) 0 nil])
([nil nil ((709 . 710) (#("
" 0 1 (fontified t)) . -709) (undo-tree-id0 . -1) 647 (t 26474 23268 447821 916000)) nil (26474 23271 63048 811000) 0 nil])
([nil nil ((#("\\bfseries " 0 9 (face font-lock-keyword-face fontified t) 9 10 (face (bold) fontified t)) . 23) (undo-tree-id14 . -9) (t 26474 23271 88745 442000)) nil (26475 36873 670320 271000) 0 nil])
([nil nil (23) nil (26475 36873 670319 242000) 0 nil])
([nil nil ((31 . 43) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -31) (undo-tree-id12 . -1) (27 . 32) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -27) (undo-tree-id13 . -1) (22 . 28)) nil (26475 36873 670318 435000) 0 nil])
([nil nil ((nil rear-nonsticky nil 261 . 262) (nil fontified nil 42 . 262) (42 . 262) 41) nil (26475 36873 670314 469000) 0 nil])
([nil nil ((321 . 322) (#("
" 0 1 (fontified t)) . -321) (185 . 186) (#("
" 0 1 (fontified t)) . -185) (152 . 153) (#("
" 0 1 (fontified t)) . -152) (84 . 85) (#("
" 0 1 (fontified t)) . -84) 83) nil (26475 36873 670313 627000) 0 nil])
([nil nil ((#("\\textsuperscript{\\envelope }" 0 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 26 (face font-lock-keyword-face fontified t) 26 28 (fontified t)) . 55) (undo-tree-id10 . -27) (undo-tree-id11 . -28)) nil (26475 36873 670312 744000) 0 nil])
([nil nil ((#("\\textsuperscript{1,3}" 0 16 (face font-lock-keyword-face fontified t) 16 21 (fontified t)) . 57) (undo-tree-id9 . -20)) nil (26475 36873 670311 240000) 0 nil])
([nil nil ((#("\\textsuperscript{1}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 69) (undo-tree-id7 . -18) (undo-tree-id8 . -19)) nil (26475 36873 670310 110000) 0 nil])
([nil nil ((#("\\textsuperscript{1,2}" 0 16 (face font-lock-keyword-face fontified t) 16 21 (fontified t)) . 85) (undo-tree-id6 . -20)) nil (26475 36873 670308 639000) 0 nil])
([nil nil ((#("\\textsuperscript{1}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 97) (undo-tree-id4 . -18) (undo-tree-id5 . -19)) nil (26475 36873 670307 352000) 0 nil])
([nil nil ((#("\\textsuperscript{,{\\bfseries 3}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t) 19 28 (face font-lock-keyword-face fontified t) 28 30 (face (bold) fontified t) 30 31 (fontified t)) . 98) (undo-tree-id2 . -30) (undo-tree-id3 . -31)) nil (26475 36873 670305 407000) 0 nil])
([nil nil ((#("}}" 0 1 (fontified t) 1 2 (fontified t)) . 97) (undo-tree-id1 . -1)) nil (26475 36874 536184 712000) 0 nil])
([nil nil ((#("{\\bfseries " 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (face (bold) fontified t)) . 97)) ((97 . 108)) (26475 36883 815165 588000) 0 nil])
([nil nil ((nil rear-nonsticky nil 21 . 22) (#("
" 0 1 (fontified nil)) . -43) (21 . 44) (t 26475 36875 909687 12000)) nil (26475 36894 217709 474000) 0 nil] [nil nil ((nil rear-nonsticky nil 185 . 186) (#("
" 0 1 (fontified nil)) . -207) (185 . 208) 97 (t 26475 36875 909687 12000)) ((#("
\\begin{articleheader}
" 0 1 (rear-nonsticky nil fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil latex-env-pair t) 8 21 (face font-lock-function-name-face fontified nil latex-env-pair t) 21 22 (fontified nil latex-env-pair t) 22 23 (fontified nil)) . 185) (undo-tree-id15 . -1) (undo-tree-id16 . -22) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (207 . 208) (nil rear-nonsticky t 185 . 186)) (26475 36883 814886 931000) 0 nil] [nil nil ((#("}" 0 1 (fontified t)) . 413)) ((413 . 414)) (26475 36873 670281 882000) 0 nil])
([nil nil ((nil rear-nonsticky nil 462 . 463) (#("
" 0 1 (fontified nil)) . -503) (462 . 504) 385) nil (26475 36894 217708 850000) 0 nil])
nil
nil
([nil nil ((#("
" 0 1 (fontified t)) . 504) (undo-tree-id21 . -1)) nil (26475 36894 217707 661000) 0 nil])
([nil nil ((nil rear-nonsticky nil 929 . 930) (#("
" 0 1 (fontified nil)) . -947) (929 . 948) 926) nil (26475 36894 217695 679000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3079 . 3080) (#("
" 0 1 (fontified nil)) . -3101) (3079 . 3102) (t 26475 36894 239154 572000)) nil (26475 36904 537805 177000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3412 . 3413) (#("
" 0 1 (fontified nil)) . -3453) (3412 . 3454)) nil (26475 36904 537803 977000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 3412) (undo-tree-id22 . -1)) nil (26475 36904 537803 201000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3766 . 3767) (#("
" 0 1 (fontified nil)) . -3784) (3766 . 3785) 3733) nil (26475 36904 537791 798000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6587 . 6588) (#("
" 0 1 (fontified nil)) . -6609) (6587 . 6610) (t 26475 36904 579854 185000)) nil (26475 36930 318498 517000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6937 . 6938) (#("
" 0 1 (fontified nil)) . -6978) (6937 . 6979) 6871) nil (26475 36930 318497 815000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6979)) nil (26475 36930 318497 48000) 0 nil])
([nil nil ((7053 . 7054) 7041) nil (26475 36930 318496 478000) 0 nil])
([nil nil ((7129 . 7130) 7117) nil (26475 36930 318496 28000) 0 nil])
([nil nil ((7213 . 7214) 7201) nil (26475 36930 318495 621000) 0 nil])
([nil nil ((7040 . 7041) (#("
" 0 1 (fontified t)) . -7040) 6979) nil (26475 36930 318495 91000) 0 nil])
([nil nil ((7116 . 7117) (#("
" 0 1 (fontified t)) . -7116) (undo-tree-id43 . -1) 7115) nil (26475 36930 318494 568000) 0 nil])
([nil nil ((7200 . 7201) (#("
" 0 1 (fontified t)) . -7200) 7192) nil (26475 36930 318493 457000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-warning-face fontified t)) . 7212)) nil (26475 36930 318492 949000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . 7211)) nil (26475 36930 318492 580000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-warning-face fontified t)) . 7128)) nil (26475 36930 318492 217000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . 7127)) nil (26475 36930 318491 859000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-warning-face fontified t)) . 7052) (undo-tree-id41 . -1) (undo-tree-id42 . -1)) nil (26475 36930 318491 311000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . 7051) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1)) nil (26475 36930 318489 210000) 0 nil])
([nil nil ((7216 . 7217) (#("
" 0 1 (fontified t)) . -7216) (undo-tree-id23 . -1) 7215) nil (26475 36930 318476 486000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7295 . 7296) (#("
" 0 1 (fontified nil)) . -7313) (7295 . 7314) 7216) nil (26475 36930 318465 369000) 0 nil])
([nil nil ((10160 . 10181) (22389 . 22405) (t 26475 36930 378104 757000)) nil (26475 37024 291794 354000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39906 . 39907) (nil fontified nil 39253 . 39907) (39253 . 39907) (#("% \\begin{longtable}[]{@{}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1212}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1212}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1212}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1212}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1061}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1212}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1212}}
%   >{\\raggedright\\arraybackslash}p{(\\columnwidth - 14\\tabcolsep) * \\real{0.1666}}@{}}
% \\toprule\\noalign{}
% \\begin{minipage}[b]{\\linewidth}\\raggedright
% Metrics
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% Decision Tree
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% Random Forest
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% XGBoost
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% DNN
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% LSTM
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% GRU
% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
% Proposed LSTM-GRU model
% \\end{minipage} \\\\
% \\midrule\\noalign{}
% \\endhead
% \\bottomrule\\noalign{}
% \\endlastfoot
% Ассurасy & 0.988 & 0.992 & 0.989 & 0.959 & 0.972 & 0.971 & 0.986 \\\\
% Рrесisiоn & 0.985 & 0.991 & 0.987 & 0.962 & 0.972 & 0.966 & 0.981 \\\\
% Rесаll & 0.991 & 0.993 & 0.991 & 0.957 & 0.972 & 0.976 & 0.989 \\\\
% F1-sсоrе & 0.988 & 0.992 & 0.989 & 0.960 & 0.972 & 0.971 & 0.985 \\\\
% \\end{longtable}" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 8 (fontified t face font-lock-comment-face) 8 14 (fontified t face font-lock-comment-face latex-env-pair t) 14 19 (face font-lock-comment-face latex-env-pair t fontified t) 19 26 (face font-lock-comment-face fontified t) 26 30 (face font-lock-comment-delimiter-face fontified t) 30 109 (face font-lock-comment-face fontified t) 109 113 (face font-lock-comment-delimiter-face fontified t) 113 192 (face font-lock-comment-face fontified t) 192 196 (face font-lock-comment-delimiter-face fontified t) 196 275 (face font-lock-comment-face fontified t) 275 279 (face font-lock-comment-delimiter-face fontified t) 279 358 (face font-lock-comment-face fontified t) 358 362 (face font-lock-comment-delimiter-face fontified t) 362 441 (face font-lock-comment-face fontified t) 441 445 (face font-lock-comment-delimiter-face fontified t) 445 524 (face font-lock-comment-face fontified t) 524 528 (face font-lock-comment-delimiter-face fontified t) 528 607 (face font-lock-comment-face fontified t) 607 611 (face font-lock-comment-delimiter-face fontified t) 611 694 (face font-lock-comment-face fontified t) 694 696 (face font-lock-comment-delimiter-face fontified t) 696 715 (face font-lock-comment-face fontified t) 715 717 (face font-lock-comment-delimiter-face fontified t) 717 723 (face font-lock-comment-face fontified t) 723 733 (face font-lock-comment-face latex-env-pair t fontified t) 733 761 (face font-lock-comment-face fontified t) 761 763 (face font-lock-comment-delimiter-face fontified t) 763 771 (face font-lock-comment-face fontified t) 771 773 (face font-lock-comment-delimiter-face fontified t) 773 777 (face font-lock-comment-face fontified t) 777 787 (face font-lock-comment-face latex-env-pair t fontified t) 787 796 (face font-lock-comment-face fontified t) 796 806 (face font-lock-comment-face latex-env-pair t fontified t) 806 834 (face font-lock-comment-face fontified t) 834 836 (face font-lock-comment-delimiter-face fontified t) 836 850 (face font-lock-comment-face fontified t) 850 852 (face font-lock-comment-delimiter-face fontified t) 852 856 (face font-lock-comment-face fontified t) 856 866 (face font-lock-comment-face latex-env-pair t fontified t) 866 875 (face font-lock-comment-face fontified t) 875 885 (face font-lock-comment-face latex-env-pair t fontified t) 885 913 (face font-lock-comment-face fontified t) 913 915 (face font-lock-comment-delimiter-face fontified t) 915 929 (face font-lock-comment-face fontified t) 929 931 (face font-lock-comment-delimiter-face fontified t) 931 935 (face font-lock-comment-face fontified t) 935 945 (face font-lock-comment-face latex-env-pair t fontified t) 945 954 (face font-lock-comment-face fontified t) 954 964 (face font-lock-comment-face latex-env-pair t fontified t) 964 992 (face font-lock-comment-face fontified t) 992 994 (face font-lock-comment-delimiter-face fontified t) 994 1002 (face font-lock-comment-face fontified t) 1002 1004 (face font-lock-comment-delimiter-face fontified t) 1004 1008 (face font-lock-comment-face fontified t) 1008 1018 (face font-lock-comment-face latex-env-pair t fontified t) 1018 1027 (face font-lock-comment-face fontified t) 1027 1037 (face font-lock-comment-face latex-env-pair t fontified t) 1037 1065 (face font-lock-comment-face fontified t) 1065 1067 (face font-lock-comment-delimiter-face fontified t) 1067 1071 (face font-lock-comment-face fontified t) 1071 1073 (face font-lock-comment-delimiter-face fontified t) 1073 1077 (face font-lock-comment-face fontified t) 1077 1087 (face font-lock-comment-face latex-env-pair t fontified t) 1087 1096 (face font-lock-comment-face fontified t) 1096 1106 (face font-lock-comment-face latex-env-pair t fontified t) 1106 1134 (face font-lock-comment-face fontified t) 1134 1136 (face font-lock-comment-delimiter-face fontified t) 1136 1141 (face font-lock-comment-face fontified t) 1141 1143 (face font-lock-comment-delimiter-face fontified t) 1143 1147 (face font-lock-comment-face fontified t) 1147 1157 (face font-lock-comment-face latex-env-pair t fontified t) 1157 1166 (face font-lock-comment-face fontified t) 1166 1176 (face font-lock-comment-face latex-env-pair t fontified t) 1176 1204 (face font-lock-comment-face fontified t) 1204 1206 (face font-lock-comment-delimiter-face fontified t) 1206 1210 (face font-lock-comment-face fontified t) 1210 1212 (face font-lock-comment-delimiter-face fontified t) 1212 1216 (face font-lock-comment-face fontified t) 1216 1226 (face font-lock-comment-face latex-env-pair t fontified t) 1226 1235 (face font-lock-comment-face fontified t) 1235 1245 (face font-lock-comment-face latex-env-pair t fontified t) 1245 1273 (face font-lock-comment-face fontified t) 1273 1275 (face font-lock-comment-delimiter-face fontified t) 1275 1299 (face font-lock-comment-face fontified t) 1299 1301 (face font-lock-comment-delimiter-face fontified t) 1301 1305 (face font-lock-comment-face fontified t) 1305 1315 (face font-lock-comment-face latex-env-pair t fontified t) 1315 1319 (face font-lock-comment-face fontified t) 1319 1321 (face font-lock-comment-delimiter-face fontified t) 1321 1340 (face font-lock-comment-face fontified t) 1340 1342 (face font-lock-comment-delimiter-face fontified t) 1342 1351 (face font-lock-comment-face fontified t) 1351 1353 (face font-lock-comment-delimiter-face fontified t) 1353 1375 (face font-lock-comment-face fontified t) 1375 1377 (face font-lock-comment-delimiter-face fontified t) 1377 1390 (face font-lock-comment-face fontified t) 1390 1392 (face font-lock-comment-delimiter-face fontified t) 1392 1460 (face font-lock-comment-face fontified t) 1460 1462 (face font-lock-comment-delimiter-face fontified t) 1462 1514 (face font-lock-comment-face fontified t) 1514 1531 (fontified t face font-lock-comment-face) 1531 1533 (face font-lock-comment-delimiter-face fontified t) 1533 1599 (face font-lock-comment-face fontified t) 1599 1601 (face font-lock-comment-delimiter-face fontified t) 1601 1669 (face font-lock-comment-face fontified t) 1669 1671 (face font-lock-comment-delimiter-face fontified t) 1671 1675 (face font-lock-comment-face fontified t) 1675 1686 (face font-lock-comment-face latex-env-pair t fontified t)) . 39253) (undo-tree-id117 . -109) (undo-tree-id118 . -1685) (undo-tree-id119 . -9) (undo-tree-id120 . -1678) (undo-tree-id121 . -1678) 40940 (t 26475 37024 356374 553000)) nil (26475 37089 739774 247000) 0 nil])
([nil nil ((39267 . 39268)) nil (26475 37089 739770 627000) 0 nil])
([nil nil ((#("{\\bfseries Table 1. The values of Malware classification}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 56 (face (bold) fontified t) 56 57 (fontified t)) . -39194) (undo-tree-id65 . -14) (undo-tree-id66 . -14) (undo-tree-id67 . -14) (undo-tree-id68 . -14) (undo-tree-id69 . -14) (undo-tree-id70 . -14) (undo-tree-id71 . -14) (undo-tree-id72 . -14) (undo-tree-id73 . -14) (undo-tree-id74 . -14) (undo-tree-id75 . -14) (undo-tree-id76 . -14) (undo-tree-id77 . -14) (undo-tree-id78 . -14) (undo-tree-id79 . -14) (undo-tree-id80 . -14) (undo-tree-id81 . -14) (undo-tree-id82 . -14) (undo-tree-id83 . -14) (undo-tree-id84 . -14) (undo-tree-id85 . -14) (undo-tree-id86 . -14) (undo-tree-id87 . -14) (undo-tree-id88 . -14) (undo-tree-id89 . -14) (undo-tree-id90 . -14) (undo-tree-id91 . -14) (undo-tree-id92 . -14) (undo-tree-id93 . -14) (undo-tree-id94 . -14) (undo-tree-id95 . -14) (undo-tree-id96 . -14) (undo-tree-id97 . -14) (undo-tree-id98 . -14) (undo-tree-id99 . -14) (undo-tree-id100 . -14) (undo-tree-id101 . -14) (undo-tree-id102 . -14) (undo-tree-id103 . -14) (undo-tree-id104 . -14) (undo-tree-id105 . -14) (undo-tree-id106 . -14) (undo-tree-id107 . -14) (undo-tree-id108 . -14) (undo-tree-id109 . -14) (undo-tree-id110 . -14) (undo-tree-id111 . -14) (undo-tree-id112 . -14) (undo-tree-id113 . -14) (undo-tree-id114 . -14) (undo-tree-id115 . -14) (undo-tree-id116 . -14) 39208) nil (26475 37089 739769 324000) 0 nil])
([nil nil ((39218 . 39223) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -39218) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (39213 . 39219) (39212 . 39213) 39196) nil (26475 37089 739736 917000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39267 . 39268) (nil fontified nil 39223 . 39268) (39223 . 39268) 39222) nil (26475 37089 739731 833000) 0 nil])
([nil nil ((39268 . 39269)) nil (26475 37089 739730 992000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 39194) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1)) nil (26475 37089 739730 54000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 39194) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1)) nil (26475 37089 739719 640000) 0 nil])
([nil nil ((39404 . 39416) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -39404) (undo-tree-id122 . -1) (39399 . 39405) (t 26475 37089 802473 88000)) nil (26475 37348 718917 208000) 0 nil])
([nil nil ((39416 . 39417)) nil (26475 37348 718907 655000) 0 nil])
([nil nil ((39440 . 39441)) nil (26475 37348 718903 414000) 0 nil])
([nil nil ((#("{\\bfseries Figure 2-Decision Tree}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 16 (face (bold) fontified t) 16 33 (fontified t face (bold)) 33 34 (fontified t)) . -27017) (undo-tree-id183 . -29) (undo-tree-id184 . -29) 27046 (t 26475 37348 777947 523000)) nil (26475 43924 795970 732000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27021 . 27022) (nil fontified nil 27000 . 27022) (27000 . 27022)) nil (26475 43924 795968 750000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27037) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1)) nil (26475 43924 795967 863000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27037) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1)) nil (26475 43924 795959 228000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27037)) nil (26475 43924 795952 119000) 0 nil])
([nil nil ((#("{\\bfseries Figure 3 - Random Forest}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 35 (face (bold) fontified t) 35 36 (fontified t)) . -27154) (undo-tree-id156 . -15) (undo-tree-id157 . -15) 27169) nil (26475 43924 795951 582000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27160 . 27161) (nil fontified nil 27137 . 27161) (27137 . 27161)) nil (26475 43924 795950 45000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27177) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1)) nil (26475 43924 795949 74000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27177) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1)) nil (26475 43924 795939 283000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27177)) nil (26475 43924 795915 913000) 0 nil])
([nil nil ((#("{\\bfseries Figure 4 - Dense neural network}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 42 (face (bold) fontified t) 42 43 (fontified t)) . -29061) (undo-tree-id471 . -17) (undo-tree-id472 . -17) 29078 (t 26475 43924 842116 22000)) nil (26475 43973 103716 431000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29074 . 29075) (nil fontified nil 29044 . 29075) (29044 . 29075)) nil (26475 43973 103715 84000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 29090) (undo-tree-id470 . -1)) nil (26475 43973 103714 478000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 29090) (undo-tree-id468 . -1) (undo-tree-id469 . -1)) nil (26475 43973 103713 380000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 29090)) nil (26475 43973 103711 962000) 0 nil])
([nil nil ((#("{\\bfseries Figure 5 - Long short-term memory neural network}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 59 (face (bold) fontified t) 59 60 (fontified t)) . -32289) (undo-tree-id466 . -16) (undo-tree-id467 . -16) 32305) nil (26475 43973 103711 323000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32319 . 32320) (nil fontified nil 32272 . 32320) (32272 . 32320)) nil (26475 43973 103709 923000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32335) (undo-tree-id465 . -1)) nil (26475 43973 103709 418000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32335) (undo-tree-id463 . -1) (undo-tree-id464 . -1)) nil (26475 43973 103708 538000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32335)) nil (26475 43973 103707 163000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32843)) nil (26475 43973 103706 831000) 0 nil])
([nil nil ((#("{\\bfseries Figure 6 - Gated recurrent unit neural network}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 57 (face (bold) fontified t) 57 58 (fontified t)) . -35323) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -7) (undo-tree-id378 . -7) (undo-tree-id379 . -7) (undo-tree-id380 . -7) (undo-tree-id381 . -7) (undo-tree-id382 . -8) (undo-tree-id383 . -8) (undo-tree-id384 . -8) (undo-tree-id385 . -8) (undo-tree-id386 . -8) (undo-tree-id387 . -9) (undo-tree-id388 . -9) (undo-tree-id389 . -9) (undo-tree-id390 . -9) (undo-tree-id391 . -9) (undo-tree-id392 . -10) (undo-tree-id393 . -10) (undo-tree-id394 . -10) (undo-tree-id395 . -10) (undo-tree-id396 . -10) (undo-tree-id397 . -11) (undo-tree-id398 . -11) (undo-tree-id399 . -11) (undo-tree-id400 . -11) (undo-tree-id401 . -11) (undo-tree-id402 . -12) (undo-tree-id403 . -12) (undo-tree-id404 . -12) (undo-tree-id405 . -12) (undo-tree-id406 . -12) (undo-tree-id407 . -13) (undo-tree-id408 . -13) (undo-tree-id409 . -13) (undo-tree-id410 . -13) (undo-tree-id411 . -13) (undo-tree-id412 . -14) (undo-tree-id413 . -14) (undo-tree-id414 . -14) (undo-tree-id415 . -14) (undo-tree-id416 . -14) (undo-tree-id417 . -15) (undo-tree-id418 . -15) (undo-tree-id419 . -15) (undo-tree-id420 . -15) (undo-tree-id421 . -15) (undo-tree-id422 . -16) (undo-tree-id423 . -16) (undo-tree-id424 . -16) (undo-tree-id425 . -16) (undo-tree-id426 . -16) (undo-tree-id427 . -16) (undo-tree-id428 . -16) (undo-tree-id429 . -16) (undo-tree-id430 . -16) (undo-tree-id431 . -16) (undo-tree-id432 . -16) (undo-tree-id433 . -16) (undo-tree-id434 . -16) (undo-tree-id435 . -16) (undo-tree-id436 . -16) (undo-tree-id437 . -16) (undo-tree-id438 . -16) (undo-tree-id439 . -16) (undo-tree-id440 . -16) (undo-tree-id441 . -16) (undo-tree-id442 . -16) (undo-tree-id443 . -16) (undo-tree-id444 . -16) (undo-tree-id445 . -16) (undo-tree-id446 . -16) (undo-tree-id447 . -16) (undo-tree-id448 . -16) (undo-tree-id449 . -16) (undo-tree-id450 . -16) (undo-tree-id451 . -16) (undo-tree-id452 . -16) (undo-tree-id453 . -16) (undo-tree-id454 . -16) (undo-tree-id455 . -16) (undo-tree-id456 . -16) (undo-tree-id457 . -16) (undo-tree-id458 . -16) (undo-tree-id459 . -16) (undo-tree-id460 . -16) (undo-tree-id461 . -16) (undo-tree-id462 . -16) 35339) nil (26475 43973 103705 164000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35351 . 35352) (nil fontified nil 35306 . 35352) (35306 . 35352)) nil (26475 43973 103660 73000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 35367) (undo-tree-id371 . -1)) nil (26475 43973 103659 427000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 35367) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1)) nil (26475 43973 103657 331000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 35367)) nil (26475 43973 103599 530000) 0 nil])
([nil nil ((#("{\\bfseries Figure 7 - LSTM-GRU neural network}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 45 (face (bold) fontified t) 45 46 (fontified t)) . -36874) (undo-tree-id235 . -45) (undo-tree-id236 . -45) (undo-tree-id237 . -45) (undo-tree-id238 . -45) (undo-tree-id239 . -45) (undo-tree-id240 . -45) (undo-tree-id241 . -45) (undo-tree-id242 . -45) (undo-tree-id243 . -45) (undo-tree-id244 . -45) (undo-tree-id245 . -44) (undo-tree-id246 . -44) (undo-tree-id247 . -44) (undo-tree-id248 . -44) (undo-tree-id249 . -44) (undo-tree-id250 . -44) (undo-tree-id251 . -44) (undo-tree-id252 . -44) (undo-tree-id253 . -44) (undo-tree-id254 . -44) (undo-tree-id255 . -44) (undo-tree-id256 . -44) (undo-tree-id257 . -44) (undo-tree-id258 . -44) (undo-tree-id259 . -44) (undo-tree-id260 . -44) (undo-tree-id261 . -44) (undo-tree-id262 . -44) (undo-tree-id263 . -44) (undo-tree-id264 . -44) (undo-tree-id265 . -44) (undo-tree-id266 . -44) (undo-tree-id267 . -44) (undo-tree-id268 . -44) (undo-tree-id269 . -44) (undo-tree-id270 . -44) (undo-tree-id271 . -44) (undo-tree-id272 . -44) (undo-tree-id273 . -44) (undo-tree-id274 . -44) (undo-tree-id275 . -44) (undo-tree-id276 . -44) (undo-tree-id277 . -44) (undo-tree-id278 . -44) (undo-tree-id279 . -44) (undo-tree-id280 . -44) 36918) nil (26475 43973 103598 361000) 0 nil])
([nil nil ((nil rear-nonsticky nil 36890 . 36891) (nil fontified nil 36857 . 36891) (36857 . 36891)) nil (26475 43973 103545 327000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 36906) (undo-tree-id234 . -1)) nil (26475 43973 103544 805000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 36906) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1)) nil (26475 43973 103543 88000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 36906)) nil (26475 43973 103519 311000) 0 nil])
([nil nil ((#("{\\bfseries Figure 7-Histograms and an AUC-ROC curve}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 51 (face (bold) fontified t) 51 52 (fontified t)) . -39952) (undo-tree-id187 . -16) (undo-tree-id188 . -16) 39968) nil (26475 43973 103518 789000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39974 . 39975) (nil fontified nil 39935 . 39975) (39935 . 39975)) nil (26475 43973 103517 129000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 39991) (undo-tree-id185 . -1) (undo-tree-id186 . -1)) nil (26475 43973 103516 239000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 39991)) nil (26475 43973 103506 726000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 39991)) nil (26475 43973 103506 75000) 0 nil])
([nil nil ((39991 . 40012) (42952 . 42968)) nil (26475 43973 103505 384000) 0 nil])
([nil nil ((42990 . 43005) (43013 . 43026)) nil (26475 43973 103501 543000) 0 nil])
([nil nil ((#("{\\bfseries Figure 1-Class balancing with Random oversampling}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 60 (face (bold) fontified t) 60 61 (fontified t)) . -24861) (undo-tree-id503 . -24) (undo-tree-id504 . -24) 24885 (t 26475 43973 146718 761000)) nil (26475 44086 114861 523000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24892 . 24893) (nil fontified nil 24844 . 24893) (24844 . 24893)) nil (26475 44086 114859 618000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24908) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1)) nil (26475 44086 114858 820000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24908) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1)) nil (26475 44086 114849 145000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24908) (undo-tree-id473 . -1)) nil (26475 44086 114836 857000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -24801) (t 26475 44086 148449 988000) (24802 . 24803) 24801 (t 26475 44086 148449 988000)) nil (26475 44099 766739 703000) 0 nil])
([nil nil ((nil fontified t 24801 . 24802) (#("7" 0 1 (fontified t)) . -24801) (24802 . 24803) 24801) nil (26475 44099 766735 3000) 0 nil])
([nil nil ((26942 . 26943) (#("8" 0 1 (fontified t)) . 26942) (undo-tree-id505 . -1) (t 26475 44099 789055 401000)) nil (26475 44143 248072 324000) 0 nil])
([nil nil ((27079 . 27080) (#("8" 0 1 (fontified t)) . 27079) (t 26475 44143 277797 372000)) nil (26475 44148 825738 459000) 0 nil])
([nil nil ((nil fontified t 24801 . 24802) (t 26475 44148 860635 872000) (#("6" 0 1 (fontified t)) . -24801) (t 26475 44148 860635 872000) (24802 . 24803) 24801 (t 26475 44148 860635 872000)) nil (26475 44203 25676 116000) 0 nil])
([nil nil ((50288 . 50307) (52802 . 52819) 50288 (t 26475 44203 58066 248000)) nil (26477 3546 593214 784000) 0 nil])
([nil nil ((nil rear-nonsticky nil 50318 . 50319) (nil fontified nil 50307 . 50319) (50307 . 50319)) nil (26477 3546 593288 655000) 0 nil])
([nil nil ((nil rear-nonsticky nil 51655 . 51656) (nil fontified nil 51644 . 51656) (51644 . 51656)) nil (26477 3547 858607 381000) 0 nil] [nil nil ((nil rear-nonsticky nil 51655 . 51656) (nil fontified nil 51644 . 51656) (51644 . 51656)) ((#("\\hspace{1em}" 0 7 (face font-lock-keyword-face fontified nil) 7 11 (fontified nil) 11 12 (fontified nil rear-nonsticky nil)) . 51644) (undo-tree-id0 . -11) (undo-tree-id1 . -11) (undo-tree-id2 . -11) (undo-tree-id3 . -11) (nil rear-nonsticky t 51655 . 51656)) (26477 3546 593209 695000) 0 nil])
([nil nil ((43027 . 43046) (50287 . 50304) 43027 (t 26477 3547 911287 495000)) nil (26477 3570 435451 835000) 0 nil])
nil
([nil nil ((22468 . 22472) (#("i" 0 1 (fontified nil)) . -22468) (undo-tree-id0 . -1) (22465 . 22469) (#("-" 0 1 (fontified t)) . -22465) (undo-tree-id1 . -1) 22466 (22458 . 22466) (#("m" 0 1 (face (subscript) display (raise -0.2) fontified t)) . -22458) (undo-tree-id2 . -1) 22459 (22451 . 22459) (#("i" 0 1 (fontified nil)) . -22451) (undo-tree-id3 . -1) (22446 . 22452) (22427 . 22446) (#("y" 0 1 (fontified t)) . -22427) (undo-tree-id4 . -1) 22428 (22427 . 22428) (22426 . 22427) (t 26477 28463 308887 433000) 22426) nil (26477 30370 453168 727000) 0 nil])
([nil nil ((22427 . 22444) (22473 . 22488)) nil (26477 30370 453148 750000) 0 nil])
([nil nil ((22489 . 22490) (t 26477 30370 458400 919000)) nil (26477 30389 823814 907000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image28}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 18 (fontified t) 18 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 114 (fontified t)) . 22506) (undo-tree-id5 . -113) (undo-tree-id6 . -16) (undo-tree-id7 . -113) (undo-tree-id8 . -16) (undo-tree-id9 . -16) (undo-tree-id10 . -16) (undo-tree-id11 . -16) (undo-tree-id12 . -16) (undo-tree-id13 . -16) (undo-tree-id14 . -16) (undo-tree-id15 . -16) (undo-tree-id16 . -16) (undo-tree-id17 . -16) (undo-tree-id18 . -16) (undo-tree-id19 . -16) (undo-tree-id20 . -16) (undo-tree-id21 . -16) (undo-tree-id22 . -16) (undo-tree-id23 . -16) (undo-tree-id24 . -16) (undo-tree-id25 . -16) (undo-tree-id26 . -16) (undo-tree-id27 . -16) (undo-tree-id28 . -16) (undo-tree-id29 . -16) (undo-tree-id30 . -16) (undo-tree-id31 . -16) (undo-tree-id32 . -16) (undo-tree-id33 . -16) (undo-tree-id34 . -16) (undo-tree-id35 . -16) (undo-tree-id36 . -16) (undo-tree-id37 . -16) (undo-tree-id38 . -16) (undo-tree-id39 . -16) (undo-tree-id40 . -16) (undo-tree-id41 . -16) (undo-tree-id42 . -16) (undo-tree-id43 . -16) (undo-tree-id44 . -16) (undo-tree-id45 . -29) (undo-tree-id46 . -29) (undo-tree-id47 . -29) (undo-tree-id48 . -29) (undo-tree-id49 . -29) (undo-tree-id50 . -29) (undo-tree-id51 . -29) (undo-tree-id52 . -29) (undo-tree-id53 . -29) (undo-tree-id54 . -29) (undo-tree-id55 . -29) (undo-tree-id56 . -29) (undo-tree-id57 . -29) (undo-tree-id58 . -29) (undo-tree-id59 . -29) (undo-tree-id60 . -29) (undo-tree-id61 . -29) (undo-tree-id62 . -43) (undo-tree-id63 . -43) (undo-tree-id64 . -43) (undo-tree-id65 . -43) (undo-tree-id66 . -43) (undo-tree-id67 . -43) (undo-tree-id68 . -100) (undo-tree-id69 . -100) (undo-tree-id70 . -100) (undo-tree-id71 . -100) (undo-tree-id72 . -100) (undo-tree-id73 . -100) (undo-tree-id74 . -101) (undo-tree-id75 . -113) (undo-tree-id76 . -113) (undo-tree-id77 . -113) (undo-tree-id78 . -113) (undo-tree-id79 . -113) (undo-tree-id80 . -113) (undo-tree-id81 . -113) (undo-tree-id82 . -113) (undo-tree-id83 . -113) (undo-tree-id84 . -113) (undo-tree-id85 . -113) (undo-tree-id86 . -113) (undo-tree-id87 . -113) (undo-tree-id88 . -113) (undo-tree-id89 . -113) (undo-tree-id90 . -113) (undo-tree-id91 . -113) (undo-tree-id92 . -113) (undo-tree-id93 . -113) (undo-tree-id94 . -113) (undo-tree-id95 . -113) (undo-tree-id96 . -113) (undo-tree-id97 . -113) (undo-tree-id98 . -113) (undo-tree-id99 . -16) (undo-tree-id100 . -113) (undo-tree-id101 . -113) (undo-tree-id102 . -113) (undo-tree-id103 . -113) (undo-tree-id104 . -114) (undo-tree-id105 . -113) 22619) nil (26477 30389 823810 879000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image29}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image30}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 115 (fontified t) 115 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t latex-env-pair t) 122 128 (face font-lock-function-name-face fontified t latex-env-pair t) 128 129 (fontified t latex-env-pair t) 129 134 (fontified t) 134 144 (face font-lock-keyword-face fontified t) 144 146 (fontified t) 146 162 (face font-lock-keyword-face fontified t) 162 172 (fontified t) 172 182 (face font-lock-keyword-face fontified t) 182 184 (fontified t) 184 201 (face font-lock-builtin-face fontified t) 201 204 (fontified t) 204 213 (face font-lock-keyword-face fontified t) 213 216 (fontified t) 216 220 (face font-lock-keyword-face fontified t) 220 221 (fontified t latex-env-pair t) 221 227 (face font-lock-function-name-face fontified t latex-env-pair t) 227 228 (fontified t latex-env-pair t) 228 229 (fontified t)) . 22508) (undo-tree-id124 . -216) (undo-tree-id125 . -216) (undo-tree-id126 . -228) (undo-tree-id127 . -216) 22724 (t 26477 30389 831195 83000)) nil (26477 30454 345377 456000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image31}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image32}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 115 (fontified t) 115 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t latex-env-pair t) 122 128 (face font-lock-function-name-face fontified t latex-env-pair t) 128 129 (fontified t latex-env-pair t) 129 134 (fontified t) 134 144 (face font-lock-keyword-face fontified t) 144 146 (fontified t) 146 162 (face font-lock-keyword-face fontified t) 162 172 (fontified t) 172 182 (face font-lock-keyword-face fontified t) 182 184 (fontified t) 184 201 (face font-lock-builtin-face fontified t) 201 204 (fontified t) 204 213 (face font-lock-keyword-face fontified t) 213 216 (fontified t) 216 220 (face font-lock-keyword-face fontified t) 220 221 (fontified t latex-env-pair t) 221 227 (face font-lock-function-name-face fontified t latex-env-pair t) 227 228 (fontified t latex-env-pair t) 228 229 (fontified t)) . 22529) (undo-tree-id120 . -216) (undo-tree-id121 . -216) (undo-tree-id122 . -228) (undo-tree-id123 . -216) 22745) nil (26477 30454 345375 914000) 0 nil])
([nil nil ((22528 . 22529) (#("
" 0 1 (fontified t)) . -22528) (undo-tree-id111 . 1) (#("
" 0 1 (fontified t)) . -22528) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 22509) nil (26477 30454 345373 730000) 0 nil])
([nil nil ((22547 . 22549) (22545 . 22547) (22544 . 22545) (#("i" 0 1 (fontified nil)) . -22544) (undo-tree-id106 . -1) (22529 . 22545) (#("i" 0 1 (fontified nil)) . -22529) (undo-tree-id107 . -1) (22527 . 22530) (#("i" 0 1 (fontified nil)) . -22527) (undo-tree-id108 . -1) (22525 . 22528) (#("i" 0 1 (fontified nil)) . -22525) (undo-tree-id109 . -1) (22524 . 22526) (22519 . 22524) (#("i" 0 1 (fontified nil)) . -22519) (undo-tree-id110 . -1) (22515 . 22520) (22509 . 22515)) nil (26477 30454 345368 59000) 0 nil])
([nil nil ((22538 . 22539)) nil (26477 30454 345355 165000) 0 nil])
([nil nil ((#("$" 0 1 (face tex-math fontified t)) . -22597) (undo-tree-id128 . -1) 22598 (22591 . 22598) (22587 . 22591) (#("i" 0 1 (fontified nil)) . -22587) (undo-tree-id129 . -1) (22579 . 22588) (#("i" 0 1 (fontified nil)) . -22579) (undo-tree-id130 . -1) (22570 . 22580) (t 26477 30454 349509 294000)) nil (26477 30491 287504 896000) 0 nil])
([nil nil ((22578 . 22579)) nil (26477 30491 287494 487000) 0 nil])
([nil nil ((22602 . 22613) (22598 . 22602)) nil (26477 30491 287490 439000) 0 nil])
([nil nil ((22613 . 22617) (#("i" 0 1 (fontified nil)) . -22613) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (22612 . 22614) (#("i" 0 1 (fontified t)) . -22612) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 22613 (22612 . 22613) (t 26477 30491 295116 446000) (#("i" 0 1 (face tex-math fontified nil)) . -22612) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (22612 . 22613) (t 26477 30491 295116 446000)) nil (26477 30497 193963 128000) 0 nil])
([nil nil ((23120 . 23124) (23108 . 23120) (23099 . 23108) (23095 . 23099) (#("@" 0 1 (fontified t)) . -23095) (undo-tree-id181 . -1) 23096 (23094 . 23096) (#("{" 0 1 (fontified t)) . -23094) (undo-tree-id182 . -1) 23095 (23094 . 23095) (23094 . 23095) (#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image33}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 114 (fontified t)) . 23094) (undo-tree-id183 . -113) (undo-tree-id184 . -16) (undo-tree-id185 . -113) (undo-tree-id186 . -113) (undo-tree-id187 . -113) 23207 (t 26477 30497 202053 626000)) nil (26477 30559 967229 207000) 0 nil])
([nil nil ((23094 . 23111) (23125 . 23140)) nil (26477 30612 52795 662000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image34}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 114 (fontified t)) . 23159) (undo-tree-id342 . -113) (undo-tree-id343 . -16) (undo-tree-id344 . -113) (undo-tree-id345 . -113) (undo-tree-id346 . -113) (undo-tree-id347 . -113) 23272 (t 26477 30612 611825 638000)) nil (26477 30640 319629 983000) 0 nil] [nil nil ((23139 . 23140) (#("j" 0 1 (face (subscript) fontified t display (raise -0.2))) . 23139) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (t 26477 30559 971385 859000)) ((23139 . 23140) (#("i" 0 1 (face (subscript) display (raise -0.2) fontified t)) . 23139) (t 26477 30600 287956 817000)) (26477 30600 283503 608000) 0 nil])
([nil nil ((23171 . 23174) (#("i" 0 1 (fontified nil)) . -23171) (undo-tree-id341 . -1) (23166 . 23172) (23159 . 23166)) nil (26477 30640 319626 576000) 0 nil])
nil
([nil nil ((23173 . 23174) (#(" " 0 1 (fontified nil)) . 23173) (#("
" 0 1 (fontified t)) . -23174) (undo-tree-id339 . 1) (undo-tree-id340 . 1) 23173) nil (26477 30640 319625 54000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image35}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image36}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 114 (fontified t) 114 115 (fontified t) 115 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t latex-env-pair t) 122 128 (face font-lock-function-name-face fontified t latex-env-pair t) 128 129 (fontified t latex-env-pair t) 129 134 (fontified t) 134 144 (face font-lock-keyword-face fontified t) 144 146 (fontified t) 146 148 (face font-lock-keyword-face fontified t) 148 158 (face font-lock-keyword-face fontified t) 158 162 (face font-lock-keyword-face fontified t) 162 172 (fontified t) 172 173 (face font-lock-keyword-face fontified t) 173 182 (face font-lock-keyword-face fontified t) 182 184 (fontified t) 184 201 (face font-lock-builtin-face fontified t) 201 203 (fontified t) 203 204 (fontified t) 204 213 (face font-lock-keyword-face fontified t) 213 216 (fontified t) 216 220 (face font-lock-keyword-face fontified t) 220 221 (fontified t latex-env-pair t) 221 227 (face font-lock-function-name-face fontified t latex-env-pair t) 227 228 (fontified t latex-env-pair t) 228 229 (fontified t)) . 23198) (undo-tree-id334 . -228) (undo-tree-id335 . -13) (undo-tree-id336 . -228) (undo-tree-id337 . -228) (undo-tree-id338 . -228) 23426) nil (26477 30640 319622 499000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image37}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 39 (face font-lock-keyword-face fontified t) 39 40 (face font-lock-keyword-face fontified t) 40 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 88 (fontified t) 88 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 114 (fontified t)) . 23217) (undo-tree-id330 . -101) (undo-tree-id331 . -101) (undo-tree-id332 . -113) (undo-tree-id333 . -101) 23318) nil (26477 30640 319617 509000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23243 . 23244) (nil fontified nil 23197 . 23244) (23197 . 23244) 23196 (t 26477 30640 324530 585000)) nil (26477 30673 688169 355000) 0 nil])
([nil nil ((23197 . 23198)) nil (26477 30673 688168 503000) 0 nil])
([nil nil ((#("computed as (3):
" 0 17 (fontified t)) . 23247) (undo-tree-id377 . -16) (undo-tree-id378 . -16) (undo-tree-id379 . -16) (undo-tree-id380 . -16) (undo-tree-id381 . -16) (undo-tree-id382 . -16) (undo-tree-id383 . -15) 23262) nil (26477 30673 688168 12000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23246) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1)) nil (26477 30673 688164 636000) 0 nil])
([nil nil ((#("i" 0 1 (fontified nil)) . -23204) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (23202 . 23205) (#("}" 0 1 (fontified t)) . -23202) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) 23203 (23198 . 23203)) nil (26477 30673 688159 5000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23236 . 23237) (nil fontified nil 23231 . 23237) (23231 . 23237) 23230 (t 26477 30673 696175 211000)) nil (26477 30681 504275 856000) 0 nil])
([nil nil ((#(" " 0 1 (rear-nonsticky t fontified t)) . 23236) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1)) nil (26477 30681 504272 89000) 0 nil])
([nil nil ((23261 . 23277) (23258 . 23261) (t 26477 30681 509092 1000)) nil (26477 30718 775744 617000) 0 nil])
([nil nil ((23271 . 23272)) nil (26477 30718 775744 276000) 0 nil])
([nil nil ((23278 . 23298)) nil (26477 30718 775744 116000) 0 nil])
([nil nil ((23298 . 23307)) nil (26477 30718 775743 905000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-keyword-face fontified t)) . -23306) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) 23307) nil (26477 30718 775743 94000) 0 nil])
([nil nil ((23306 . 23313)) nil (26477 30718 775724 619000) 0 nil])
([nil nil ((23258 . 23275) (23314 . 23329) (t 26477 30718 783694 932000)) nil (26477 30720 527939 90000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23369 . 23370) (nil fontified nil 23258 . 23370) (23258 . 23370) (#("\\begin{equation}
U_j=\\frac{row\\_total\\cross column\\_total}{grand\\_total}
\\end{equation}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 15 (face font-lock-function-name-face latex-env-pair t fontified t) 15 16 (latex-env-pair t fontified t) 16 17 (fontified t) 17 19 (fontified t) 19 20 (face (subscript) fontified t display (raise -0.2)) 20 21 (fontified t) 21 26 (face font-lock-keyword-face fontified t) 26 30 (fontified t) 30 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t display nil) 33 37 (fontified t) 37 43 (face font-lock-keyword-face fontified t) 43 50 (fontified t) 50 52 (face font-lock-keyword-face fontified t) 52 64 (fontified t) 64 66 (face font-lock-keyword-face fontified t) 66 72 (fontified t) 72 73 (fontified t) 73 77 (face font-lock-keyword-face fontified t) 77 78 (fontified t latex-env-pair t) 78 86 (face font-lock-function-name-face fontified t latex-env-pair t) 86 87 (fontified t latex-env-pair t) 87 88 (fontified t)) . 23258) (undo-tree-id423 . -88) (undo-tree-id424 . 16) (undo-tree-id425 . -15) (undo-tree-id426 . -87) (undo-tree-id427 . -87) (undo-tree-id428 . -15) (undo-tree-id429 . -87) (undo-tree-id430 . -73) (undo-tree-id431 . -87) (undo-tree-id432 . -87) (undo-tree-id433 . -87) (undo-tree-id434 . -87) (undo-tree-id435 . -87) (undo-tree-id436 . -87) (undo-tree-id437 . -87) (undo-tree-id438 . -87) (undo-tree-id439 . -71) (undo-tree-id440 . -87) (undo-tree-id441 . -87) (undo-tree-id442 . -87) (undo-tree-id443 . -88) (undo-tree-id444 . -88) 23346 (t 26477 30720 532676 297000)) nil (26477 30783 770375 899000) 0 nil])
([nil nil ((#("times" 0 5 (face font-lock-keyword-face fontified t)) . 23306) (undo-tree-id445 . -4) (undo-tree-id446 . -5) (undo-tree-id447 . -5) (t 26477 30783 777002 316000)) nil (26477 30803 26473 469000) 0 nil])
([nil nil ((23306 . 23311)) nil (26477 30803 26461 96000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-keyword-face fontified t)) . -23306) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -23307) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("o" 0 1 (face font-lock-keyword-face fontified t)) . -23308) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -23309) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -23310) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) 23311 (t 26477 30803 31797 72000)) nil (26477 30838 574250 118000) 0 nil])
([nil nil ((23306 . 23312)) nil (26477 30838 573891 378000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-keyword-face fontified t)) . -23307) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (#("g" 0 1 (face font-lock-keyword-face fontified t)) . -23308) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (#("g" 0 1 (face font-lock-keyword-face fontified t)) . -23309) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -23310) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -23311) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) 23312 (t 26477 30838 581418 34000)) nil (26477 30957 685550 95000) 0 nil])
([nil nil ((23307 . 23308)) nil (26477 30957 685365 149000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-keyword-face fontified t)) . -23306) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -23307) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) 23308) nil (26477 30957 685362 193000) 0 nil])
([nil nil ((23307 . 23311) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -23307) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (23306 . 23308)) nil (26477 30957 685204 890000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22507) (t 26477 30957 694147 257000)) nil (26477 30987 866377 901000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22507)) nil (26477 30987 866447 320000) 0 nil])
([nil nil ((#("\\end{multicols}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (latex-env-pair t fontified t) 5 14 (face font-lock-function-name-face latex-env-pair t fontified t) 14 15 (latex-env-pair t fontified t) 15 16 (fontified t)) . 22410) (undo-tree-id2325 . -15)) nil (26477 30994 351706 640000) 0 nil] [nil nil ((22507 . 22528) (23091 . 23107)) ((#("\\end{multicols}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 23091) (undo-tree-id2324 . 16) (#("\\begin{multicols}{2}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 16 (face font-lock-function-name-face latex-env-pair t fontified t) 16 17 (latex-env-pair t fontified t) 17 21 (fontified t)) . 22507)) (26477 30987 866372 481000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23978 . 23979) (#("
" 0 1 (fontified nil)) . -23994) (23978 . 23995) 23926) nil (26477 30994 351695 329000) 0 nil])
nil
([nil nil ((24160 . 24181) (26136 . 26152) (t 26477 30994 356755 906000)) nil (26477 31083 860503 257000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image41}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image42}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 115 (fontified t) 115 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t latex-env-pair t) 122 128 (face font-lock-function-name-face fontified t latex-env-pair t) 128 129 (fontified t latex-env-pair t) 129 134 (fontified t) 134 144 (face font-lock-keyword-face fontified t) 144 146 (fontified t) 146 162 (face font-lock-keyword-face fontified t) 162 172 (fontified t) 172 182 (face font-lock-keyword-face fontified t) 182 184 (fontified t) 184 201 (face font-lock-builtin-face fontified t) 201 204 (fontified t) 204 213 (face font-lock-keyword-face fontified t) 213 216 (fontified t) 216 219 (face font-lock-keyword-face fontified t) 219 220 (fontified t face font-lock-keyword-face) 220 221 (fontified t latex-env-pair t) 221 227 (fontified t face font-lock-function-name-face latex-env-pair t) 227 228 (fontified t latex-env-pair t) 228 229 (fontified t)) . 27438) (undo-tree-id2433 . -216) (undo-tree-id2434 . -216) (undo-tree-id2435 . -228) (undo-tree-id2436 . -216) 27654) nil (26477 31187 966716 274000) 0 nil] [nil nil ((#("
XGBoost {[}14{]} is a very strong machine-learning algorithm widely used
in the classification task. It lies in a series of boosting algorithms
that combine the predictions of multiple learners. XGBoost is known for
its efficiency and high performance. Employing an ensemble approach
corrects the errors made in previous iterations through the next model.
During each step, the deviations of the ensemble's predictions are
assessed on the training data, and the model is optimized by introducing
new tree forecasts to reduce the overall deviation. This process
continues until the desired error threshold is met or an early stopping
condition is triggered.

A Dense neural network (DNN) {[}15{]} is a fundamental type of neural
network in which each neuron in one layer is connected to every neuron
in the subsequent layer. It is the simplest architecture in neural
networks, typically used as the basic one in deep learning. In this
architecture, the input layer receives the input data
" 0 590 (fontified t) 590 634 (fontified t) 634 797 (fontified t) 797 800 (fontified t) 800 854 (fontified t) 854 867 (fontified t) 867 989 (fontified t)) . 26449) (undo-tree-id2326 . -935) (undo-tree-id2327 . -935) (undo-tree-id2328 . -988) (undo-tree-id2329 . -935) 27384 (t 26477 31011 271575 304000)) ((26449 . 27438)) (26477 31083 483390 155000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image43}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t latex-env-pair t) 106 112 (face font-lock-function-name-face fontified t latex-env-pair t) 112 113 (fontified t latex-env-pair t) 113 114 (fontified t)) . 27458) (undo-tree-id2429 . -101) (undo-tree-id2430 . -101) (undo-tree-id2431 . -113) (undo-tree-id2432 . -101) 27559) nil (26477 31187 966714 711000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26156 . 26157) (#("
" 0 1 (fontified nil)) . -27145) (26156 . 27146) 26104) ((#("

XGBoost {[}14{]} is a very strong machine-learning algorithm widely used
in the classification task. It lies in a series of boosting algorithms
that combine the predictions of multiple learners. XGBoost is known for
its efficiency and high performance. Employing an ensemble approach
corrects the errors made in previous iterations through the next model.
During each step, the deviations of the ensemble's predictions are
assessed on the training data, and the model is optimized by introducing
new tree forecasts to reduce the overall deviation. This process
continues until the desired error threshold is met or an early stopping
condition is triggered.

A Dense neural network (DNN) {[}15{]} is a fundamental type of neural
network in which each neuron in one layer is connected to every neuron
in the subsequent layer. It is the simplest architecture in neural
networks, typically used as the basic one in deep learning. In this
architecture, the input layer receives the input data
" 0 1 (rear-nonsticky nil fontified nil) 1 2 (fontified nil) 2 591 (fontified t) 591 635 (fontified t) 635 798 (fontified t) 798 801 (fontified t) 801 855 (fontified t) 855 868 (fontified t) 868 936 (fontified t) 936 989 (fontified nil) 989 990 (fontified nil)) . 26156) (undo-tree-id2330 . -498) (undo-tree-id2331 . -1) (undo-tree-id2332 . -989) (undo-tree-id2333 . -989) (undo-tree-id2334 . -989) (undo-tree-id2335 . -989) (undo-tree-id2336 . -989) (undo-tree-id2337 . -989) (undo-tree-id2338 . -989) (undo-tree-id2339 . -989) (undo-tree-id2340 . -989) (undo-tree-id2341 . -989) (undo-tree-id2342 . -989) (undo-tree-id2343 . -989) (undo-tree-id2344 . -989) (undo-tree-id2345 . -989) (undo-tree-id2346 . -989) (undo-tree-id2347 . -989) (undo-tree-id2348 . -989) (undo-tree-id2349 . -989) (undo-tree-id2350 . -989) (undo-tree-id2351 . -989) (undo-tree-id2352 . -989) (undo-tree-id2353 . -989) (undo-tree-id2354 . -989) (undo-tree-id2355 . -989) (undo-tree-id2356 . -989) (undo-tree-id2357 . -989) (undo-tree-id2358 . -989) (undo-tree-id2359 . -989) (undo-tree-id2360 . -989) (undo-tree-id2361 . -989) (undo-tree-id2362 . -989) (undo-tree-id2363 . -989) (undo-tree-id2364 . -989) (undo-tree-id2365 . -989) (undo-tree-id2366 . -989) (undo-tree-id2367 . -989) (undo-tree-id2368 . -989) (undo-tree-id2369 . -989) (undo-tree-id2370 . -989) (undo-tree-id2371 . -989) (undo-tree-id2372 . -989) (undo-tree-id2373 . -989) (undo-tree-id2374 . -989) (undo-tree-id2375 . -989) (undo-tree-id2376 . -989) (undo-tree-id2377 . -989) (undo-tree-id2378 . -989) (undo-tree-id2379 . -989) (undo-tree-id2380 . -989) (undo-tree-id2381 . -989) (undo-tree-id2382 . -989) (undo-tree-id2383 . -989) (undo-tree-id2384 . -1) (27145 . 27146) (nil rear-nonsticky t 26156 . 26157) (t 26477 31053 919119 932000)) (26477 31053 913190 284000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -27502) (undo-tree-id2419 . -1) (#("o" 0 1 (fontified t)) . -27503) (undo-tree-id2420 . -1) (#("f" 0 1 (fontified t)) . -27504) (undo-tree-id2421 . -1) (#(" " 0 1 (fontified t)) . -27505) (undo-tree-id2422 . -1) 27506 (27497 . 27506) (#("i" 0 1 (fontified nil)) . -27497) (undo-tree-id2423 . -1) (27486 . 27498) (27476 . 27486) (27466 . 27476) (#("w" 0 1 (fontified t)) . -27466) (undo-tree-id2424 . -1) 27467 (27460 . 27467) (#(" " 0 1 (fontified t)) . -27460) (undo-tree-id2425 . -1) (#("a" 0 1 (fontified t)) . -27461) (undo-tree-id2426 . -1) (#("n" 0 1 (fontified t)) . -27462) (undo-tree-id2427 . -1) (#("d" 0 1 (fontified t)) . -27463) (undo-tree-id2428 . -1) 27464 (27459 . 27464) (27441 . 27459) (27437 . 27441)) nil (26477 31187 966712 186000) 0 nil])
nil
([nil nil ((27502 . 27503) (#("
" 0 1 (fontified t)) . -27502) (undo-tree-id2417 . 1) (#("
" 0 1 (fontified t)) . -27502) (undo-tree-id2418 . 1) 27501) nil (26477 31187 966705 374000) 0 nil])
([nil nil ((27521 . 27522)) nil (26477 31187 966704 101000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27541 . 27542) (nil fontified nil 27522 . 27542) (27522 . 27542) 27521) nil (26477 31187 966703 310000) 0 nil])
([nil nil ((27523 . 27524) (#("w" 0 1 (face tex-math fontified t)) . 27523) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1)) nil (26477 31187 966702 488000) 0 nil])
([nil nil ((27527 . 27528) (#("w" 0 1 (face tex-math fontified t)) . 27527)) nil (26477 31187 966699 72000) 0 nil])
([nil nil ((27538 . 27539) (#("w" 0 1 (face tex-math fontified t)) . 27538) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1)) nil (26477 31187 966695 134000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27543) (undo-tree-id2437 . -1) (t 26477 31187 974687 538000)) nil (26477 31239 47219 152000) 0 nil])
([nil nil ((#("
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.6\\textwidth]{media/ict/image40}
	\\caption*{Figure 3 - Random Forest}
\\end{figure}
" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t latex-env-pair t) 8 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 20 (fontified t) 20 30 (face font-lock-keyword-face fontified t) 30 32 (fontified t) 32 48 (face font-lock-keyword-face fontified t) 48 58 (fontified t) 58 68 (face font-lock-keyword-face fontified t) 68 70 (fontified t) 70 87 (face font-lock-builtin-face fontified t) 87 90 (fontified t) 90 99 (face font-lock-keyword-face fontified t) 99 126 (fontified t) 126 130 (face font-lock-keyword-face fontified t) 130 131 (fontified t latex-env-pair t) 131 137 (face font-lock-function-name-face fontified t latex-env-pair t) 137 138 (fontified t latex-env-pair t) 138 139 (fontified t)) . 26310) (undo-tree-id2616 . -126) (undo-tree-id2617 . -126) (undo-tree-id2618 . -138) (undo-tree-id2619 . -139) (undo-tree-id2620 . -139) (undo-tree-id2621 . -126) 26436) nil (26477 31245 38953 139000) 0 nil] [nil nil ((#("
XGBoost {[}14{]} is a very strong machine-learning algorithm widely used
in the classification task. It lies in a series of boosting algorithms
that combine the predictions of multiple learners. XGBoost is known for
its efficiency and high performance. Employing an ensemble approach
corrects the errors made in previous iterations through the next model.
During each step, the deviations of the ensemble's predictions are
assessed on the training data, and the model is optimized by introducing
new tree forecasts to reduce the overall deviation. This process
continues until the desired error threshold is met or an early stopping
condition is triggered.

A Dense neural network (DNN) {[}15{]} is a fundamental type of neural
network in which each neuron in one layer is connected to every neuron
in the subsequent layer. It is the simplest architecture in neural
networks, typically used as the basic one in deep learning. In this
architecture, the input layer receives the input data $x=x_1,x_2,\\ldots,x_n$, and $w_1,w_2,\\ldots,w_n$ present weights of each level, and $b_1,b_2,\\ldots,b_n$
of the input layer. The hidden layers consist of neurons that apply
weights to the input features, followed by an activation function that
produces non-linearity. There are usually many hidden layers in a neural
network. The output layer shows the final prediction that usually
corresponds to the number of classes: binary (two -- 0 or 1) and
multiclass (three or more). The scheme of DNN is presented in Figure 4.
" 0 590 (fontified t) 590 634 (fontified t) 634 797 (fontified t) 797 800 (fontified t) 800 854 (fontified t) 854 867 (fontified t) 867 935 (fontified t) 935 989 (fontified t) 989 994 (face tex-math fontified t) 994 995 (face (tex-math subscript) display (raise -0.2) fontified t) 995 998 (face tex-math fontified t) 998 999 (face (tex-math subscript) display (raise -0.2) fontified t) 999 1000 (face tex-math fontified t) 1000 1006 (face tex-math fontified t) 1006 1009 (face tex-math fontified t) 1009 1010 (face (tex-math subscript) display (raise -0.2) fontified t) 1010 1011 (face tex-math fontified t) 1011 1017 (fontified t) 1017 1020 (face tex-math fontified t) 1020 1021 (face (tex-math subscript) display (raise -0.2) fontified t) 1021 1024 (face tex-math fontified t) 1024 1025 (face (tex-math subscript) display (raise -0.2) fontified t) 1025 1026 (face tex-math fontified t) 1026 1032 (face tex-math fontified t) 1032 1035 (face tex-math fontified t) 1035 1036 (face (tex-math subscript) display (raise -0.2) fontified t) 1036 1037 (face tex-math fontified t) 1037 1053 (fontified t) 1053 1054 (fontified t) 1054 1073 (fontified t) 1073 1074 (face tex-math fontified t) 1074 1075 (face tex-math fontified t) 1075 1076 (face tex-math fontified t) 1076 1077 (face (tex-math subscript) display (raise -0.2) fontified t) 1077 1078 (face tex-math fontified t) 1078 1079 (face tex-math fontified t) 1079 1080 (face tex-math fontified t) 1080 1081 (face (tex-math subscript) display (raise -0.2) fontified t) 1081 1089 (face tex-math fontified t) 1089 1090 (face tex-math fontified t) 1090 1091 (face tex-math fontified t) 1091 1092 (face (tex-math subscript) display (raise -0.2) fontified t) 1092 1093 (face tex-math rear-nonsticky t fontified t) 1093 1094 (fontified t) 1094 1161 (fontified t) 1161 1162 (fontified t) 1162 1509 (fontified t)) . 26449) (undo-tree-id2438 . -1437) (undo-tree-id2439 . 416) (undo-tree-id2440 . -1437) (undo-tree-id2441 . -1508) (undo-tree-id2442 . -1036) (undo-tree-id2443 . -1074) (undo-tree-id2444 . -1074) (undo-tree-id2445 . -1074) (undo-tree-id2446 . -1074) (undo-tree-id2447 . -1074) (t 26477 31192 515639 0)) ((26449 . 27958)) (26477 31238 531554 172000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26967 . 26968) (#("
" 0 1 (fontified nil)) . -27106) (26967 . 27107) 26944) nil (26477 31245 38938 823000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26156 . 26157) (#("
" 0 1 (fontified nil)) . -27665) (26156 . 27666) 26104) ((#("

XGBoost {[}14{]} is a very strong machine-learning algorithm widely used
in the classification task. It lies in a series of boosting algorithms
that combine the predictions of multiple learners. XGBoost is known for
its efficiency and high performance. Employing an ensemble approach
corrects the errors made in previous iterations through the next model.
During each step, the deviations of the ensemble's predictions are
assessed on the training data, and the model is optimized by introducing
new tree forecasts to reduce the overall deviation. This process
continues until the desired error threshold is met or an early stopping
condition is triggered.

A Dense neural network (DNN) {[}15{]} is a fundamental type of neural
network in which each neuron in one layer is connected to every neuron
in the subsequent layer. It is the simplest architecture in neural
networks, typically used as the basic one in deep learning. In this
architecture, the input layer receives the input data $x=x_1,x_2,\\ldots,x_n$, and $w_1,w_2,\\ldots,w_n$ present weights of each level, and $b_1,b_2,\\ldots,b_n$
of the input layer. The hidden layers consist of neurons that apply
weights to the input features, followed by an activation function that
produces non-linearity. There are usually many hidden layers in a neural
network. The output layer shows the final prediction that usually
corresponds to the number of classes: binary (two -- 0 or 1) and
multiclass (three or more). The scheme of DNN is presented in Figure 4.
" 0 1 (rear-nonsticky nil fontified nil) 1 2 (fontified nil) 2 591 (fontified t) 591 635 (fontified t) 635 798 (fontified t) 798 801 (fontified t) 801 855 (fontified t) 855 868 (fontified t) 868 936 (fontified t) 936 990 (fontified t) 990 995 (face tex-math fontified t) 995 996 (face (tex-math subscript) fontified t display (raise -0.2)) 996 999 (face tex-math fontified t) 999 1000 (face (tex-math subscript) fontified t display (raise -0.2)) 1000 1001 (face tex-math fontified t) 1001 1007 (face tex-math fontified t) 1007 1010 (face tex-math fontified t) 1010 1011 (face (tex-math subscript) fontified t display (raise -0.2)) 1011 1012 (face tex-math fontified t) 1012 1018 (fontified t) 1018 1021 (face tex-math fontified t) 1021 1022 (face (tex-math subscript) fontified t display (raise -0.2)) 1022 1025 (face tex-math fontified t) 1025 1026 (face (tex-math subscript) fontified t display (raise -0.2)) 1026 1027 (face tex-math fontified t) 1027 1033 (face tex-math fontified t) 1033 1036 (face tex-math fontified t) 1036 1037 (face (tex-math subscript) fontified t display (raise -0.2)) 1037 1038 (face tex-math fontified t) 1038 1054 (fontified t) 1054 1055 (fontified t) 1055 1074 (fontified t) 1074 1075 (face tex-math fontified t) 1075 1076 (face tex-math fontified t) 1076 1077 (face tex-math fontified t) 1077 1078 (face (tex-math subscript) fontified t display (raise -0.2)) 1078 1079 (face tex-math fontified t) 1079 1080 (face tex-math fontified t) 1080 1081 (face tex-math fontified t) 1081 1082 (face (tex-math subscript) fontified t display (raise -0.2)) 1082 1090 (face tex-math fontified t) 1090 1091 (face tex-math fontified t) 1091 1092 (face tex-math fontified t) 1092 1093 (face (tex-math subscript) fontified t display (raise -0.2)) 1093 1094 (face tex-math fontified t rear-nonsticky t) 1094 1095 (fontified t) 1095 1162 (fontified t) 1162 1163 (fontified t) 1163 1438 (fontified t) 1438 1448 (fontified nil) 1448 1509 (fontified nil) 1509 1510 (fontified nil)) . 26156) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1509) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (27665 . 27666) (nil rear-nonsticky t 26156 . 26157) (t 26477 31224 91301 404000)) (26477 31224 83327 373000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -26230) (t 26477 31245 45077 363000) (26231 . 26232) 26230 (t 26477 31245 45077 363000)) nil (26477 31265 193054 836000) 0 nil])
nil
([nil nil ((#("6" 0 1 (fontified t)) . -27025) (27026 . 27027) 27025) nil (26477 31281 522274 225000) 0 nil])
([nil nil ((#("\\end{multicols}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.7\\textwidth]{media/ict/image39}
	\\caption*{Figure 2-Decision Tree}
\\end{figure}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t) 16 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t latex-env-pair t) 24 30 (face font-lock-function-name-face fontified t latex-env-pair t) 30 31 (fontified t latex-env-pair t) 31 36 (fontified t) 36 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 64 (face font-lock-keyword-face fontified t) 64 73 (fontified t) 73 74 (fontified t) 74 81 (face font-lock-keyword-face fontified t) 81 84 (face font-lock-keyword-face fontified t) 84 86 (fontified t) 86 103 (face font-lock-builtin-face fontified t) 103 105 (fontified t) 105 106 (fontified t) 106 115 (face font-lock-keyword-face fontified t) 115 140 (fontified t) 140 144 (face font-lock-keyword-face fontified t) 144 145 (fontified t latex-env-pair t) 145 151 (face font-lock-function-name-face fontified t latex-env-pair t) 151 152 (fontified t latex-env-pair t) 152 153 (fontified t)) . 26157) (undo-tree-id2737 . -140) (undo-tree-id2738 . -140) (undo-tree-id2739 . -152) (undo-tree-id2740 . -153) (undo-tree-id2741 . -140) (undo-tree-id2742 . -140) (undo-tree-id2743 . -153) (undo-tree-id2744 . -16) (undo-tree-id2745 . -140) 26297 (t 26477 31265 200861 829000)) nil (26477 31292 389576 649000) 0 nil] [nil nil ((#("
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.7\\textwidth]{media/ict/image39}
	\\caption*{Figure 2-Decision Tree}
\\end{figure}
" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t latex-env-pair t) 8 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 20 (fontified t) 20 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 48 (face font-lock-keyword-face fontified t) 48 57 (fontified t) 57 58 (fontified t) 58 65 (face font-lock-keyword-face fontified t) 65 68 (face font-lock-keyword-face fontified t) 68 70 (fontified t) 70 87 (face font-lock-builtin-face fontified t) 87 89 (fontified t) 89 90 (fontified t) 90 99 (face font-lock-keyword-face fontified t) 99 124 (fontified t) 124 128 (face font-lock-keyword-face fontified t) 128 129 (fontified t latex-env-pair t) 129 135 (face font-lock-function-name-face fontified t latex-env-pair t) 135 136 (fontified t latex-env-pair t) 136 137 (fontified t)) . 26173) (undo-tree-id2622 . -124) (undo-tree-id2623 . -124) (undo-tree-id2624 . -136) (undo-tree-id2625 . -137) (undo-tree-id2626 . -124) (undo-tree-id2627 . -124) (undo-tree-id2628 . -137) (undo-tree-id2629 . -137) (undo-tree-id2630 . -137) (undo-tree-id2631 . -137) (undo-tree-id2632 . -137) (undo-tree-id2633 . -137) (undo-tree-id2634 . -137) (undo-tree-id2635 . -137) (undo-tree-id2636 . -135) (undo-tree-id2637 . -135) (undo-tree-id2638 . -135) (undo-tree-id2639 . -135) (undo-tree-id2640 . -135) (undo-tree-id2641 . -115) (undo-tree-id2642 . -115) (undo-tree-id2643 . -115) (undo-tree-id2644 . -115) (undo-tree-id2645 . -115) (undo-tree-id2646 . -57) (undo-tree-id2647 . -57) (undo-tree-id2648 . -57) (undo-tree-id2649 . -57) (undo-tree-id2650 . -57) (undo-tree-id2651 . -29) (undo-tree-id2652 . -29) (undo-tree-id2653 . -29) (undo-tree-id2654 . -29) (undo-tree-id2655 . -29) (undo-tree-id2656 . -17) (undo-tree-id2657 . -17) (undo-tree-id2658 . -17) (undo-tree-id2659 . -17) (undo-tree-id2660 . -17) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -19) (undo-tree-id2679 . -19) (undo-tree-id2680 . -19) (undo-tree-id2681 . -19) (undo-tree-id2682 . -19) (undo-tree-id2683 . -31) (undo-tree-id2684 . -31) (undo-tree-id2685 . -31) (undo-tree-id2686 . -31) (undo-tree-id2687 . -31) (undo-tree-id2688 . -31) (undo-tree-id2689 . -31) (undo-tree-id2690 . -31) (undo-tree-id2691 . -31) (undo-tree-id2692 . -31) (undo-tree-id2693 . -89) (undo-tree-id2694 . -89) (undo-tree-id2695 . -89) (undo-tree-id2696 . -89) (undo-tree-id2697 . -89) (undo-tree-id2698 . -89) (undo-tree-id2699 . -89) (undo-tree-id2700 . -89) (undo-tree-id2701 . -89) (undo-tree-id2702 . -89) (undo-tree-id2703 . -89) (undo-tree-id2704 . -89) (undo-tree-id2705 . -89) (undo-tree-id2706 . -89) (undo-tree-id2707 . -89) (undo-tree-id2708 . -89) (undo-tree-id2709 . -89) (undo-tree-id2710 . -89) (undo-tree-id2711 . -89) (undo-tree-id2712 . -89) (undo-tree-id2713 . -124) (undo-tree-id2714 . -124) (undo-tree-id2715 . -124) (undo-tree-id2716 . -124) (undo-tree-id2717 . -124) (undo-tree-id2718 . -124) (undo-tree-id2719 . -124) (undo-tree-id2720 . -124) (undo-tree-id2721 . -124) (undo-tree-id2722 . -124) (undo-tree-id2723 . -124) (undo-tree-id2724 . -124) (undo-tree-id2725 . -124) (undo-tree-id2726 . -124) (undo-tree-id2727 . -124) (undo-tree-id2728 . -124) (undo-tree-id2729 . -124) (undo-tree-id2730 . -124) (undo-tree-id2731 . -124) (undo-tree-id2732 . -124) (undo-tree-id2733 . -124) (undo-tree-id2734 . -124) (undo-tree-id2735 . -124) (undo-tree-id2736 . -137) 26297 (t 26477 31265 200861 829000)) ((26173 . 26310)) (26477 31281 521968 293000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25307 . 25308) (#("
" 0 1 (fontified nil)) . -25460) (25307 . 25461) 25281) nil (26477 31292 389565 28000) 0 nil])
nil
([nil nil ((25462 . 25483) (26968 . 26984)) nil (26477 31292 389561 311000) 0 nil])
([nil nil ((#("\\end{multicols}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.7\\textwidth]{media/ict/image40}
	\\caption*{Figure 3 - Random Forest}
\\end{figure}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t) 16 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t latex-env-pair t) 24 30 (face font-lock-function-name-face fontified t latex-env-pair t) 30 31 (fontified t latex-env-pair t) 31 36 (fontified t) 36 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 64 (face font-lock-keyword-face fontified t) 64 65 (fontified t) 65 73 (fontified t) 73 74 (fontified t) 74 84 (fontified t face font-lock-keyword-face) 84 86 (fontified t) 86 103 (fontified t face font-lock-builtin-face) 103 105 (fontified t) 105 106 (fontified t) 106 115 (face font-lock-keyword-face fontified t) 115 142 (fontified t) 142 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t latex-env-pair t) 147 153 (face font-lock-function-name-face fontified t latex-env-pair t) 153 154 (fontified t latex-env-pair t) 154 155 (fontified t)) . 26989) (undo-tree-id2746 . -142) (undo-tree-id2747 . -142) (undo-tree-id2748 . -154) (undo-tree-id2749 . -142) 27131 (t 26477 31292 397570 923000)) nil (26477 31339 501816 671000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26330 . 26331) (#("
" 0 1 (fontified nil)) . -26485) (26330 . 26486) 26278) nil (26477 31339 501803 597000) 0 nil])
([nil nil ((#("
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image44}
	\\caption*{Figure 4 - Dense neural network}
\\end{figure}
" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t latex-env-pair t) 8 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 20 (fontified t) 20 30 (face font-lock-keyword-face fontified t) 30 32 (fontified t) 32 48 (face font-lock-keyword-face fontified t) 48 58 (fontified t) 58 68 (face font-lock-keyword-face fontified t) 68 70 (fontified t) 70 87 (face font-lock-builtin-face fontified t) 87 90 (fontified t) 90 99 (face font-lock-keyword-face fontified t) 99 133 (fontified t) 133 137 (face font-lock-keyword-face fontified t) 137 138 (fontified t latex-env-pair t) 138 144 (face font-lock-function-name-face fontified t latex-env-pair t) 144 145 (fontified t latex-env-pair t) 145 146 (fontified t)) . 27995) (undo-tree-id2750 . -133) (undo-tree-id2751 . -133) (undo-tree-id2752 . -145) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -19) (undo-tree-id2770 . -19) (undo-tree-id2771 . -19) (undo-tree-id2772 . -19) (undo-tree-id2773 . -19) (undo-tree-id2774 . -19) (undo-tree-id2775 . -31) (undo-tree-id2776 . -31) (undo-tree-id2777 . -31) (undo-tree-id2778 . -31) (undo-tree-id2779 . -31) (undo-tree-id2780 . -31) (undo-tree-id2781 . -31) (undo-tree-id2782 . -31) (undo-tree-id2783 . -31) (undo-tree-id2784 . -31) (undo-tree-id2785 . -31) (undo-tree-id2786 . -31) (undo-tree-id2787 . -31) (undo-tree-id2788 . -31) (undo-tree-id2789 . -31) (undo-tree-id2790 . -31) (undo-tree-id2791 . -31) (undo-tree-id2792 . -31) (undo-tree-id2793 . -31) (undo-tree-id2794 . -31) (undo-tree-id2795 . -31) (undo-tree-id2796 . -89) (undo-tree-id2797 . -89) (undo-tree-id2798 . -89) (undo-tree-id2799 . -89) (undo-tree-id2800 . -89) (undo-tree-id2801 . -89) (undo-tree-id2802 . -89) (undo-tree-id2803 . -89) (undo-tree-id2804 . -89) (undo-tree-id2805 . -89) (undo-tree-id2806 . -89) (undo-tree-id2807 . -89) (undo-tree-id2808 . -89) (undo-tree-id2809 . -89) (undo-tree-id2810 . -89) (undo-tree-id2811 . -89) (undo-tree-id2812 . -133) (undo-tree-id2813 . -133) (undo-tree-id2814 . -133) (undo-tree-id2815 . -133) (undo-tree-id2816 . -133) (undo-tree-id2817 . -133) (undo-tree-id2818 . -133) (undo-tree-id2819 . -133) (undo-tree-id2820 . -133) (undo-tree-id2821 . -133) (undo-tree-id2822 . -133) (undo-tree-id2823 . -133) (undo-tree-id2824 . -133) (undo-tree-id2825 . -133) (undo-tree-id2826 . -133) (undo-tree-id2827 . -133) (undo-tree-id2828 . -133) (undo-tree-id2829 . -133) (undo-tree-id2830 . -133) (undo-tree-id2831 . -133) (undo-tree-id2832 . -133) (undo-tree-id2833 . -133) (undo-tree-id2834 . -133) (undo-tree-id2835 . -133) (undo-tree-id2836 . -146) 28128 (t 26477 31339 513066 842000)) nil (26477 31353 655344 719000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28576 . 28577) (#("
" 0 1 (fontified nil)) . -28722) (28576 . 28723) 28557) nil (26477 31353 655260 883000) 0 nil])
([nil nil ((37608 . 37618) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -37608) (undo-tree-id2846 . -1) (37607 . 37609) (37603 . 37607) (#("i" 0 1 (fontified nil)) . -37603) (undo-tree-id2847 . -1) (37601 . 37604) (#("i" 0 1 (fontified nil)) . -37601) (undo-tree-id2848 . -1) (37587 . 37602) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -37587) (undo-tree-id2849 . -1) (37586 . 37588) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -37586) (undo-tree-id2850 . -1) 37587 (37575 . 37587) (#("f" 0 1 (fontified t)) . -37575) (undo-tree-id2851 . -1) 37576 (37575 . 37576) (37575 . 37576) (#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image84}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 13 (face font-lock-function-name-face latex-env-pair t fontified t) 13 14 (latex-env-pair t fontified t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (latex-env-pair t fontified t) 106 112 (face font-lock-function-name-face latex-env-pair t fontified t) 112 113 (latex-env-pair t fontified t) 113 114 (fontified t)) . 37575) (undo-tree-id2852 . -113) (undo-tree-id2853 . -12) (undo-tree-id2854 . -113) (undo-tree-id2855 . -113) (undo-tree-id2856 . -113) 37688 (t 26477 31353 663915 418000)) nil (26477 31521 656019 430000) 0 nil])
([nil nil ((37612 . 37625) (#("Recall" 0 6 (face font-lock-keyword-face fontified t)) . 37612) (undo-tree-id2844 . -6) (undo-tree-id2845 . -5)) nil (26477 31521 656014 721000) 0 nil])
([nil nil ((37597 . 37613) (#("Precision" 0 9 (fontified t)) . -37597) (undo-tree-id2841 . -8) (undo-tree-id2842 . -8) (undo-tree-id2843 . -8) 37606) nil (26477 31521 656012 717000) 0 nil])
([nil nil ((37578 . 37590) (#("score" 0 5 (fontified t)) . -37578) (undo-tree-id2839 . -4) (undo-tree-id2840 . -4) 37583) nil (26477 31521 656009 842000) 0 nil])
([nil nil ((37639 . 37641)) nil (26477 31521 656008 630000) 0 nil])
([nil nil ((nil rear-nonsticky nil 37675 . 37676) (nil fontified nil 37641 . 37676) (37641 . 37676) 37640) nil (26477 31521 656008 289000) 0 nil])
([nil nil ((37676 . 37677)) nil (26477 31521 656007 668000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 37657)) nil (26477 31521 656007 167000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37657)) nil (26477 31521 656006 345000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 37657)) nil (26477 31521 656005 273000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 37657)) nil (26477 31521 656004 622000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 37657)) nil (26477 31521 656003 801000) 0 nil])
([nil nil ((37657 . 37658) (#(")" 0 1 (fontified t)) . 37657) (undo-tree-id2837 . -1) (37657 . 37658) (#("s" 0 1 (fontified t)) . 37657) (undo-tree-id2838 . -1)) nil (26477 31524 659161 991000) 0 nil])
([nil nil ((37575 . 37592) (37673 . 37688) (t 26477 31521 665116 605000)) nil (26477 31526 974569 433000) 0 nil] [nil nil ((37575 . 37679) (#("F1-\\text{score}=2\\times\\frac{\\text{Precision}\\times\\text{Recall}}{\\text{Precision}+\\text{Recall}}
" 0 3 (fontified t) 3 8 (face font-lock-keyword-face fontified t) 8 15 (fontified t) 15 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 34 (face font-lock-keyword-face fontified t) 34 45 (fontified t) 45 51 (face font-lock-keyword-face fontified t) 51 56 (face font-lock-keyword-face fontified t) 56 66 (fontified t) 66 71 (face font-lock-keyword-face fontified t) 71 82 (fontified t) 82 83 (fontified t) 83 88 (face font-lock-keyword-face fontified t) 88 95 (fontified t) 95 96 (rear-nonsticky t fontified t) 96 97 (fontified t) 97 98 (fontified t)) . -37575) (undo-tree-id2857 . 1) (undo-tree-id2858 . -82) (undo-tree-id2859 . -82) (undo-tree-id2860 . -82) (undo-tree-id2861 . -82) (undo-tree-id2862 . -29) (undo-tree-id2863 . -63) (undo-tree-id2864 . -63) (undo-tree-id2865 . -82) (undo-tree-id2866 . -82) (undo-tree-id2867 . -82) (undo-tree-id2868 . -82) (undo-tree-id2869 . -82) (undo-tree-id2870 . -82) (undo-tree-id2871 . -82) (undo-tree-id2872 . -82) (undo-tree-id2873 . -82) (undo-tree-id2874 . -82) (undo-tree-id2875 . -82) (undo-tree-id2876 . -82) (undo-tree-id2877 . -82) (undo-tree-id2878 . -82) (undo-tree-id2879 . -82) (undo-tree-id2880 . -82) (undo-tree-id2881 . -82) (undo-tree-id2882 . -82) (undo-tree-id2883 . -82) (undo-tree-id2884 . -82) (undo-tree-id2885 . -82) (undo-tree-id2886 . -82) (undo-tree-id2887 . -82) (undo-tree-id2888 . -82) (undo-tree-id2889 . -82) (undo-tree-id2890 . -82) (undo-tree-id2891 . -82) (undo-tree-id2892 . -82) (undo-tree-id2893 . -82) (undo-tree-id2894 . -82) (undo-tree-id2895 . -82) (undo-tree-id2896 . -82) (undo-tree-id2897 . -82) (undo-tree-id2898 . -82) (undo-tree-id2899 . -82) (undo-tree-id2900 . -82) (undo-tree-id2901 . -82) (undo-tree-id2902 . -82) (undo-tree-id2903 . -82) (undo-tree-id2904 . -82) (undo-tree-id2905 . -82) (undo-tree-id2906 . -82) (undo-tree-id2907 . -82) (undo-tree-id2908 . -82) (undo-tree-id2909 . -82) (undo-tree-id2910 . -82) (undo-tree-id2911 . -82) (undo-tree-id2912 . -82) (undo-tree-id2913 . -82) (undo-tree-id2914 . -82) (undo-tree-id2915 . -82) (undo-tree-id2916 . -82) (undo-tree-id2917 . -82) (undo-tree-id2918 . -82) (undo-tree-id2919 . -82) (undo-tree-id2920 . -82) (undo-tree-id2921 . -82) (undo-tree-id2922 . -82) (undo-tree-id2923 . -82) (undo-tree-id2924 . -82) (undo-tree-id2925 . -82) (undo-tree-id2926 . -82) (undo-tree-id2927 . -82) (undo-tree-id2928 . -82) (undo-tree-id2929 . -82) (undo-tree-id2930 . -82) (undo-tree-id2931 . -82) (undo-tree-id2932 . -82) (undo-tree-id2933 . -82) (undo-tree-id2934 . -82) (undo-tree-id2935 . -82) (undo-tree-id2936 . -82) (undo-tree-id2937 . -82) (undo-tree-id2938 . -82) (undo-tree-id2939 . -82) (undo-tree-id2940 . -82) (undo-tree-id2941 . -82) (undo-tree-id2942 . -82) (undo-tree-id2943 . -82) (undo-tree-id2944 . -82) (undo-tree-id2945 . -82) (undo-tree-id2946 . -82) (undo-tree-id2947 . -82) (undo-tree-id2948 . -82) (undo-tree-id2949 . -82) (undo-tree-id2950 . -82) (undo-tree-id2951 . -82) (undo-tree-id2952 . -82) (undo-tree-id2953 . -82) (undo-tree-id2954 . -82) (undo-tree-id2955 . -82) (undo-tree-id2956 . -82) (undo-tree-id2957 . -82) (undo-tree-id2958 . -82) (undo-tree-id2959 . -98) 37673 (t 26477 31521 665116 605000)) ((37575 . 37673) (#("\\text{F1-\\text{score}=2\\times\\frac{\\text{Precision}\\times\\text{Recall}}{\\text{Precision}+\\text{Recall}}}" 0 5 (face font-lock-keyword-face fontified t) 5 9 (fontified t) 9 14 (face font-lock-keyword-face fontified t) 14 23 (fontified t) 23 29 (face font-lock-keyword-face fontified t) 29 34 (face font-lock-keyword-face fontified t) 34 35 (fontified t) 35 40 (face font-lock-keyword-face fontified t) 40 51 (fontified t) 51 57 (face font-lock-keyword-face fontified t) 57 62 (face font-lock-keyword-face fontified t) 62 72 (fontified t) 72 77 (face font-lock-keyword-face fontified t) 77 89 (fontified t) 89 94 (face font-lock-keyword-face fontified t) 94 104 (fontified t)) . 37575)) (26477 31524 658857 973000) 0 nil])
([nil nil ((37369 . 37371) (37348 . 37369) (37348 . 37349) (#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image83}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 13 (face font-lock-function-name-face latex-env-pair t fontified t) 13 14 (latex-env-pair t fontified t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (latex-env-pair t fontified t) 106 112 (face font-lock-function-name-face latex-env-pair t fontified t) 112 113 (latex-env-pair t fontified t) 113 114 (fontified t)) . 37348) (undo-tree-id2960 . -101) (undo-tree-id2961 . -101) (undo-tree-id2962 . -113) (undo-tree-id2963 . -114) (undo-tree-id2964 . -114) (undo-tree-id2965 . -114) (undo-tree-id2966 . -114) (undo-tree-id2967 . -114) (undo-tree-id2968 . -101) (undo-tree-id2969 . -101) (undo-tree-id2970 . -101) (undo-tree-id2971 . -101) (undo-tree-id2972 . -101) (undo-tree-id2973 . -101) (undo-tree-id2974 . -101) (undo-tree-id2975 . -101) (undo-tree-id2976 . -101) (undo-tree-id2977 . -101) (undo-tree-id2978 . -88) (undo-tree-id2979 . -88) (undo-tree-id2980 . -88) (undo-tree-id2981 . -88) (undo-tree-id2982 . -88) (undo-tree-id2983 . -88) (undo-tree-id2984 . -88) (undo-tree-id2985 . -88) (undo-tree-id2986 . -88) (undo-tree-id2987 . -88) (undo-tree-id2988 . -88) (undo-tree-id2989 . -88) (undo-tree-id2990 . -88) (undo-tree-id2991 . -88) (undo-tree-id2992 . -88) (undo-tree-id2993 . -101) (undo-tree-id2994 . -101) (undo-tree-id2995 . -101) (undo-tree-id2996 . -101) (undo-tree-id2997 . -101) (undo-tree-id2998 . -101) (undo-tree-id2999 . -101) (undo-tree-id3000 . -101) (undo-tree-id3001 . -101) (undo-tree-id3002 . -101) (undo-tree-id3003 . -101) (undo-tree-id3004 . -101) (undo-tree-id3005 . -101) (undo-tree-id3006 . -101) (undo-tree-id3007 . -101) (undo-tree-id3008 . -101) (undo-tree-id3009 . -101) (undo-tree-id3010 . -101) (undo-tree-id3011 . -101) (undo-tree-id3012 . -101) (undo-tree-id3013 . -101) (undo-tree-id3014 . -101) (undo-tree-id3015 . -101) (undo-tree-id3016 . -101) (undo-tree-id3017 . -101) (undo-tree-id3018 . -101) (undo-tree-id3019 . -101) (undo-tree-id3020 . -101) (undo-tree-id3021 . -101) (undo-tree-id3022 . -101) (undo-tree-id3023 . -101) (undo-tree-id3024 . -101) (undo-tree-id3025 . -101) (undo-tree-id3026 . -101) (undo-tree-id3027 . -101) (undo-tree-id3028 . -101) (undo-tree-id3029 . -101) (undo-tree-id3030 . -88) (undo-tree-id3031 . -88) (undo-tree-id3032 . -88) (undo-tree-id3033 . -88) (undo-tree-id3034 . -88) (undo-tree-id3035 . -88) (undo-tree-id3036 . -88) (undo-tree-id3037 . -88) (undo-tree-id3038 . -88) (undo-tree-id3039 . -88) (undo-tree-id3040 . -88) (undo-tree-id3041 . -88) (undo-tree-id3042 . -88) (undo-tree-id3043 . -88) (undo-tree-id3044 . -88) (undo-tree-id3045 . -88) (undo-tree-id3046 . -88) (undo-tree-id3047 . -30) (undo-tree-id3048 . -30) (undo-tree-id3049 . -30) (undo-tree-id3050 . -30) (undo-tree-id3051 . -30) (undo-tree-id3052 . -30) (undo-tree-id3053 . -30) (undo-tree-id3054 . -30) (undo-tree-id3055 . -30) (undo-tree-id3056 . -30) (undo-tree-id3057 . -30) (undo-tree-id3058 . -30) (undo-tree-id3059 . -30) (undo-tree-id3060 . -30) (undo-tree-id3061 . -30) (undo-tree-id3062 . -18) (undo-tree-id3063 . -18) (undo-tree-id3064 . -18) (undo-tree-id3065 . -18) (undo-tree-id3066 . -18) (undo-tree-id3067 . -18) (undo-tree-id3068 . -18) (undo-tree-id3069 . -18) (undo-tree-id3070 . -18) (undo-tree-id3071 . -18) (undo-tree-id3072 . -18) (undo-tree-id3073 . -18) (undo-tree-id3074 . -18) (undo-tree-id3075 . -18) (undo-tree-id3076 . -18) (undo-tree-id3077 . -114) (undo-tree-id3078 . -114) (t 26477 31526 984059 634000)) nil (26477 31569 578525 123000) 0 nil])
nil
([nil nil ((37348 . 37365) (37372 . 37387)) nil (26477 31569 578407 964000) 0 nil])
([nil nil ((37548 . 37549) (#("}" 0 1 (fontified t)) . 37548) (t 26477 31569 583603 219000)) nil (26477 31591 226495 801000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 37537)) nil (26477 31591 226495 431000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37537)) nil (26477 31591 226495 100000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 37537)) nil (26477 31591 226494 739000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 37537)) nil (26477 31591 226494 238000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37537) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1)) nil (26477 31591 226493 738000) 0 nil])
([nil nil ((37537 . 37538) (#("{" 0 1 (fontified t)) . 37537)) nil (26477 31591 226479 912000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 37558) (t 26477 31591 232371 220000)) nil (26477 31620 239202 222000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37558)) nil (26477 31620 239201 971000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 37558)) nil (26477 31620 239201 721000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 37558)) nil (26477 31620 239201 410000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37558)) nil (26477 31620 239201 150000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . 37558)) nil (26477 31620 239200 759000) 0 nil])
([nil nil ((37567 . 37568) (#("}" 0 1 (fontified t)) . 37567)) nil (26477 31620 239200 448000) 0 nil])
([nil nil ((#("i" 0 1 (fontified nil)) . -37575) (undo-tree-id3112 . -1) (37574 . 37576) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -37574) (undo-tree-id3113 . -1) (#(" " 0 1 (fontified t)) . -37575) (undo-tree-id3114 . -1) 37576 (37574 . 37576) (#(" " 0 1 (fontified t)) . -37574) (undo-tree-id3115 . -1) (#("s" 0 1 (fontified t)) . -37575) (undo-tree-id3116 . -1) 37576 (37574 . 37576) (#("\\text{" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . 37574) (undo-tree-id3117 . -5) (undo-tree-id3118 . -5) (undo-tree-id3119 . -5) (undo-tree-id3120 . -5) 37579) nil (26477 31620 239199 687000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 37581)) nil (26477 31620 239194 968000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 37583)) nil (26477 31620 239194 628000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37583)) nil (26477 31620 239194 267000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 37583)) nil (26477 31620 239194 87000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 37583)) nil (26477 31620 239193 756000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37583)) nil (26477 31620 239193 445000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . 37583)) nil (26477 31620 239193 165000) 0 nil])
([nil nil ((37592 . 37593) (#("}" 0 1 (fontified t)) . 37592)) nil (26477 31620 239192 944000) 0 nil])
([nil nil ((37594 . 37595) (#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 37594) (undo-tree-id3111 . -1)) nil (26477 31620 239192 524000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37595) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1)) nil (26477 31620 239191 923000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 37595) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1)) nil (26477 31620 239190 740000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 37595) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1)) nil (26477 31620 239183 797000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 37595) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1)) nil (26477 31620 239182 505000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . 37595) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1)) nil (26477 31620 239180 431000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t rear-nonsticky t)) . 37601) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1)) nil (26477 31620 239177 5000) 0 nil])
([nil nil ((nil rear-nonsticky nil 37214 . 37215) (#("
" 0 1 (fontified nil)) . -37270) (37214 . 37271) 37213 (t 26477 31620 248060 284000)) nil (26477 31659 873879 873000) 0 nil])
([nil nil ((#("
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image82}
	\\caption*{}
\\end{figure}
" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (latex-env-pair t fontified t) 8 14 (face font-lock-function-name-face latex-env-pair t fontified t) 14 15 (latex-env-pair t fontified t) 15 20 (fontified t) 20 30 (face font-lock-keyword-face fontified t) 30 32 (fontified t) 32 48 (face font-lock-keyword-face fontified t) 48 58 (fontified t) 58 68 (face font-lock-keyword-face fontified t) 68 70 (fontified t) 70 87 (face font-lock-builtin-face fontified t) 87 90 (fontified t) 90 99 (face font-lock-keyword-face fontified t) 99 102 (fontified t) 102 106 (face font-lock-keyword-face fontified t) 106 107 (latex-env-pair t fontified t) 107 113 (face font-lock-function-name-face latex-env-pair t fontified t) 113 114 (latex-env-pair t fontified t) 114 115 (rear-nonsticky t fontified t)) . 37100) (undo-tree-id3140 . -102) (undo-tree-id3141 . -102) (undo-tree-id3142 . -114) (undo-tree-id3143 . -102) 37202) nil (26477 31659 873879 332000) 0 nil])
([nil nil ((#("i" 0 1 (fontified nil)) . -37100) (undo-tree-id3139 . -1) (37099 . 37101) 37094) nil (26477 31659 873877 108000) 0 nil])
([nil nil ((#("i" 0 1 (fontified nil)) . -37127) (undo-tree-id3135 . -1) (37124 . 37128) (#("i" 0 1 (fontified nil)) . -37124) (undo-tree-id3136 . -1) (37122 . 37125) (#("i" 0 1 (fontified nil)) . -37122) (undo-tree-id3137 . -1) (37118 . 37123) (#("Recall" 0 6 (fontified t)) . 37118) (undo-tree-id3138 . -5)) nil (26477 31659 873875 795000) 0 nil])
([nil nil ((#("i" 0 1 (fontified nil)) . -37143) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (37141 . 37144) (#("FN" 0 2 (fontified t)) . 37141) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -2) (undo-tree-id3134 . -2)) nil (26477 31659 873869 884000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 37160) (undo-tree-id3144 . -1) (t 26477 31659 879635 414000)) nil (26477 31661 469627 970000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 37348) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (t 26477 31661 477618 277000)) nil (26477 31693 227109 576000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 37561)) nil (26477 31693 227104 196000) 0 nil])
([nil nil ((#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image81}
	\\caption*{}
\\end{figure}

" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 13 (face font-lock-function-name-face latex-env-pair t fontified t) 13 14 (latex-env-pair t fontified t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (latex-env-pair t fontified t) 106 112 (face font-lock-function-name-face latex-env-pair t fontified t) 112 113 (latex-env-pair t fontified t) 113 115 (fontified t)) . 36832) (undo-tree-id3156 . -114) (undo-tree-id3157 . -114) (undo-tree-id3158 . -114) (undo-tree-id3159 . -114) 36946) nil (26477 31693 227103 755000) 0 nil])
([nil nil ((nil rear-nonsticky nil 36831 . 36832) (#("
" 0 1 (fontified nil)) . -36890) (36831 . 36891)) nil (26477 31693 227101 270000) 0 nil])
([nil nil ((36849 . 36857) (#("Precision" 0 9 (fontified t)) . 36849) (undo-tree-id3155 . -8)) nil (26477 31693 227100 869000) 0 nil])
([nil nil ((36867 . 36869) (36866 . 36867)) nil (26477 31693 227100 88000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t)) . 36871) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1)) nil (26477 31693 227099 807000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t)) . 36871) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1)) nil (26477 31693 227098 425000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . 36871) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1)) nil (26477 31693 227097 383000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t)) . 36871) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1)) nil (26477 31693 227096 261000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t)) . 36871) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1)) nil (26477 31693 227094 798000) 0 nil])
([nil nil ((36887 . 36890) (36871 . 36887)) nil (26477 31693 227074 440000) 0 nil])
([nil nil ((36884 . 36885) (t 26477 31693 235277 724000)) nil (26477 31710 126556 662000) 0 nil])
([nil nil ((36876 . 36877)) nil (26477 31710 126552 414000) 0 nil])
([nil nil ((36883 . 36884) (t 26477 31710 135096 494000)) nil (26477 31806 360386 874000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -36884) (undo-tree-id3172 . -1) (36884 . 36885) (t 26477 31806 370064 169000)) nil (26477 31899 485770 258000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -34314) (t 26477 31806 370064 169000) (34315 . 34316) 34314 (t 26477 31806 370064 169000)) nil (26477 31899 485761 712000) 0 nil])
([nil nil ((nil fontified t 34314 . 34315) (#("7" 0 1 (fontified t)) . -34314) (34315 . 34316) 34314) nil (26477 31899 485757 494000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -24052) (t 26478 11576 882293 147000) (24053 . 24054) 24052 (t 26478 11576 882293 147000)) nil (26478 12665 211961 508000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -25381) (25382 . 25383) 25381) nil (26478 12667 690929 310000) 0 nil] [nil nil ((nil fontified t 24052 . 24053) (#("6" 0 1 (fontified t)) . -24052) (24053 . 24054) 24052) ((#("7" 0 1 (fontified nil)) . 24053) (24052 . 24053) (t 26478 12653 617976 523000)) (26478 12653 583343 76000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -26404) (t 26478 12667 741552 45000) (26405 . 26406) 26404 (t 26478 12667 741552 45000)) nil (26478 12688 648708 429000) 0 nil])
nil
([nil nil ((26487 . 26508) (28577 . 28593) (t 26478 12688 681922 665000)) nil (26478 12697 715758 629000) 0 nil])
([nil nil ((26405 . 26406) (t 26478 12697 748650 149000)) nil (26478 12795 546942 770000) 0 nil])
([nil nil ((25382 . 25383) (t 26478 12795 601708 646000)) nil (26478 12817 593989 595000) 0 nil])
([nil nil ((34014 . 34019) (34014 . 34015) (#("\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image78}
	\\caption*{}
\\end{figure}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 13 (face font-lock-function-name-face latex-env-pair t fontified t) 13 14 (latex-env-pair t fontified t) 14 19 (fontified t) 19 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 47 (face font-lock-keyword-face fontified t) 47 57 (fontified t) 57 67 (face font-lock-keyword-face fontified t) 67 69 (fontified t) 69 86 (face font-lock-builtin-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-keyword-face fontified t) 98 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (latex-env-pair t fontified t) 106 112 (face font-lock-function-name-face latex-env-pair t fontified t) 112 113 (latex-env-pair t fontified t) 113 114 (fontified t)) . 34014) (undo-tree-id13 . -113) (undo-tree-id14 . -113) (undo-tree-id15 . -16) (undo-tree-id16 . -113) (undo-tree-id17 . -113) 34127 (t 26478 12817 649045 805000)) nil (26478 13287 409896 987000) 0 nil])
([nil nil ((34013 . 34014) (#("
" 0 1 (fontified t)) . -34013) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 33971) nil (26478 13287 409891 834000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 34020) (undo-tree-id6 . 1)) nil (26478 13287 409883 282000) 0 nil])
([nil nil ((34020 . 34032) (#("i" 0 1 (fontified nil)) . -34020) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (34019 . 34021)) nil (26478 13287 409877 758000) 0 nil])
([nil nil ((apply -15 33853 33983 undo--wrap-and-run-primitive-undo 33853 33983 ((33966 . 33969) (33950 . 33953) (33889 . 33892) (33874 . 33877) (33853 . 33856)))) nil (26478 13293 490116 521000) 0 nil])
([nil nil ((apply -15 33737 33867 undo--wrap-and-run-primitive-undo 33737 33867 ((33850 . 33853) (33834 . 33837) (33773 . 33776) (33758 . 33761) (33737 . 33740) 33851))) nil (26478 13411 372499 128000) 0 nil] [nil nil ((apply -15 34216 34392 undo--wrap-and-run-primitive-undo 34216 34392 ((34375 . 34378) (34313 . 34316) (34252 . 34255) (34237 . 34240) (34216 . 34219) 34376))) ((apply 15 34216 34377 undo--wrap-and-run-primitive-undo 34216 34377 ((#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 34216) (#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 34237) (#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 34252) (#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 34313) (#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 34375)))) (26478 13293 490020 140000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 33867) (undo-tree-id18 . -1)) nil (26478 13411 372496 12000) 0 nil])
nil
([nil nil ((#("%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/ict/image77}
%% 	\\caption*{}
%% \\end{figure}
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 9 (face font-lock-comment-face fontified t) 9 10 (face font-lock-comment-face fontified t latex-env-pair t) 10 16 (face font-lock-comment-face fontified t latex-env-pair t) 16 17 (face font-lock-comment-face fontified t latex-env-pair t) 17 20 (face font-lock-comment-face fontified t) 20 21 (face font-lock-comment-face fontified t) 21 24 (face font-lock-comment-delimiter-face fontified t) 24 25 (face font-lock-comment-face fontified t) 25 35 (face font-lock-comment-face fontified t) 35 36 (face font-lock-comment-face fontified t) 36 39 (face font-lock-comment-delimiter-face fontified t) 39 40 (face font-lock-comment-face fontified t) 40 56 (face font-lock-comment-face fontified t) 56 66 (face font-lock-comment-face fontified t) 66 76 (face font-lock-comment-face fontified t) 76 78 (face font-lock-comment-face fontified t) 78 95 (face font-lock-comment-face fontified t) 95 97 (face font-lock-comment-face fontified t) 97 100 (face font-lock-comment-delimiter-face fontified t) 100 101 (face font-lock-comment-face fontified t) 101 110 (face font-lock-comment-face fontified t) 110 113 (face font-lock-comment-face fontified t) 113 116 (face font-lock-comment-delimiter-face fontified t) 116 120 (face font-lock-comment-face fontified t) 120 121 (face font-lock-comment-face fontified t latex-env-pair t) 121 127 (face font-lock-comment-face fontified t latex-env-pair t) 127 128 (face font-lock-comment-face fontified t latex-env-pair t) 128 129 (face font-lock-comment-face fontified t)) . 33867) (undo-tree-id71 . -113) (undo-tree-id72 . -128) (undo-tree-id73 . -113) (undo-tree-id74 . -21) (undo-tree-id75 . -21) (undo-tree-id76 . -21) (undo-tree-id77 . -21) (undo-tree-id78 . -21) (undo-tree-id79 . -21) (undo-tree-id80 . -21) (undo-tree-id81 . -21) (undo-tree-id82 . -21) (undo-tree-id83 . -21) (undo-tree-id84 . -21) (undo-tree-id85 . -21) (undo-tree-id86 . -21) (undo-tree-id87 . -21) (undo-tree-id88 . -21) (undo-tree-id89 . -21) (undo-tree-id90 . -21) (undo-tree-id91 . -36) (undo-tree-id92 . -36) (undo-tree-id93 . -36) (undo-tree-id94 . -36) (undo-tree-id95 . -36) (undo-tree-id96 . -97) (undo-tree-id97 . -97) (undo-tree-id98 . -97) (undo-tree-id99 . -97) (undo-tree-id100 . -97) (undo-tree-id101 . -97) (undo-tree-id102 . -97) (undo-tree-id103 . -97) (undo-tree-id104 . -97) (undo-tree-id105 . -97) (undo-tree-id106 . -97) (undo-tree-id107 . -97) (undo-tree-id108 . -97) (undo-tree-id109 . -97) (undo-tree-id110 . -97) (undo-tree-id111 . -97) (undo-tree-id112 . -97) (undo-tree-id113 . -97) (undo-tree-id114 . -97) (undo-tree-id115 . -97) (undo-tree-id116 . -113) (undo-tree-id117 . -113) (undo-tree-id118 . -113) (undo-tree-id119 . -113) (undo-tree-id120 . -113) (undo-tree-id121 . -113) (undo-tree-id122 . -113) (undo-tree-id123 . -113) (undo-tree-id124 . -113) (undo-tree-id125 . -113) (undo-tree-id126 . -113) (undo-tree-id127 . -113) (undo-tree-id128 . -113) (undo-tree-id129 . -113) (undo-tree-id130 . -113) (undo-tree-id131 . -113) (undo-tree-id132 . -113) (undo-tree-id133 . -113) (undo-tree-id134 . -113) (undo-tree-id135 . -113) (undo-tree-id136 . -113) (undo-tree-id137 . -113) (undo-tree-id138 . -113) (undo-tree-id139 . -129) 33980 (t 26478 13411 429021 313000)) nil (26478 13436 997772 735000) 0 nil])
([nil nil ((33880 . 33885) (#("i" 0 1 (fontified nil)) . -33880) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (33878 . 33881) (#("'" 0 1 (face tex-math fontified t)) . -33878) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("'" 0 1 (face tex-math fontified t)) . -33879) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 33880 (nil fontified t 33878 . 33880) (nil face (tex-math subscript) 33878 . 33880) (33878 . 33880) (33868 . 33878)) nil (26478 13436 997630 501000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 33866) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (t 26478 13437 61241 414000)) nil (26478 13441 632878 70000) 0 nil])
([nil nil ((22584 . 46482) (#("_{scaled}$ is a scaled value.

{\\bfseries Feature selection.} The feature selection process is realized
with the use of the Chi-square metric. This metric is a statistical
measure used to estimate the relationship between features and the
target value, providing the degree of their independence. Before
calculating the statistical value of every feature, all of them are
converted to the numerical form. The contingency table is created for
all the features with the following formula (2):

\\begin{equation}
x^2=\\sum\\frac{V_j-U_j)^2}{U_j}
\\end{equation}


where $V_j$ is observed frequency, and $U_j$ is the expected frequency. $U_j$ is computed as (3):

\\begin{equation}
U_j = \\frac{\\text{row\\_total} \\times \\text{column\\_total}}{\\text{grand\\_total}}
\\end{equation}

The features are ordered in a descending way by the calculated
Chi-square values.

{\\bfseries Class balancing.} The vectorized data is checked for balancing.
If the dataset is imbalanced, the special balancing technique called
Random oversampling is applied to the dataset to make classes equal.
This method randomly selects elements from the minority class and
duplicates them to balance the dataset. The duplicated elements are
added to the training set until the number of elements in the minority
class equals the number in the majority class. The class balancing with
the use of Random oversampling is shown in Figure 1.
\\end{multicols}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.6\\textwidth]{media/ict/image38}
	\\caption*{Figure 1-Class balancing with Random oversampling}
\\end{figure}

\\begin{multicols}{2}
{\\bfseries Classification with machine learning and deep learning models.}
When the classes are balanced, the dataset is classified with machine
and deep learning models. There are several such models, among which the
most popular are Decision Tree, Random Forest, XgBoost, Dense neural
network (DNN), Gated recurrent unit (GRU) neural network, and Long
short-term memory (LSTM) neural network.

A Decision Tree {[}12{]} is a supervised machine-learning model for the
classification task. This model is structured like a tree, with internal
nodes representing decisions based on feature values, branches that
demonstrate the outcomes of those decisions, and leaf nodes of the final
prediction and output. The topmost node of the tree presents the entire
dataset, which is the starting point for decision-making and is split
based on the feature that provides the best separation of the data. At
the internal nodes, the dataset is split into two or more subgroups
based on the chosen feature's value. The final nodes do not further
split and correspond to a class label. The structure of the Decision
Tree is shown in Figure 2.
\\end{multicols}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.85\\textwidth]{media/ict/image39}
	\\caption*{Figure 2-Decision Tree}
\\end{figure}

\\begin{multicols}{2}
A Random Forest {[}13{]} is a machine-learning algorithm that is based
on the concept of ensemble learning. It builds multiple decision trees
and combines their results to improve the Accuracy of a single decision
tree. The Random Forest algorithm uses bagging to create multiple
training datasets by randomly sampling from the original dataset with
replacement. Each decision tree is trained on a different bootstrapped
dataset, ensuring the trees are diverse and uncorrelated. Generally, the
Random Forest algorithm has the following specifications:

- It trains pretty quickly.

- It effectively processes datasets with a large number of features.

- It predicts data with very high Accuracy.

- It shows good efficiency even with a large number of missing data.

- It has high scalability.

The structure of Random Forest is shown in Figure 3.
\\end{multicols}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.85\\textwidth]{media/ict/image40}
	\\caption*{Figure 3 - Random Forest}
\\end{figure}

\\begin{multicols}{2}
XGBoost {[}14{]} is a very strong machine-learning algorithm widely used
in the classification task. It lies in a series of boosting algorithms
that combine the predictions of multiple learners. XGBoost is known for
its efficiency and high performance. Employing an ensemble approach
corrects the errors made in previous iterations through the next model.
During each step, the deviations of the ensemble's predictions are
assessed on the training data, and the model is optimized by introducing
new tree forecasts to reduce the overall deviation. This process
continues until the desired error threshold is met or an early stopping
condition is triggered.

A Dense neural network (DNN) {[}15{]} is a fundamental type of neural
network in which each neuron in one layer is connected to every neuron
in the subsequent layer. It is the simplest architecture in neural
networks, typically used as the basic one in deep learning. In this
architecture, the input layer receives the input data $x=x_1,x_2,\\ldots,x_n$, and $w_1,w_2,\\ldots,w_n$ present weights of each level, and $b_1,b_2,\\ldots,b_n$
of the input layer. The hidden layers consist of neurons that apply
weights to the input features, followed by an activation function that
produces non-linearity. There are usually many hidden layers in a neural
network. The output layer shows the final prediction that usually
corresponds to the number of classes: binary (two -- 0 or 1) and
multiclass (three or more). The scheme of DNN is presented in Figure 4.

A Long short-term memory (LSTM) {[}16{]} is a type of Recurrent neural
network designed to effectively capture long-term dependencies in the
sequential data and avoid problems related to the vanishing gradient. An
LSTM cell contains three types of gates: input, forget, and output,
which regulate the stream of information through the whole network. The
forget gate decides which information to discard from the cell state,
while the input gate selects new information to store. The output gate
defines the information that is required to be extracted from the
current cell state.
\\end{multicols}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image44}
	\\caption*{Figure 4 - Dense neural network}
\\end{figure}

The forget gate is calculated as (4):

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image45}
	\\caption*{}
\\end{figure}


\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image46}
	\\caption*{}
\\end{figure}

forget gate output;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image47}
	\\caption*{}
\\end{figure}

activation function;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image48}
	\\caption*{}
\\end{figure}

the forget gate;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image49}
	\\caption*{}
\\end{figure}

state from the previous time step;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image50}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image51}
	\\caption*{}
\\end{figure}

for the forget gate.

The input gate is computed as (5):

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image52}
	\\caption*{}
\\end{figure}


\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image53}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image54}
	\\caption*{}
\\end{figure}

weights for the input gate;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image55}
	\\caption*{}
\\end{figure}

input gate.

The cell state is calculated as (6):

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image56}
	\\caption*{}
\\end{figure}


\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image57}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image58}
	\\caption*{}
\\end{figure}

weights for the cell state;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image59}
	\\caption*{}
\\end{figure}

cell state.

The output gate is computed as (7):

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image60}
	\\caption*{}
\\end{figure}


\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image61}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image62}
	\\caption*{}
\\end{figure}

bias for the output gate.

The scheme of the LSTM model is shown in Figure 5.

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image63}
	\\caption*{Figure 5 - Long short-term memory neural network}
\\end{figure}

A GRU {[}17{]} is another type of Recurrent neural network designed to
capture dependencies in sequential data like LSTM but with a simpler
structure. GRU combines the hidden and cell states into one entity,
making them computationally more efficient than LSTM {[}18{]}. GRU
includes update, reset gates, candidate hidden state, and final hidden
state.

The update gate is calculated as (8):

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image64}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image65}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image47}
	\\caption*{}
\\end{figure}

a sigmoid activation function;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image66}
	\\caption*{}
\\end{figure}

matrix for the update gate.

The reset gate is computed as (9):

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image67}
	\\caption*{}
\\end{figure}


\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image68}
	\\caption*{}
\\end{figure}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image69}
	\\caption*{}
\\end{figure}

a weight matrix for the reset gate;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image70}
	\\caption*{}
\\end{figure}

reset gate.

The hidden state is calculated as (10):

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image71}
	\\caption*{}
\\end{figure}


\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image72}
	\\caption*{}
\\end{figure}

candidate hidden state, which incorporates the current input and the
reset hidden state;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image73}
	\\caption*{}
\\end{figure}

matrix for the candidate hidden state;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image74}
	\\caption*{}
\\end{figure}

for the candidate hidden state;
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image75}
	\\caption*{}
\\end{figure}

element-wise multiplication.

The final hidden state is computed as (11):

%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/ict/image76}
%% 	\\caption*{}
%% \\end{figure}

where $h_t$ is a final hidden state for the current time step; $z_t$ is an update
gate controlling how much of the previous hidden state to keep and how
much of the candidate state to add.

The scheme of the GRU neural network is shown in Figure 6.

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.6\\textwidth]{media/ict/image79}
	\\caption*{Figure 6 - Gated recurrent unit neural network}
\\end{figure}

The machine learning and neural network algorithms presented above have
been widely used and distributed in many works due to their success in
data classification tasks. In this study, they also successfully coped
with the task of malware detection. However, to improve the efficiency
of threat detection, a new hybrid neural network model, which includes
LSTM and GRU layers, was developed. This model combines the advantages
of both architectures for more efficient data processing. The first
recurrent LSTM layer helps model long-term dependencies in data,
revealing patterns~useful for identifying threats. Since LSTM has
memory, it retains information about previous steps, which is especially
important in sequence analysis. The GRU layer follows LSTM and helps
simplify the model training by reducing the number of parameters
compared to LSTM, making it more efficient. The hybrid LSTM-GRU model
uses the advantages of both architectures. The LSTM layer is used as the
first layer to process the data, and the GRU can be used in the next
stage to speed up the training and processing of the output data. This
reduces the training time on large datasets. Overall, the hybrid
LSTM-GRU model offers enough functionality to handle complex models
without overloading the computational resources of the machines. The
scheme of the hybrid LSTM-GRU neural network model is shown in Fig. 7.

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image80}
	\\caption*{Figure 7 - LSTM-GRU neural network}
\\end{figure}

{\\bfseries Results and discussion.} Malware classification experiments
{[}19{]} were tested on the corresponding dataset. First of all, the
dataset was cleaned and preprocessed. Three unmeaning features were
eliminated, while the remaining 55 features were normalized with the
Min-Max scaling technique {[}20{]}. The feature selection algorithm was
applied to the normalized dataset, retrieving the 20 most significant
ones. In total, 3 machine learning (Decision Tree, Random Forest,
XgBoost), 3 deep learning (DNN, LSTM, and GRU), and 1 proposed hybrid
LSTM-GRU deep learning model were used to classify the dataset.

The results were evaluated with the use of 4 measures: Accuracy,
Precision, Recall, and F1-score. Accuracy measures the portion of
correctly classified elements out of the whole number of elements. The
formula for calculating Accuracy is shown in (12):

\\begin{equation}
Accuracy=\\frac{TP+TN}{Total \\text{\\_} number}
\\end{equation}

Precision is the portion of correctly predicted positive elements to the
total elements that were predicted as positive. Precision is computed as
(13):

\\begin{equation}
Precision=\\frac{TP}{TP+FP}
\\end{equation}

Recall is the portion of correctly predicted positive elements to the
total actual positive elements. Recall is computed as (14):

\\begin{equation}
Recall=\\frac{TP}{TP+FN}
\\end{equation}

F1-score is the metric characterizing the balance between Precision and
Recall. F1-score is computed as (15):

\\begin{equation}
F1- score =2\\times\\frac{Precision \\times Recall}{Precision + Recall}
\\end{equation}

The results of classifying the Malware dataset with machine learning and
deep learning models were evaluated with the described metrics, the
histograms, and the Area Under the ROC curve. The AUC-ROC value is in
the range of 0 to 1.0. A value of 1.0 means an ideal classifier; a value
of 0.5 describes random guessing, and a value less than 0.5 identifies a
problematic case.

The results of the experiments that were conducted are shown in Table 1
and Figure 7.

\\begin{table}[H]
\\caption*{Table 1. The values of Malware classification}
\\centering
\\begin{tabular}{|l|l|l|l|l|l|l|l|}
\\hline
Metrics   & Decision Tree & Random Forest & XGBoost & DNN   & LSTM  & GRU   & \\multirow{1}{2cm}{Proposed LSTM-GRU model} \\\\ \\hline
Ассurасy  & 0.988         & 0.992         & 0.989   & 0.959 & 0.972 & 0.971 & 0.986                   \\\\ \\hline
Рrесisiоn & 0.985         & 0.991         & 0.987   & 0.962 & 0.972 & 0.966 & 0.981                   \\\\ \\hline
Rесаll    & 0.991         & 0.993         & 0.991   & 0.957 & 0.972 & 0.976 & 0.989                   \\\\ \\hline
F1-sсоrе  & 0.988         & 0.992         & 0.989   & 0.960 & 0.972 & 0.971 & 0.985                   \\\\ \\hline
\\end{tabular}
\\end{table}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict/image85}
	\\caption*{Figure 7-Histograms and an AUC-ROC curve}
\\end{figure}

\\begin{multicols}{2}
All seven models showed good classification results. The Decision Tree,
Random Forest, and XGBoost machine learning models gave high accuracy
scores. It proves that machine learning algorithms are still strong in
the classification tasks of the cybersecurity field. The Random Forest
model reached scores of 0.99, being the best among other machine
learning models. This proves that Random Forest has always had the
greatest potential in classification tasks. Among neural networks, the
simple DNN model was a little worse than LSTM and GRU by around 0.01.
The recurrent LSTM and GRU models showed mostly identical scores. The
proposed LSTM-GRU model outperformed other deep learning models by 0.01
and demonstrated good tendencies in getting even higher scores in case
of having larger datasets.

{\\bfseries Conclusion.} The fast development of computer technologies has
led to the appearance of a large number of cyber threats that advance in
breaches of security and confidentiality of information systems. The
practical side of this research presents the creation and testing of
malware detection models that can improve the security and resilience of
information systems to modern cyber threats. Malware is one of the most
dangerous threats because many of its forms exist, including viruses,
worms, trojans, spyware, etc. They can rapidly spread in the information
environment. Therefore, effective measures of their detection and
prevention have become especially relevant in the last decade. The
traditional ways of protecting against such cyber threats have become
less significant in recent years. It is necessary to utilize other
advanced methods. This research is based on machine learning algorithms
and deep learning models, which allow the analysis of malware based on
known signatures and identify new, previously unknown threats. The
practical experiments of this research work covered the detection of
malware threats with the use of seven machine learning and deep learning
models, including Decision Tree, Random Forest, XGBoost, DNN, LSTM, GRU,
and the proposed hybrid LSTM-GRU, giving accuracy scores above 0.95. The
LSTM-GRU and Random Forest models reached scores of 0.98 and 0.99, being
very close to the ideal result. It is also planned to extend this
research, adding more experiments to classify various other types of
threats in future works. Therefore, the study demonstrates that using
machine learning and deep learning to analyze malware can improve the
accuracy and reliability of classification and increase the flexibility
of security systems, making them less vulnerable to new, unpredictable
threats.

\\emph{{\\bfseries Financing.} This work was carried out under project
AP19675957, titled ``The research and development of the system for
ensuring the protection of medical data using blockchain technology and
artificial intelligence methods,'' implemented at the Institute of
Information and Computational Technologies.}
\\end{multicols}

\\begin{center}
{\\bfseries References}
\\end{center}

\\begin{references}
\\begin{enumerate}
\\def\\labelenumi{\\arabic{enumi}.}
\\item
  Khando, K., Gao, S., Islam, S. M., \\& Salman, A. Enhancing employees
  information security awareness in private and public organisations: A
  systematic literature review // Computers \\& security. -2021.- Vol.
  106. DOI
  \\href{https://doi.org/10.1016/j.cose.2021.102267}{10.1016/j.cose.2021.102267}.
\\item
  Nissenbaum, H. Protecting privacy in an information age: The problem
  of privacy in public //In The ethics of information technologies.
  Routledge. -2020.- P. 141-178. DOI
  \\href{https://doi.org/10.2307/3505189}{10.2307/3505189}.
\\item
  Shelke, M.V., Deshmukh, J.Y., Ajalkar, D.A., \\& Dhumal, R.B. A Robust
  Ensemble Learning Approach for Malware Detection and Classification //
  Journal of Advanced Research in Applied Sciences and Engineering
  Technology.-2024.-Vol. 48(1).- P. 152-167.
\\end{enumerate}

DOI
\\href{https://doi.org/10.37934/araset.48.1.152167}{10.37934/araset.48.1.152167}.

\\begin{enumerate}
\\def\\labelenumi{\\arabic{enumi}.}
\\setcounter{enumi}{3}
\\item
  Zhao, Q., Chen, S., Liu, Z., Baker, T., \\& Zhang, Y. Blockchain-based
  privacy-preserving remote data integrity checking scheme for IoT
  information systems // Information Processing \\& Management. -2020. -
  Vol. 57(6). \\href{https://doi.org/10.1016/j.ipm.2020.102355}{DOI
  10.1016/j.ipm.2020.102355}.
\\item
  Tun Li, Ya Luo, Xin Wan, Qian Li, Qilie Liu, Rong Wang, Chaolong Jia,
  Yunpeng Xiao. A malware detection model based on imbalanced
  heterogeneous graph embeddings // Expert Systems with
  Applications.-2024.-Vol. 246. 123109. DOI
  \\href{https://doi.org/10.1016/j.eswa.2023.123109}{10.1016/j.eswa.2023.123109}.
\\item
  Caixia Gao, Yao Du, Fan Ma, Qiuyan Lan, Jianying Chen, Jingjing Wu. A
  new adversarial malware detection method based on enhanced lightweight
  neural network // Computers \\& Security. -2024. -Vol. 147. DOI
  \\href{https://doi.org/10.1016/j.cose.2024.104078}{10.1016/j.cose.2024.104078}.
\\item
  Wira Zanoramy, Mohd Faizal Abdollah, Othman Abdollah, \\& S.M. Warusia
  Mohamed S.M.M. Ransomware Early Detection using Machine Learning
  Approach and Pre-Encryption Boundary Identification // Journal of
  Advanced Research in Applied Sciences and Engineering Technology.
  -2024. -Vol. 47(2).- P. 121 - 137. DOI
  \\href{https://doi.org/10.37934/araset.47.2.121137}{10.37934/araset.47.2.121137}.
\\item
  Hossain, M.A., Islam, M.S. Enhanced detection of obfuscated malware in
  memory dumps: a machine learning approach for advanced cybersecurity
  // Cybersecurity. -2024. -Vol. 7(16).
\\end{enumerate}

DOI
\\href{https://doi.org/10.1186/s42400-024-00205-z}{10.1186/s42400-024-00205-z}.

\\begin{enumerate}
\\def\\labelenumi{\\arabic{enumi}.}
\\setcounter{enumi}{8}
\\item
  Mosleh M. Abualhaj, Ahmad Sami Al-Shamayleh, Alhamza Munther, Sumaya
  Nabil Alkhatib, Mohammad O. Hiari, Mohammed Anbar\\emph{.} Enhancing
  spyware detection by utilizing decision trees with hyperparameter
  optimization // Bulletin of Electrical Engineering and Informatics.
  -2022. -Vol. 13(5). - P. 3653-3662. DOI
  \\href{https://doi.org/10.11591/eei.v13i5.7939}{10.11591/eei.v13i5.7939}.
\\item
  Ahmad Heryanto, Deris Stiawan, Adi Hermansyah, Rici Firnando, Hanna
  Pertiwi, Mohd Yazid Bin Idris, Rahmat Budiarto The incorporation of
  stacked long short-term memory into intrusion detection systems for
  botnet attack classification // IAES International Journal of
  Artificial Intelligence. -2024. -Vol. 13(3).- P. 3657-3670. DOI
  \\href{https://doi.org/10.11591/ijai.v13.i3.pp3657-3670}{10.11591/ijai.v13.i3.pp3657-3670}.
\\item
  Aso Mafakheri, Sadegh Sulaimany. Android malware detection through
  centrality analysis of applications network//Applied Soft Computing.
  -2024.-Vol. 165.
\\end{enumerate}

DOI
\\href{https://doi.org/10.1016/j.asoc.2024.112058}{10.1016/j.asoc.2024.112058}.

\\begin{enumerate}
\\def\\labelenumi{\\arabic{enumi}.}
\\setcounter{enumi}{11}
\\item
  Singh, D., \\& Singh, B. Investigating the impact of data normalization
  on classification performance // Applied Soft Computing. -2020. -Vol.
  97. DOI
  \\href{https://doi.org/10.1016/j.asoc.2019.105524}{10.1016/j.asoc.2019.105524}.
\\item
  Andelic, N., \\& Baressi Šegota, S. Development of symbolic expressions
  ensemble for breast cancer type classification using genetic
  programming symbolic classifier and decision tree classifier //
  Cancers. -2023. - Vol. 15(13). DOI
  \\href{https://doi.org/10.3390/cancers15133411}{10.3390/cancers15133411}.
\\item
  Manzali, Y., \\& Elfar, M. Random forest pruning techniques: a recent
  review // In Operations research forum. -2023. -Vol. 4(43). DOI
  \\href{https://doi.org/10.1007/s43069-023-00223-6}{10.1007/s43069-023-00223-6}.
\\item
  Hariharan, B., Siva, R., Sadagopan, S., Mishra, V., \\& Raghav, Y.
  Malware Detection Using XGBoost based Machine Learning Models-Review
  // In 2023 2nd International Conference on Edge Computing and
  Applications (ICECAA). -2023. -P. 964-970.
\\end{enumerate}

DOI
\\href{https://doi.org/10.1109/ICECAA58104.2023.10212327}{10.1109/ICECAA58104.2023.10212327}.

\\begin{enumerate}
\\def\\labelenumi{\\arabic{enumi}.}
\\setcounter{enumi}{15}
\\item
  Gupta, K., Jiwani, N., Sharif, M. H. U., Datta, R., \\& Afreen, N. A
  Neural Network Approach For Malware Classification // In 2022
  International Conference on Computing, Communication, and Intelligent
  Systems (ICCCIS). -2022. -P. 681-684.
\\end{enumerate}

DOI
\\href{https://doi.org/10.1109/ICCCIS56430.2022.10037653}{10.1109/ICCCIS56430.2022.10037653}.

\\begin{enumerate}
\\def\\labelenumi{\\arabic{enumi}.}
\\setcounter{enumi}{16}
\\item
  Catak, F. O., Ahmed, J., Sahinbas, K., \\& Khand, Z. H. Data
  augmentation based malware detection using convolutional neural
  networks // Peerj computer science. - 2021.
\\end{enumerate}

DOI \\href{https://doi.org/10.7717/peerj-cs.346}{10.7717/peerj-cs.346}.

\\begin{enumerate}
\\def\\labelenumi{\\arabic{enumi}.}
\\setcounter{enumi}{17}
\\item
  Thakur, P., Kansal, V., \\& Rishiwal, V. Hybrid deep learning approach
  based on lstm and cnn for malware detection // Wireless Personal
  Communications. -2024. -Vol. 136(3). - P.1879-1901. DOI
  \\href{https://doi.org/10.1007/s11277-024-11366-y}{10.1007/s11277-024-11366-y}.
\\item
  Kolli, S., Balakesavareddy, P., \\& Saravanan, D. Neural Network based
  Obfuscated Malware detection // In 2021 International Conference on
  System, Computation, Automation and Networking (ICSCAN). -2021. DOI
  \\href{https://doi.org/10.1109/ICSCAN53069.2021.9526496}{10.1109/ICSCAN53069.2021.9526496}.
\\item
  Ussatova, O., Zhumabekova, A., Begimbayeva, Y., Matson, E. T., \\&
  Ussatov, N. Comprehensive DDoS Attack Classification Using Machine
  Learning Algorithms // Computers, Materials \\& Continua. -2022. -Vol.
  73(1). - P. 577-594. DOI
  \\href{https://doi.org/10.32604/cmc.2022.026552}{10.32604/cmc.2022.026552}.
\\item
  Ussatova, O., Zhumabekova, A., Karyukin, V., Matson, E. T., Ussatov,
  N. The development of a model for the threat detection system with the
  use of machine learning and neural network methods //International
  Journal of Innovative Research and Scientific Studies. -2024.-Vol.
  7(3). -P. 863- 877. DOI
  " 0 1 (face tex-math fontified t) 1 9 (display (raise -0.2) face (tex-math subscript) fontified t) 9 10 (face tex-math fontified t) 10 32 (fontified t) 32 41 (face font-lock-keyword-face fontified t) 41 60 (face (bold) fontified t) 60 281 (fontified t) 281 304 (fontified t) 304 492 (fontified t) 492 498 (face font-lock-keyword-face fontified t) 498 499 (latex-env-pair t fontified t) 499 507 (face font-lock-function-name-face latex-env-pair t fontified t) 507 508 (latex-env-pair t fontified t) 508 511 (fontified t) 511 512 (face (superscript) display (raise 0.2) fontified t) 512 513 (fontified t) 513 517 (face font-lock-keyword-face fontified t) 517 522 (face font-lock-keyword-face fontified t) 522 525 (fontified t) 525 526 (face (subscript) display (raise -0.2) fontified t) 526 529 (fontified t) 529 530 (face (subscript) display (raise -0.2) fontified t) 530 532 (fontified t) 532 533 (face (superscript) display (raise 0.2) fontified t) 533 537 (fontified t) 537 538 (face (subscript) display (raise -0.2) fontified t) 538 540 (fontified t) 540 544 (face font-lock-keyword-face fontified t) 544 545 (latex-env-pair t fontified t) 545 553 (face font-lock-function-name-face latex-env-pair t fontified t) 553 554 (latex-env-pair t fontified t) 554 563 (fontified t) 563 566 (face tex-math fontified t) 566 567 (display (raise -0.2) face (tex-math subscript) fontified t) 567 568 (face tex-math fontified t) 568 596 (fontified t) 596 599 (face tex-math fontified t) 599 600 (display (raise -0.2) face (tex-math subscript) fontified t) 600 601 (face tex-math fontified t) 601 629 (fontified t) 629 632 (face tex-math fontified t) 632 633 (display (raise -0.2) face (tex-math subscript) fontified t) 633 634 (face tex-math fontified t) 634 656 (fontified t) 656 662 (face font-lock-keyword-face fontified t) 662 663 (latex-env-pair t fontified t) 663 671 (face font-lock-function-name-face latex-env-pair t fontified t) 671 672 (latex-env-pair t fontified t) 672 675 (fontified t) 675 676 (face (subscript) display (raise -0.2) fontified t) 676 679 (fontified t) 679 684 (face font-lock-keyword-face fontified t) 684 685 (fontified t) 685 690 (face font-lock-keyword-face fontified t) 690 694 (fontified t) 694 696 (face font-lock-keyword-face fontified t) 696 703 (fontified t) 703 709 (face font-lock-keyword-face fontified t) 709 710 (fontified t) 710 715 (face font-lock-keyword-face fontified t) 715 722 (fontified t) 722 724 (face font-lock-keyword-face fontified t) 724 732 (fontified t) 732 737 (face font-lock-keyword-face fontified t) 737 743 (fontified t) 743 745 (face font-lock-keyword-face fontified t) 745 753 (fontified t) 753 757 (face font-lock-keyword-face fontified t) 757 758 (latex-env-pair t fontified t) 758 766 (face font-lock-function-name-face latex-env-pair t fontified t) 766 767 (latex-env-pair t fontified t) 767 853 (fontified t) 853 862 (face font-lock-keyword-face fontified t) 862 879 (face (bold) fontified t) 879 1395 (fontified t) 1395 1399 (face font-lock-keyword-face fontified t) 1399 1400 (latex-env-pair t fontified t) 1400 1409 (face font-lock-function-name-face latex-env-pair t fontified t) 1409 1410 (latex-env-pair t fontified t) 1410 1412 (fontified t) 1412 1418 (face font-lock-keyword-face fontified t) 1418 1419 (latex-env-pair t fontified t) 1419 1425 (face font-lock-function-name-face latex-env-pair t fontified t) 1425 1426 (latex-env-pair t fontified t) 1426 1431 (fontified t) 1431 1441 (face font-lock-keyword-face fontified t) 1441 1442 (fontified t) 1442 1443 (fontified t) 1443 1459 (face font-lock-keyword-face fontified t) 1459 1468 (fontified t) 1468 1469 (fontified t) 1469 1479 (face font-lock-keyword-face fontified t) 1479 1481 (fontified t) 1481 1498 (face font-lock-builtin-face fontified t) 1498 1500 (fontified t) 1500 1501 (fontified t) 1501 1510 (face font-lock-keyword-face fontified t) 1510 1562 (fontified t) 1562 1566 (face font-lock-keyword-face fontified t) 1566 1567 (fontified t latex-env-pair t) 1567 1573 (face font-lock-function-name-face fontified t latex-env-pair t) 1573 1574 (fontified t latex-env-pair t) 1574 1576 (fontified t) 1576 1582 (face font-lock-keyword-face fontified t) 1582 1583 (fontified t latex-env-pair t) 1583 1592 (face font-lock-function-name-face fontified t latex-env-pair t) 1592 1593 (fontified t latex-env-pair t) 1593 1598 (fontified t) 1598 1607 (face font-lock-keyword-face fontified t) 1607 1670 (face (bold) fontified t) 1670 1804 (fontified t) 1804 1815 (fontified t) 1815 2724 (fontified t) 2724 2728 (face font-lock-keyword-face fontified t) 2728 2729 (fontified t latex-env-pair t) 2729 2738 (face font-lock-function-name-face fontified t latex-env-pair t) 2738 2739 (fontified t latex-env-pair t) 2739 2741 (fontified t) 2741 2747 (face font-lock-keyword-face fontified t) 2747 2748 (fontified t latex-env-pair t) 2748 2754 (face font-lock-function-name-face fontified t latex-env-pair t) 2754 2755 (fontified t latex-env-pair t) 2755 2760 (fontified t) 2760 2770 (face font-lock-keyword-face fontified t) 2770 2771 (fontified t) 2771 2772 (fontified t) 2772 2788 (face font-lock-keyword-face fontified t) 2788 2797 (fontified t) 2797 2799 (fontified t) 2799 2809 (face font-lock-keyword-face fontified t) 2809 2811 (fontified t) 2811 2828 (face font-lock-builtin-face fontified t) 2828 2830 (fontified t) 2830 2831 (fontified t) 2831 2840 (face font-lock-keyword-face fontified t) 2840 2865 (fontified t) 2865 2869 (face font-lock-keyword-face fontified t) 2869 2870 (fontified t latex-env-pair t) 2870 2876 (face font-lock-function-name-face fontified t latex-env-pair t) 2876 2877 (fontified t latex-env-pair t) 2877 2879 (fontified t) 2879 2885 (face font-lock-keyword-face fontified t) 2885 2886 (fontified t latex-env-pair t) 2886 2895 (face font-lock-function-name-face fontified t latex-env-pair t) 2895 2896 (fontified t latex-env-pair t) 2896 3001 (fontified t) 3001 3042 (fontified t) 3042 3316 (fontified t) 3316 3321 (fontified t) 3321 3748 (fontified t) 3748 3752 (face font-lock-keyword-face fontified t) 3752 3753 (fontified t latex-env-pair t) 3753 3762 (face font-lock-function-name-face fontified t latex-env-pair t) 3762 3763 (fontified t latex-env-pair t) 3763 3765 (fontified t) 3765 3771 (face font-lock-keyword-face fontified t) 3771 3772 (fontified t latex-env-pair t) 3772 3778 (face font-lock-function-name-face fontified t latex-env-pair t) 3778 3779 (fontified t latex-env-pair t) 3779 3784 (fontified t) 3784 3794 (face font-lock-keyword-face fontified t) 3794 3795 (fontified t) 3795 3796 (fontified t) 3796 3812 (face font-lock-keyword-face fontified t) 3812 3821 (fontified t) 3821 3823 (fontified t) 3823 3833 (face font-lock-keyword-face fontified t) 3833 3835 (fontified t) 3835 3852 (face font-lock-builtin-face fontified t) 3852 3854 (fontified t) 3854 3855 (fontified t) 3855 3864 (face font-lock-keyword-face fontified t) 3864 3891 (fontified t) 3891 3895 (face font-lock-keyword-face fontified t) 3895 3896 (fontified t latex-env-pair t) 3896 3902 (face font-lock-function-name-face fontified t latex-env-pair t) 3902 3903 (fontified t latex-env-pair t) 3903 3904 (fontified t) 3904 3905 (fontified t) 3905 3911 (face font-lock-keyword-face fontified t) 3911 3912 (fontified t latex-env-pair t) 3912 3921 (face font-lock-function-name-face fontified t latex-env-pair t) 3921 3922 (fontified t latex-env-pair t) 3922 3926 (fontified t) 3926 3999 (fontified t) 3999 4070 (fontified t) 4070 4142 (fontified t) 4142 4210 (fontified t) 4210 4282 (fontified t) 4282 4330 (fontified t) 4330 4349 (fontified t) 4349 4422 (fontified t) 4422 4487 (fontified t) 4487 4559 (fontified t) 4559 4564 (fontified t) 4564 4583 (fontified t) 4583 4584 (fontified t) 4584 4654 (fontified t) 4654 4725 (fontified t) 4725 4779 (fontified t) 4779 4792 (fontified t) 4792 4843 (fontified t) 4843 4860 (fontified t) 4860 4914 (fontified t) 4914 4919 (face tex-math fontified t) 4919 4920 (face (tex-math subscript) fontified t display (raise -0.2)) 4920 4923 (face tex-math fontified t) 4923 4924 (face (tex-math subscript) fontified t display (raise -0.2)) 4924 4934 (face tex-math fontified t) 4934 4935 (face (tex-math subscript) fontified t display (raise -0.2)) 4935 4936 (face tex-math fontified t) 4936 4942 (fontified t) 4942 4945 (face tex-math fontified t) 4945 4946 (face (tex-math subscript) fontified t display (raise -0.2)) 4946 4949 (face tex-math fontified t) 4949 4950 (face (tex-math subscript) fontified t display (raise -0.2)) 4950 4960 (face tex-math fontified t) 4960 4961 (face (tex-math subscript) fontified t display (raise -0.2)) 4961 4962 (face tex-math fontified t) 4962 4998 (fontified t) 4998 5001 (face tex-math fontified t) 5001 5002 (face (tex-math subscript) fontified t display (raise -0.2)) 5002 5005 (face tex-math fontified t) 5005 5006 (face (tex-math subscript) fontified t display (raise -0.2)) 5006 5016 (face tex-math fontified t) 5016 5017 (face (tex-math subscript) fontified t display (raise -0.2)) 5017 5018 (face tex-math fontified t) 5018 5019 (fontified t) 5019 5073 (fontified t) 5073 5317 (fontified t) 5317 5362 (fontified t) 5362 5375 (fontified t) 5375 5434 (fontified t) 5434 5849 (fontified t) 5849 5859 (fontified t) 5859 6016 (fontified t) 6016 6020 (face font-lock-keyword-face fontified t) 6020 6021 (fontified t latex-env-pair t) 6021 6030 (face font-lock-function-name-face fontified t latex-env-pair t) 6030 6031 (fontified t latex-env-pair t) 6031 6032 (fontified t) 6032 6033 (fontified t) 6033 6039 (face font-lock-keyword-face fontified t) 6039 6040 (fontified t latex-env-pair t) 6040 6046 (face font-lock-function-name-face fontified t latex-env-pair t) 6046 6047 (fontified t latex-env-pair t) 6047 6052 (fontified t) 6052 6062 (face font-lock-keyword-face fontified t) 6062 6064 (fontified t) 6064 6080 (face font-lock-keyword-face fontified t) 6080 6090 (fontified t) 6090 6100 (face font-lock-keyword-face fontified t) 6100 6102 (fontified t) 6102 6119 (face font-lock-builtin-face fontified t) 6119 6122 (fontified t) 6122 6131 (face font-lock-keyword-face fontified t) 6131 6165 (fontified t) 6165 6169 (face font-lock-keyword-face fontified t) 6169 6170 (fontified t latex-env-pair t) 6170 6176 (face font-lock-function-name-face fontified t latex-env-pair t) 6176 6177 (fontified t latex-env-pair t) 6177 6218 (fontified t) 6218 6224 (face font-lock-keyword-face fontified t) 6224 6225 (fontified t latex-env-pair t) 6225 6231 (face font-lock-function-name-face fontified t latex-env-pair t) 6231 6232 (fontified t latex-env-pair t) 6232 6237 (fontified t) 6237 6247 (face font-lock-keyword-face fontified t) 6247 6249 (fontified t) 6249 6265 (face font-lock-keyword-face fontified t) 6265 6275 (fontified t) 6275 6279 (face font-lock-keyword-face fontified t) 6279 6285 (face font-lock-keyword-face fontified t) 6285 6287 (fontified t) 6287 6304 (face font-lock-builtin-face fontified t) 6304 6306 (fontified t) 6306 6307 (fontified t) 6307 6316 (face font-lock-keyword-face fontified t) 6316 6319 (fontified t) 6319 6323 (face font-lock-keyword-face fontified t) 6323 6324 (fontified t latex-env-pair t) 6324 6330 (face font-lock-function-name-face fontified t latex-env-pair t) 6330 6331 (fontified t latex-env-pair t) 6331 6334 (fontified t) 6334 6340 (face font-lock-keyword-face fontified t) 6340 6341 (fontified t latex-env-pair t) 6341 6347 (face font-lock-function-name-face fontified t latex-env-pair t) 6347 6348 (fontified t latex-env-pair t) 6348 6353 (fontified t) 6353 6363 (face font-lock-keyword-face fontified t) 6363 6365 (fontified t) 6365 6381 (face font-lock-keyword-face fontified t) 6381 6391 (fontified t) 6391 6401 (face font-lock-keyword-face fontified t) 6401 6403 (fontified t) 6403 6420 (face font-lock-builtin-face fontified t) 6420 6423 (fontified t) 6423 6432 (face font-lock-keyword-face fontified t) 6432 6435 (fontified t) 6435 6439 (face font-lock-keyword-face fontified t) 6439 6440 (fontified t latex-env-pair t) 6440 6446 (face font-lock-function-name-face fontified t latex-env-pair t) 6446 6447 (fontified t latex-env-pair t) 6447 6469 (fontified t) 6469 6475 (face font-lock-keyword-face fontified t) 6475 6476 (fontified t latex-env-pair t) 6476 6482 (face font-lock-function-name-face fontified t latex-env-pair t) 6482 6483 (fontified t latex-env-pair t) 6483 6488 (fontified t) 6488 6498 (face font-lock-keyword-face fontified t) 6498 6500 (fontified t) 6500 6516 (face font-lock-keyword-face fontified t) 6516 6526 (fontified t) 6526 6536 (face font-lock-keyword-face fontified t) 6536 6538 (fontified t) 6538 6555 (face font-lock-builtin-face fontified t) 6555 6558 (fontified t) 6558 6567 (face font-lock-keyword-face fontified t) 6567 6570 (fontified t) 6570 6573 (face font-lock-keyword-face fontified t) 6573 6574 (face font-lock-keyword-face fontified t) 6574 6575 (fontified t latex-env-pair t) 6575 6581 (face font-lock-function-name-face fontified t latex-env-pair t) 6581 6582 (fontified t latex-env-pair t) 6582 6583 (fontified t) 6583 6605 (fontified t) 6605 6611 (face font-lock-keyword-face fontified t) 6611 6612 (fontified t latex-env-pair t) 6612 6618 (face font-lock-function-name-face fontified t latex-env-pair t) 6618 6619 (fontified t latex-env-pair t) 6619 6624 (fontified t) 6624 6634 (face font-lock-keyword-face fontified t) 6634 6636 (fontified t) 6636 6652 (face font-lock-keyword-face fontified t) 6652 6662 (fontified t) 6662 6672 (face font-lock-keyword-face fontified t) 6672 6674 (fontified t) 6674 6691 (face font-lock-builtin-face fontified t) 6691 6694 (fontified t) 6694 6703 (face font-lock-keyword-face fontified t) 6703 6706 (fontified t) 6706 6710 (face font-lock-keyword-face fontified t) 6710 6711 (fontified t latex-env-pair t) 6711 6717 (face font-lock-function-name-face fontified t latex-env-pair t) 6717 6718 (fontified t latex-env-pair t) 6718 6737 (fontified t) 6737 6743 (face font-lock-keyword-face fontified t) 6743 6744 (fontified t latex-env-pair t) 6744 6750 (face font-lock-function-name-face fontified t latex-env-pair t) 6750 6751 (fontified t latex-env-pair t) 6751 6756 (fontified t) 6756 6766 (face font-lock-keyword-face fontified t) 6766 6768 (fontified t) 6768 6784 (face font-lock-keyword-face fontified t) 6784 6794 (fontified t) 6794 6804 (face font-lock-keyword-face fontified t) 6804 6806 (fontified t) 6806 6823 (face font-lock-builtin-face fontified t) 6823 6826 (fontified t) 6826 6835 (face font-lock-keyword-face fontified t) 6835 6838 (fontified t) 6838 6842 (face font-lock-keyword-face fontified t) 6842 6843 (fontified t latex-env-pair t) 6843 6849 (face font-lock-function-name-face fontified t latex-env-pair t) 6849 6850 (fontified t latex-env-pair t) 6850 6887 (fontified t) 6887 6893 (face font-lock-keyword-face fontified t) 6893 6894 (fontified t latex-env-pair t) 6894 6900 (face font-lock-function-name-face fontified t latex-env-pair t) 6900 6901 (fontified t latex-env-pair t) 6901 6906 (fontified t) 6906 6916 (face font-lock-keyword-face fontified t) 6916 6918 (fontified t) 6918 6934 (face font-lock-keyword-face fontified t) 6934 6944 (fontified t) 6944 6950 (face font-lock-keyword-face fontified t) 6950 6954 (face font-lock-keyword-face fontified t) 6954 6956 (fontified t) 6956 6973 (face font-lock-builtin-face fontified t) 6973 6975 (fontified t) 6975 6976 (fontified t) 6976 6985 (face font-lock-keyword-face fontified t) 6985 6988 (fontified t) 6988 6992 (face font-lock-keyword-face fontified t) 6992 6993 (fontified t latex-env-pair t) 6993 6999 (face font-lock-function-name-face fontified t latex-env-pair t) 6999 7000 (fontified t latex-env-pair t) 7000 7002 (fontified t) 7002 7008 (face font-lock-keyword-face fontified t) 7008 7009 (fontified t latex-env-pair t) 7009 7015 (face font-lock-function-name-face fontified t latex-env-pair t) 7015 7016 (fontified t latex-env-pair t) 7016 7021 (fontified t) 7021 7031 (face font-lock-keyword-face fontified t) 7031 7033 (fontified t) 7033 7049 (face font-lock-keyword-face fontified t) 7049 7059 (fontified t) 7059 7069 (face font-lock-keyword-face fontified t) 7069 7071 (fontified t) 7071 7088 (face font-lock-builtin-face fontified t) 7088 7091 (fontified t) 7091 7100 (face font-lock-keyword-face fontified t) 7100 7103 (fontified t) 7103 7107 (face font-lock-keyword-face fontified t) 7107 7108 (fontified t latex-env-pair t) 7108 7114 (face font-lock-function-name-face fontified t latex-env-pair t) 7114 7115 (fontified t latex-env-pair t) 7115 7175 (fontified t) 7175 7181 (face font-lock-keyword-face fontified t) 7181 7182 (fontified t latex-env-pair t) 7182 7188 (face font-lock-function-name-face fontified t latex-env-pair t) 7188 7189 (fontified t latex-env-pair t) 7189 7194 (fontified t) 7194 7204 (face font-lock-keyword-face fontified t) 7204 7206 (fontified t) 7206 7222 (face font-lock-keyword-face fontified t) 7222 7232 (fontified t) 7232 7242 (face font-lock-keyword-face fontified t) 7242 7244 (fontified t) 7244 7261 (face font-lock-builtin-face fontified t) 7261 7264 (fontified t) 7264 7273 (face font-lock-keyword-face fontified t) 7273 7276 (fontified t) 7276 7280 (face font-lock-keyword-face fontified t) 7280 7281 (fontified t latex-env-pair t) 7281 7287 (face font-lock-function-name-face fontified t latex-env-pair t) 7287 7288 (fontified t latex-env-pair t) 7288 7291 (fontified t) 7291 7297 (face font-lock-keyword-face fontified t) 7297 7298 (fontified t latex-env-pair t) 7298 7304 (face font-lock-function-name-face fontified t latex-env-pair t) 7304 7305 (fontified t latex-env-pair t) 7305 7310 (fontified t) 7310 7320 (face font-lock-keyword-face fontified t) 7320 7322 (fontified t) 7322 7338 (face font-lock-keyword-face fontified t) 7338 7348 (fontified t) 7348 7358 (face font-lock-keyword-face fontified t) 7358 7359 (fontified t) 7359 7360 (fontified t) 7360 7377 (fontified t face font-lock-builtin-face) 7377 7379 (fontified t) 7379 7380 (fontified t) 7380 7389 (face font-lock-keyword-face fontified t) 7389 7392 (fontified t) 7392 7396 (face font-lock-keyword-face fontified t) 7396 7397 (fontified t latex-env-pair t) 7397 7403 (face font-lock-function-name-face fontified t latex-env-pair t) 7403 7404 (fontified t latex-env-pair t) 7404 7406 (fontified t) 7406 7412 (face font-lock-keyword-face fontified t) 7412 7413 (fontified t latex-env-pair t) 7413 7419 (face font-lock-function-name-face fontified t latex-env-pair t) 7419 7420 (fontified t latex-env-pair t) 7420 7425 (fontified t) 7425 7435 (face font-lock-keyword-face fontified t) 7435 7437 (fontified t) 7437 7453 (face font-lock-keyword-face fontified t) 7453 7463 (fontified t) 7463 7473 (face font-lock-keyword-face fontified t) 7473 7475 (fontified t) 7475 7492 (face font-lock-builtin-face fontified t) 7492 7495 (fontified t) 7495 7504 (face font-lock-keyword-face fontified t) 7504 7507 (fontified t) 7507 7511 (face font-lock-keyword-face fontified t) 7511 7512 (fontified t latex-env-pair t) 7512 7516 (face font-lock-function-name-face fontified t latex-env-pair t) 7516 7518 (face font-lock-function-name-face fontified t latex-env-pair t) 7518 7519 (fontified t latex-env-pair t) 7519 7520 (fontified t) 7520 7549 (fontified t) 7549 7555 (face font-lock-keyword-face fontified t) 7555 7556 (fontified t latex-env-pair t) 7556 7562 (face font-lock-function-name-face fontified t latex-env-pair t) 7562 7563 (fontified t latex-env-pair t) 7563 7568 (fontified t) 7568 7578 (face font-lock-keyword-face fontified t) 7578 7580 (fontified t) 7580 7596 (face font-lock-keyword-face fontified t) 7596 7606 (fontified t) 7606 7616 (face font-lock-keyword-face fontified t) 7616 7618 (fontified t) 7618 7635 (face font-lock-builtin-face fontified t) 7635 7638 (fontified t) 7638 7647 (face font-lock-keyword-face fontified t) 7647 7650 (fontified t) 7650 7654 (face font-lock-keyword-face fontified t) 7654 7655 (fontified t latex-env-pair t) 7655 7661 (face font-lock-function-name-face fontified t latex-env-pair t) 7661 7662 (fontified t latex-env-pair t) 7662 7715 (fontified t) 7715 7721 (face font-lock-keyword-face fontified t) 7721 7722 (fontified t latex-env-pair t) 7722 7728 (face font-lock-function-name-face fontified t latex-env-pair t) 7728 7729 (fontified t latex-env-pair t) 7729 7734 (fontified t) 7734 7744 (face font-lock-keyword-face fontified t) 7744 7746 (fontified t) 7746 7762 (face font-lock-keyword-face fontified t) 7762 7772 (fontified t) 7772 7782 (face font-lock-keyword-face fontified t) 7782 7784 (fontified t) 7784 7801 (face font-lock-builtin-face fontified t) 7801 7804 (fontified t) 7804 7806 (face font-lock-keyword-face fontified t) 7806 7813 (face font-lock-keyword-face fontified t) 7813 7816 (fontified t) 7816 7820 (face font-lock-keyword-face fontified t) 7820 7821 (latex-env-pair t fontified t) 7821 7827 (face font-lock-function-name-face latex-env-pair t fontified t) 7827 7828 (latex-env-pair t fontified t) 7828 7831 (fontified t) 7831 7837 (face font-lock-keyword-face fontified t) 7837 7838 (latex-env-pair t fontified t) 7838 7844 (face font-lock-function-name-face latex-env-pair t fontified t) 7844 7845 (latex-env-pair t fontified t) 7845 7850 (fontified t) 7850 7860 (face font-lock-keyword-face fontified t) 7860 7862 (fontified t) 7862 7878 (face font-lock-keyword-face fontified t) 7878 7888 (fontified t) 7888 7898 (face font-lock-keyword-face fontified t) 7898 7900 (fontified t) 7900 7917 (face font-lock-builtin-face fontified t) 7917 7920 (fontified t) 7920 7929 (face font-lock-keyword-face fontified t) 7929 7932 (fontified t) 7932 7936 (face font-lock-keyword-face fontified t) 7936 7937 (latex-env-pair t fontified t) 7937 7943 (face font-lock-function-name-face latex-env-pair t fontified t) 7943 7944 (latex-env-pair t fontified t) 7944 7946 (fontified t) 7946 7952 (face font-lock-keyword-face fontified t) 7952 7953 (latex-env-pair t fontified t) 7953 7959 (face font-lock-function-name-face latex-env-pair t fontified t) 7959 7960 (latex-env-pair t fontified t) 7960 7965 (fontified t) 7965 7975 (face font-lock-keyword-face fontified t) 7975 7977 (fontified t) 7977 7993 (face font-lock-keyword-face fontified t) 7993 8003 (fontified t) 8003 8013 (face font-lock-keyword-face fontified t) 8013 8015 (fontified t) 8015 8032 (face font-lock-builtin-face fontified t) 8032 8035 (fontified t) 8035 8044 (face font-lock-keyword-face fontified t) 8044 8047 (fontified t) 8047 8051 (face font-lock-keyword-face fontified t) 8051 8052 (latex-env-pair t fontified t) 8052 8058 (face font-lock-function-name-face latex-env-pair t fontified t) 8058 8059 (latex-env-pair t fontified t) 8059 8089 (fontified t) 8089 8095 (face font-lock-keyword-face fontified t) 8095 8096 (latex-env-pair t fontified t) 8096 8102 (face font-lock-function-name-face latex-env-pair t fontified t) 8102 8103 (latex-env-pair t fontified t) 8103 8108 (fontified t) 8108 8118 (face font-lock-keyword-face fontified t) 8118 8120 (fontified t) 8120 8136 (face font-lock-keyword-face fontified t) 8136 8146 (fontified t) 8146 8156 (face font-lock-keyword-face fontified t) 8156 8158 (fontified t) 8158 8175 (face font-lock-builtin-face fontified t) 8175 8178 (fontified t) 8178 8187 (face font-lock-keyword-face fontified t) 8187 8190 (fontified t) 8190 8194 (face font-lock-keyword-face fontified t) 8194 8195 (latex-env-pair t fontified t) 8195 8201 (face font-lock-function-name-face latex-env-pair t fontified t) 8201 8202 (latex-env-pair t fontified t) 8202 8254 (fontified t) 8254 8260 (face font-lock-keyword-face fontified t) 8260 8261 (latex-env-pair t fontified t) 8261 8267 (face font-lock-function-name-face latex-env-pair t fontified t) 8267 8268 (latex-env-pair t fontified t) 8268 8273 (fontified t) 8273 8283 (face font-lock-keyword-face fontified t) 8283 8285 (fontified t) 8285 8301 (face font-lock-keyword-face fontified t) 8301 8311 (fontified t) 8311 8321 (face font-lock-keyword-face fontified t) 8321 8323 (fontified t) 8323 8340 (face font-lock-builtin-face fontified t) 8340 8343 (fontified t) 8343 8352 (face font-lock-keyword-face fontified t) 8352 8355 (fontified t) 8355 8359 (face font-lock-keyword-face fontified t) 8359 8360 (latex-env-pair t fontified t) 8360 8366 (face font-lock-function-name-face latex-env-pair t fontified t) 8366 8367 (latex-env-pair t fontified t) 8367 8370 (fontified t) 8370 8376 (face font-lock-keyword-face fontified t) 8376 8377 (latex-env-pair t fontified t) 8377 8383 (face font-lock-function-name-face latex-env-pair t fontified t) 8383 8384 (latex-env-pair t fontified t) 8384 8389 (fontified t) 8389 8399 (face font-lock-keyword-face fontified t) 8399 8401 (fontified t) 8401 8417 (face font-lock-keyword-face fontified t) 8417 8427 (fontified t) 8427 8437 (face font-lock-keyword-face fontified t) 8437 8439 (fontified t) 8439 8456 (face font-lock-builtin-face fontified t) 8456 8459 (fontified t) 8459 8468 (face font-lock-keyword-face fontified t) 8468 8471 (fontified t) 8471 8475 (face font-lock-keyword-face fontified t) 8475 8476 (latex-env-pair t fontified t) 8476 8482 (face font-lock-function-name-face latex-env-pair t fontified t) 8482 8483 (latex-env-pair t fontified t) 8483 8485 (fontified t) 8485 8491 (face font-lock-keyword-face fontified t) 8491 8492 (latex-env-pair t fontified t) 8492 8498 (face font-lock-function-name-face latex-env-pair t fontified t) 8498 8499 (latex-env-pair t fontified t) 8499 8504 (fontified t) 8504 8514 (face font-lock-keyword-face fontified t) 8514 8516 (fontified t) 8516 8532 (face font-lock-keyword-face fontified t) 8532 8542 (fontified t) 8542 8552 (face font-lock-keyword-face fontified t) 8552 8554 (fontified t) 8554 8571 (face font-lock-builtin-face fontified t) 8571 8574 (fontified t) 8574 8583 (face font-lock-keyword-face fontified t) 8583 8586 (fontified t) 8586 8590 (face font-lock-keyword-face fontified t) 8590 8591 (latex-env-pair t fontified t) 8591 8597 (face font-lock-function-name-face latex-env-pair t fontified t) 8597 8598 (latex-env-pair t fontified t) 8598 8679 (fontified t) 8679 8685 (face font-lock-keyword-face fontified t) 8685 8686 (latex-env-pair t fontified t) 8686 8692 (face font-lock-function-name-face latex-env-pair t fontified t) 8692 8693 (latex-env-pair t fontified t) 8693 8698 (fontified t) 8698 8708 (face font-lock-keyword-face fontified t) 8708 8710 (fontified t) 8710 8726 (face font-lock-keyword-face fontified t) 8726 8736 (fontified t) 8736 8746 (face font-lock-keyword-face fontified t) 8746 8748 (fontified t) 8748 8765 (face font-lock-builtin-face fontified t) 8765 8768 (fontified t) 8768 8777 (face font-lock-keyword-face fontified t) 8777 8828 (fontified t) 8828 8832 (face font-lock-keyword-face fontified t) 8832 8833 (latex-env-pair t fontified t) 8833 8839 (face font-lock-function-name-face latex-env-pair t fontified t) 8839 8840 (latex-env-pair t fontified t) 8840 8879 (fontified t) 8879 8913 (fontified t) 8913 9235 (fontified t) 9235 9241 (face font-lock-keyword-face fontified t) 9241 9242 (latex-env-pair t fontified t) 9242 9248 (face font-lock-function-name-face latex-env-pair t fontified t) 9248 9249 (latex-env-pair t fontified t) 9249 9254 (fontified t) 9254 9264 (face font-lock-keyword-face fontified t) 9264 9266 (fontified t) 9266 9282 (face font-lock-keyword-face fontified t) 9282 9292 (fontified t) 9292 9302 (face font-lock-keyword-face fontified t) 9302 9304 (fontified t) 9304 9321 (face font-lock-builtin-face fontified t) 9321 9324 (fontified t) 9324 9333 (face font-lock-keyword-face fontified t) 9333 9336 (fontified t) 9336 9340 (face font-lock-keyword-face fontified t) 9340 9341 (latex-env-pair t fontified t) 9341 9347 (face font-lock-function-name-face latex-env-pair t fontified t) 9347 9348 (latex-env-pair t fontified t) 9348 9350 (fontified t) 9350 9356 (face font-lock-keyword-face fontified t) 9356 9357 (latex-env-pair t fontified t) 9357 9363 (face font-lock-function-name-face latex-env-pair t fontified t) 9363 9364 (latex-env-pair t fontified t) 9364 9369 (fontified t) 9369 9379 (face font-lock-keyword-face fontified t) 9379 9381 (fontified t) 9381 9397 (face font-lock-keyword-face fontified t) 9397 9407 (fontified t) 9407 9417 (face font-lock-keyword-face fontified t) 9417 9419 (fontified t) 9419 9436 (face font-lock-builtin-face fontified t) 9436 9439 (fontified t) 9439 9448 (face font-lock-keyword-face fontified t) 9448 9451 (fontified t) 9451 9455 (face font-lock-keyword-face fontified t) 9455 9456 (latex-env-pair t fontified t) 9456 9462 (face font-lock-function-name-face latex-env-pair t fontified t) 9462 9463 (latex-env-pair t fontified t) 9463 9465 (fontified t) 9465 9471 (face font-lock-keyword-face fontified t) 9471 9472 (latex-env-pair t fontified t) 9472 9478 (face font-lock-function-name-face latex-env-pair t fontified t) 9478 9479 (latex-env-pair t fontified t) 9479 9484 (fontified t) 9484 9494 (face font-lock-keyword-face fontified t) 9494 9496 (fontified t) 9496 9512 (face font-lock-keyword-face fontified t) 9512 9522 (fontified t) 9522 9532 (face font-lock-keyword-face fontified t) 9532 9534 (fontified t) 9534 9551 (face font-lock-builtin-face fontified t) 9551 9554 (fontified t) 9554 9563 (face font-lock-keyword-face fontified t) 9563 9566 (fontified t) 9566 9570 (face font-lock-keyword-face fontified t) 9570 9571 (latex-env-pair t fontified t) 9571 9577 (face font-lock-function-name-face latex-env-pair t fontified t) 9577 9578 (latex-env-pair t fontified t) 9578 9611 (fontified t) 9611 9617 (face font-lock-keyword-face fontified t) 9617 9618 (latex-env-pair t fontified t) 9618 9624 (face font-lock-function-name-face latex-env-pair t fontified t) 9624 9625 (latex-env-pair t fontified t) 9625 9630 (fontified t) 9630 9640 (face font-lock-keyword-face fontified t) 9640 9642 (fontified t) 9642 9658 (face font-lock-keyword-face fontified t) 9658 9668 (fontified t) 9668 9678 (face font-lock-keyword-face fontified t) 9678 9680 (fontified t) 9680 9697 (face font-lock-builtin-face fontified t) 9697 9700 (fontified t) 9700 9709 (face font-lock-keyword-face fontified t) 9709 9712 (fontified t) 9712 9716 (face font-lock-keyword-face fontified t) 9716 9717 (latex-env-pair t fontified t) 9717 9723 (face font-lock-function-name-face latex-env-pair t fontified t) 9723 9724 (latex-env-pair t fontified t) 9724 9791 (fontified t) 9791 9797 (face font-lock-keyword-face fontified t) 9797 9798 (latex-env-pair t fontified t) 9798 9804 (face font-lock-function-name-face latex-env-pair t fontified t) 9804 9805 (latex-env-pair t fontified t) 9805 9810 (fontified t) 9810 9820 (face font-lock-keyword-face fontified t) 9820 9822 (fontified t) 9822 9838 (face font-lock-keyword-face fontified t) 9838 9848 (fontified t) 9848 9858 (face font-lock-keyword-face fontified t) 9858 9860 (fontified t) 9860 9877 (face font-lock-builtin-face fontified t) 9877 9880 (fontified t) 9880 9889 (face font-lock-keyword-face fontified t) 9889 9892 (fontified t) 9892 9896 (face font-lock-keyword-face fontified t) 9896 9897 (latex-env-pair t fontified t) 9897 9903 (face font-lock-function-name-face latex-env-pair t fontified t) 9903 9904 (latex-env-pair t fontified t) 9904 9907 (fontified t) 9907 9913 (face font-lock-keyword-face fontified t) 9913 9914 (latex-env-pair t fontified t) 9914 9920 (face font-lock-function-name-face latex-env-pair t fontified t) 9920 9921 (latex-env-pair t fontified t) 9921 9926 (fontified t) 9926 9936 (face font-lock-keyword-face fontified t) 9936 9938 (fontified t) 9938 9954 (face font-lock-keyword-face fontified t) 9954 9964 (fontified t) 9964 9974 (face font-lock-keyword-face fontified t) 9974 9976 (fontified t) 9976 9993 (face font-lock-builtin-face fontified t) 9993 9996 (fontified t) 9996 10005 (face font-lock-keyword-face fontified t) 10005 10008 (fontified t) 10008 10012 (face font-lock-keyword-face fontified t) 10012 10013 (latex-env-pair t fontified t) 10013 10019 (face font-lock-function-name-face latex-env-pair t fontified t) 10019 10020 (latex-env-pair t fontified t) 10020 10022 (fontified t) 10022 10028 (face font-lock-keyword-face fontified t) 10028 10029 (latex-env-pair t fontified t) 10029 10035 (face font-lock-function-name-face latex-env-pair t fontified t) 10035 10036 (latex-env-pair t fontified t) 10036 10041 (fontified t) 10041 10051 (face font-lock-keyword-face fontified t) 10051 10053 (fontified t) 10053 10069 (face font-lock-keyword-face fontified t) 10069 10079 (fontified t) 10079 10089 (face font-lock-keyword-face fontified t) 10089 10091 (fontified t) 10091 10108 (face font-lock-builtin-face fontified t) 10108 10111 (fontified t) 10111 10120 (face font-lock-keyword-face fontified t) 10120 10123 (fontified t) 10123 10127 (face font-lock-keyword-face fontified t) 10127 10128 (latex-env-pair t fontified t) 10128 10134 (face font-lock-function-name-face latex-env-pair t fontified t) 10134 10135 (latex-env-pair t fontified t) 10135 10173 (fontified t) 10173 10179 (face font-lock-keyword-face fontified t) 10179 10180 (latex-env-pair t fontified t) 10180 10186 (face font-lock-function-name-face latex-env-pair t fontified t) 10186 10187 (latex-env-pair t fontified t) 10187 10192 (fontified t) 10192 10202 (face font-lock-keyword-face fontified t) 10202 10204 (fontified t) 10204 10220 (face font-lock-keyword-face fontified t) 10220 10230 (fontified t) 10230 10240 (face font-lock-keyword-face fontified t) 10240 10242 (fontified t) 10242 10259 (face font-lock-builtin-face fontified t) 10259 10262 (fontified t) 10262 10271 (face font-lock-keyword-face fontified t) 10271 10274 (fontified t) 10274 10278 (face font-lock-keyword-face fontified t) 10278 10279 (latex-env-pair t fontified t) 10279 10285 (face font-lock-function-name-face latex-env-pair t fontified t) 10285 10286 (latex-env-pair t fontified t) 10286 10342 (fontified t) 10342 10348 (face font-lock-keyword-face fontified t) 10348 10349 (latex-env-pair t fontified t) 10349 10355 (face font-lock-function-name-face latex-env-pair t fontified t) 10355 10356 (latex-env-pair t fontified t) 10356 10361 (fontified t) 10361 10371 (face font-lock-keyword-face fontified t) 10371 10373 (fontified t) 10373 10389 (face font-lock-keyword-face fontified t) 10389 10399 (fontified t) 10399 10409 (face font-lock-keyword-face fontified t) 10409 10411 (fontified t) 10411 10413 (face font-lock-builtin-face fontified t) 10413 10428 (fontified t face font-lock-builtin-face) 10428 10430 (fontified t) 10430 10431 (fontified t) 10431 10440 (face font-lock-keyword-face fontified t) 10440 10443 (fontified t) 10443 10447 (face font-lock-keyword-face fontified t) 10447 10448 (latex-env-pair t fontified t) 10448 10454 (face font-lock-function-name-face latex-env-pair t fontified t) 10454 10455 (latex-env-pair t fontified t) 10455 10458 (fontified t) 10458 10464 (face font-lock-keyword-face fontified t) 10464 10465 (latex-env-pair t fontified t) 10465 10471 (face font-lock-function-name-face latex-env-pair t fontified t) 10471 10472 (latex-env-pair t fontified t) 10472 10477 (fontified t) 10477 10487 (face font-lock-keyword-face fontified t) 10487 10489 (fontified t) 10489 10505 (face font-lock-keyword-face fontified t) 10505 10515 (fontified t) 10515 10525 (face font-lock-keyword-face fontified t) 10525 10527 (fontified t) 10527 10544 (face font-lock-builtin-face fontified t) 10544 10547 (fontified t) 10547 10556 (face font-lock-keyword-face fontified t) 10556 10559 (fontified t) 10559 10563 (face font-lock-keyword-face fontified t) 10563 10564 (latex-env-pair t fontified t) 10564 10570 (face font-lock-function-name-face latex-env-pair t fontified t) 10570 10571 (latex-env-pair t fontified t) 10571 10662 (fontified t) 10662 10668 (face font-lock-keyword-face fontified t) 10668 10669 (latex-env-pair t fontified t) 10669 10675 (face font-lock-function-name-face latex-env-pair t fontified t) 10675 10676 (latex-env-pair t fontified t) 10676 10681 (fontified t) 10681 10691 (face font-lock-keyword-face fontified t) 10691 10693 (fontified t) 10693 10709 (face font-lock-keyword-face fontified t) 10709 10719 (fontified t) 10719 10729 (face font-lock-keyword-face fontified t) 10729 10731 (fontified t) 10731 10748 (face font-lock-builtin-face fontified t) 10748 10751 (fontified t) 10751 10760 (face font-lock-keyword-face fontified t) 10760 10763 (fontified t) 10763 10767 (face font-lock-keyword-face fontified t) 10767 10768 (latex-env-pair t fontified t) 10768 10774 (face font-lock-function-name-face latex-env-pair t fontified t) 10774 10775 (latex-env-pair t fontified t) 10775 10816 (fontified t) 10816 10822 (face font-lock-keyword-face fontified t) 10822 10823 (latex-env-pair t fontified t) 10823 10829 (face font-lock-function-name-face latex-env-pair t fontified t) 10829 10830 (latex-env-pair t fontified t) 10830 10835 (fontified t) 10835 10845 (face font-lock-keyword-face fontified t) 10845 10847 (fontified t) 10847 10863 (face font-lock-keyword-face fontified t) 10863 10873 (fontified t) 10873 10883 (face font-lock-keyword-face fontified t) 10883 10885 (fontified t) 10885 10902 (face font-lock-builtin-face fontified t) 10902 10905 (fontified t) 10905 10914 (face font-lock-keyword-face fontified t) 10914 10917 (fontified t) 10917 10921 (face font-lock-keyword-face fontified t) 10921 10922 (latex-env-pair t fontified t) 10922 10928 (face font-lock-function-name-face latex-env-pair t fontified t) 10928 10929 (latex-env-pair t fontified t) 10929 10963 (fontified t) 10963 10969 (face font-lock-keyword-face fontified t) 10969 10970 (latex-env-pair t fontified t) 10970 10976 (face font-lock-function-name-face latex-env-pair t fontified t) 10976 10977 (latex-env-pair t fontified t) 10977 10982 (fontified t) 10982 10992 (face font-lock-keyword-face fontified t) 10992 10994 (fontified t) 10994 11010 (face font-lock-keyword-face fontified t) 11010 11020 (fontified t) 11020 11030 (face font-lock-keyword-face fontified t) 11030 11032 (fontified t) 11032 11049 (face font-lock-builtin-face fontified t) 11049 11052 (fontified t) 11052 11061 (face font-lock-keyword-face fontified t) 11061 11064 (fontified t) 11064 11068 (face font-lock-keyword-face fontified t) 11068 11069 (latex-env-pair t fontified t) 11069 11075 (face font-lock-function-name-face latex-env-pair t fontified t) 11075 11076 (latex-env-pair t fontified t) 11076 11153 (fontified t) 11153 11156 (face font-lock-comment-delimiter-face fontified t) 11156 11162 (face font-lock-comment-face fontified t) 11162 11163 (face font-lock-comment-face latex-env-pair t fontified t) 11163 11169 (face font-lock-comment-face latex-env-pair t fontified t) 11169 11170 (face font-lock-comment-face latex-env-pair t fontified t) 11170 11174 (face font-lock-comment-face fontified t) 11174 11177 (face font-lock-comment-delimiter-face fontified t) 11177 11178 (face font-lock-comment-face fontified t) 11178 11188 (face font-lock-comment-face fontified t) 11188 11189 (face font-lock-comment-face fontified t) 11189 11192 (face font-lock-comment-delimiter-face fontified t) 11192 11193 (face font-lock-comment-face fontified t) 11193 11209 (face font-lock-comment-face fontified t) 11209 11219 (face font-lock-comment-face fontified t) 11219 11229 (face font-lock-comment-face fontified t) 11229 11231 (face font-lock-comment-face fontified t) 11231 11248 (face font-lock-comment-face fontified t) 11248 11250 (face font-lock-comment-face fontified t) 11250 11253 (face font-lock-comment-delimiter-face fontified t) 11253 11254 (face font-lock-comment-face fontified t) 11254 11263 (face font-lock-comment-face fontified t) 11263 11266 (face font-lock-comment-face fontified t) 11266 11269 (face font-lock-comment-delimiter-face fontified t) 11269 11273 (face font-lock-comment-face fontified t) 11273 11274 (face font-lock-comment-face fontified t latex-env-pair t) 11274 11280 (face font-lock-comment-face fontified t latex-env-pair t) 11280 11281 (face font-lock-comment-face fontified t latex-env-pair t) 11281 11282 (face font-lock-comment-face fontified t) 11282 11283 (fontified t) 11283 11289 (fontified t) 11289 11292 (face tex-math fontified t) 11292 11293 (face (tex-math subscript) fontified t display (raise -0.2)) 11293 11294 (face tex-math fontified t) 11294 11300 (fontified t) 11300 11301 (fontified t display nil) 11301 11345 (fontified t) 11345 11346 (fontified t) 11346 11347 (face tex-math fontified t) 11347 11349 (face tex-math fontified t) 11349 11350 (face (tex-math subscript) fontified t display (raise -0.2)) 11350 11351 (face tex-math fontified t) 11351 11364 (fontified t) 11364 11365 (fontified t) 11365 11435 (fontified t) 11435 11436 (fontified t) 11436 11533 (fontified t) 11533 11539 (face font-lock-keyword-face fontified t) 11539 11540 (fontified t latex-env-pair t) 11540 11546 (face font-lock-function-name-face fontified t latex-env-pair t) 11546 11547 (fontified t latex-env-pair t) 11547 11551 (fontified t) 11551 11552 (fontified t) 11552 11562 (face font-lock-keyword-face fontified t) 11562 11563 (fontified t) 11563 11564 (fontified t) 11564 11580 (face font-lock-keyword-face fontified t) 11580 11590 (fontified t) 11590 11600 (face font-lock-keyword-face fontified t) 11600 11602 (fontified t) 11602 11619 (face font-lock-builtin-face fontified t) 11619 11621 (fontified t) 11621 11622 (fontified t) 11622 11631 (face font-lock-keyword-face fontified t) 11631 11680 (fontified t) 11680 11684 (face font-lock-keyword-face fontified t) 11684 11685 (fontified t latex-env-pair t) 11685 11691 (face font-lock-function-name-face fontified t latex-env-pair t) 11691 11692 (fontified t latex-env-pair t) 11692 11693 (fontified t) 11693 11750 (fontified t) 11750 11766 (fontified t) 11766 12652 (fontified t) 12652 12670 (fontified t) 12670 12690 (fontified t) 12690 12691 (fontified t) 12691 12739 (fontified t) 12739 12768 (fontified t) 12768 12783 (fontified t) 12783 12799 (fontified t) 12799 12810 (fontified t) 13084 13090 (face font-lock-keyword-face) 13090 13091 (latex-env-pair t) 13091 13097 (face font-lock-function-name-face latex-env-pair t) 13097 13098 (latex-env-pair t) 13103 13113 (face font-lock-keyword-face) 13115 13131 (face font-lock-keyword-face) 13141 13151 (face font-lock-keyword-face) 13153 13170 (face font-lock-builtin-face) 13173 13182 (face font-lock-keyword-face) 13219 13223 (face font-lock-keyword-face) 13223 13224 (latex-env-pair t) 13224 13230 (face font-lock-function-name-face latex-env-pair t) 13230 13231 (latex-env-pair t) 13234 13243 (face font-lock-keyword-face) 13243 13266 (face (bold)) 13266 13267 (face (bold)) 14107 14113 (face font-lock-keyword-face) 14113 14114 (latex-env-pair t) 14114 14122 (face font-lock-function-name-face latex-env-pair t) 14122 14123 (latex-env-pair t) 14133 14138 (face font-lock-keyword-face) 14152 14157 (face font-lock-keyword-face) 14158 14160 (face font-lock-keyword-face) 14170 14174 (face font-lock-keyword-face) 14174 14175 (latex-env-pair t) 14175 14183 (face font-lock-function-name-face latex-env-pair t) 14183 14184 (latex-env-pair t) 14339 14345 (face font-lock-keyword-face) 14345 14346 (latex-env-pair t) 14346 14354 (face font-lock-function-name-face latex-env-pair t) 14354 14355 (latex-env-pair t) 14366 14371 (face font-lock-keyword-face) 14383 14387 (face font-lock-keyword-face) 14387 14388 (latex-env-pair t) 14388 14396 (face font-lock-function-name-face latex-env-pair t) 14396 14397 (latex-env-pair t) 14530 14536 (face font-lock-keyword-face) 14536 14537 (latex-env-pair t) 14537 14545 (face font-lock-function-name-face latex-env-pair t) 14545 14546 (latex-env-pair t) 14554 14559 (face font-lock-keyword-face) 14571 14575 (face font-lock-keyword-face) 14575 14576 (latex-env-pair t) 14576 14584 (face font-lock-function-name-face latex-env-pair t) 14584 14585 (latex-env-pair t) 14698 14704 (face font-lock-keyword-face) 14704 14705 (latex-env-pair t) 14705 14713 (face font-lock-function-name-face latex-env-pair t) 14713 14714 (latex-env-pair t) 14727 14733 (face font-lock-keyword-face) 14733 14738 (face font-lock-keyword-face) 14749 14755 (face font-lock-keyword-face) 14784 14788 (face font-lock-keyword-face) 14788 14789 (latex-env-pair t) 14789 14797 (face font-lock-function-name-face latex-env-pair t) 14797 14798 (latex-env-pair t) 15263 15269 (face font-lock-keyword-face) 15269 15270 (latex-env-pair t) 15270 15275 (face font-lock-function-name-face latex-env-pair t) 15275 15276 (latex-env-pair t) 15280 15289 (face font-lock-keyword-face) 15337 15347 (face font-lock-keyword-face) 15348 15354 (face font-lock-keyword-face) 15354 15355 (latex-env-pair t) 15355 15362 (face font-lock-function-name-face latex-env-pair t) 15362 15363 (latex-env-pair t) 15383 15389 (face font-lock-keyword-face) 15468 15477 (face font-lock-keyword-face) 15511 15513 (face font-lock-warning-face) 15514 15520 (face font-lock-keyword-face) 15623 15625 (face font-lock-warning-face) 15626 15632 (face font-lock-keyword-face) 15735 15737 (face font-lock-warning-face) 15738 15744 (face font-lock-keyword-face) 15847 15849 (face font-lock-warning-face) 15850 15856 (face font-lock-keyword-face) 15959 15961 (face font-lock-warning-face) 15962 15968 (face font-lock-keyword-face) 15969 15973 (face font-lock-keyword-face) 15973 15974 (latex-env-pair t) 15974 15981 (face font-lock-function-name-face latex-env-pair t) 15981 15982 (latex-env-pair t) 15983 15987 (face font-lock-keyword-face) 15987 15988 (latex-env-pair t) 15988 15993 (face font-lock-function-name-face latex-env-pair t) 15993 15994 (latex-env-pair t) 15996 16002 (face font-lock-keyword-face) 16002 16003 (latex-env-pair t) 16003 16009 (face font-lock-function-name-face latex-env-pair t) 16009 16010 (latex-env-pair t) 16015 16025 (face font-lock-keyword-face) 16027 16043 (face font-lock-keyword-face) 16053 16063 (face font-lock-keyword-face) 16065 16082 (face font-lock-builtin-face) 16085 16094 (face font-lock-keyword-face) 16137 16141 (face font-lock-keyword-face) 16141 16142 (latex-env-pair t) 16142 16148 (face font-lock-function-name-face latex-env-pair t) 16148 16149 (latex-env-pair t) 16151 16157 (face font-lock-keyword-face) 16157 16158 (latex-env-pair t) 16158 16167 (face font-lock-function-name-face latex-env-pair t) 16167 16168 (latex-env-pair t) 16971 16980 (face font-lock-keyword-face) 16980 16992 (face (bold))) . 22584) (undo-tree-id0 . -11282) (undo-tree-id1 . -11282) (undo-tree-id2 . -11282) (undo-tree-id3 . -1468) (undo-tree-id4 . -11282) (undo-tree-id5 . 15106) (undo-tree-id6 . -11282) (undo-tree-id7 . -11282) (undo-tree-id8 . 15088) (undo-tree-id9 . -11547) (undo-tree-id10 . -11680) (undo-tree-id11 . -11282) (undo-tree-id12 . -11282) (undo-tree-id13 . -10680) (undo-tree-id14 . -10931) (t 26478 13441 668101 245000)) nil (26482 9422 580319 918000) 0 nil])
([nil nil ((20 . 64) 19 (t 26482 8606 886748 263000)) nil (26482 9422 580286 502000) 0 nil])
([nil nil ((15967 . 15971) (#("url" 0 3 (fontified t face font-lock-keyword-face)) . 15967) (undo-tree-id15 . -2) (t 26482 9422 639587 542000)) nil (26482 10112 658337 816000) 0 nil])
([nil nil ((16055 . 16057)) nil (26482 10112 658329 58000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16073 . 16074) (nil fontified nil 16056 . 16074) (16056 . 16074) 16055) nil (26482 10162 198366 151000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 16 (face font-lock-function-name-face latex-env-pair t fontified t) 16 17 (latex-env-pair t fontified t) 17 18 (fontified t)) . 39390) (undo-tree-id144 . -11) (undo-tree-id145 . -17) (undo-tree-id146 . -11) (undo-tree-id147 . -11) 39401 (t 26482 10112 705402 364000)) nil (26482 10228 443468 43000) 0 nil] [nil nil ((#("\\begin{references}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 17 (face font-lock-function-name-face latex-env-pair t fontified t) 17 18 (latex-env-pair t fontified t) 18 19 (fontified t)) . 39371) (undo-tree-id16 . -18) (undo-tree-id17 . -11) (undo-tree-id18 . -11) (undo-tree-id19 . -11) (undo-tree-id20 . -11) (undo-tree-id21 . -11) (undo-tree-id22 . -11) (undo-tree-id23 . -11) (undo-tree-id24 . -11) (undo-tree-id25 . -11) (undo-tree-id26 . -11) (undo-tree-id27 . -11) (undo-tree-id28 . -11) (undo-tree-id29 . -11) (undo-tree-id30 . -11) (undo-tree-id31 . -11) (undo-tree-id32 . -11) (undo-tree-id33 . -11) (undo-tree-id34 . -11) (undo-tree-id35 . -11) (undo-tree-id36 . -11) (undo-tree-id37 . -11) (undo-tree-id38 . -11) (undo-tree-id39 . -11) (undo-tree-id40 . -11) (undo-tree-id41 . -11) (undo-tree-id42 . -11) (undo-tree-id43 . -11) (undo-tree-id44 . -11) (undo-tree-id45 . -11) (undo-tree-id46 . -11) (undo-tree-id47 . -11) (undo-tree-id48 . -11) (undo-tree-id49 . -11) (undo-tree-id50 . -11) (undo-tree-id51 . -19) 39382 (t 26482 10112 705402 364000)) ((39371 . 39390)) (26482 10162 198098 751000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 39390) (undo-tree-id142 . -32) (undo-tree-id143 . -11) 39401) nil (26482 10228 443464 269000) 0 nil])
nil
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 40290) (undo-tree-id140 . -15) (undo-tree-id141 . -4) 40294) nil (26482 10228 443462 312000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 16 (face font-lock-function-name-face fontified t latex-env-pair t) 16 17 (fontified t latex-env-pair t) 17 18 (fontified t)) . 40290) (undo-tree-id138 . -17) (undo-tree-id139 . -4) 40294) nil (26482 10228 443460 542000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 40290) (undo-tree-id136 . -32) (undo-tree-id137 . -4) 40294) nil (26482 10228 443458 737000) 0 nil])
([nil nil ((#("\\setcounter{enumi}{3}
" 0 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 21 (fontified t) 21 22 (fontified t)) . 40290) (undo-tree-id132 . -21) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) 40294) nil (26482 10228 443456 950000) 0 nil])
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 41817) (undo-tree-id130 . -15) (undo-tree-id131 . -4) 41821) nil (26482 10228 443453 956000) 0 nil])
([nil nil ((41817 . 41821)) nil (26482 10228 443452 240000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 16 (face font-lock-function-name-face fontified t latex-env-pair t) 16 17 (fontified t latex-env-pair t) 17 18 (fontified t)) . 41905) (undo-tree-id129 . -17)) nil (26482 10228 443451 717000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 41905) (undo-tree-id128 . -32)) nil (26482 10228 443450 656000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 41904)) nil (26482 10228 443449 454000) 0 nil])
([nil nil ((#("\\setcounter{enumi}{8}
" 0 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 21 (fontified t) 21 22 (fontified t)) . 41904) (undo-tree-id127 . -21)) nil (26482 10228 443448 980000) 0 nil])
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 42992) (undo-tree-id126 . -15)) nil (26482 10228 443448 38000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 16 (face font-lock-function-name-face fontified t latex-env-pair t) 16 17 (fontified t latex-env-pair t) 17 18 (fontified t)) . 42992) (undo-tree-id125 . -17)) nil (26482 10228 443446 135000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 42992) (undo-tree-id124 . -32)) nil (26482 10228 443445 112000) 0 nil])
([nil nil ((#("\\setcounter{enumi}{11}
" 0 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 22 (fontified t) 22 23 (fontified t)) . 42992) (undo-tree-id123 . -22)) nil (26482 10228 443443 992000) 0 nil])
([nil nil ((44032 . 44036)) nil (26482 10228 443442 917000) 0 nil])
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 44133) (undo-tree-id121 . -15) (undo-tree-id122 . -16)) nil (26482 10228 443442 362000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 16 (face font-lock-function-name-face fontified t latex-env-pair t) 16 17 (fontified t latex-env-pair t) 17 18 (fontified t)) . 44133) (undo-tree-id118 . -17) (undo-tree-id119 . -17) (undo-tree-id120 . -18)) nil (26482 10228 443440 541000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 44133) (undo-tree-id115 . -32) (undo-tree-id116 . -32) (undo-tree-id117 . -33)) nil (26482 10228 443438 252000) 0 nil])
([nil nil ((#("\\setcounter{enumi}{15}
" 0 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 22 (fontified t) 22 23 (fontified t)) . 44133) (undo-tree-id112 . -22) (undo-tree-id113 . -22) (undo-tree-id114 . -23)) nil (26482 10228 443436 181000) 0 nil])
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 44482) (undo-tree-id110 . -15) (undo-tree-id111 . -16)) nil (26482 10228 443434 112000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 16 (face font-lock-function-name-face fontified t latex-env-pair t) 16 17 (fontified t latex-env-pair t) 17 18 (fontified t)) . 44482) (undo-tree-id107 . -17) (undo-tree-id108 . -17) (undo-tree-id109 . -18)) nil (26482 10228 443432 93000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 44482) (undo-tree-id104 . -32) (undo-tree-id105 . -32) (undo-tree-id106 . -33)) nil (26482 10228 443429 862000) 0 nil])
([nil nil ((#("\\setcounter{enumi}{16}
" 0 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 22 (fontified t) 22 23 (fontified t)) . 44482) (undo-tree-id103 . -22)) nil (26482 10228 443426 254000) 0 nil])
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 44733) (undo-tree-id91 . -15) (undo-tree-id92 . -16) (undo-tree-id93 . -16) (undo-tree-id94 . -16) (undo-tree-id95 . -16) (undo-tree-id96 . -16) (undo-tree-id97 . -16) (undo-tree-id98 . -16) (undo-tree-id99 . -16) (undo-tree-id100 . -16) (undo-tree-id101 . -16) (undo-tree-id102 . -16)) nil (26482 10228 443424 897000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 16 (face font-lock-function-name-face fontified t latex-env-pair t) 16 17 (fontified t latex-env-pair t) 17 18 (fontified t)) . 44733) (undo-tree-id73 . -17) (undo-tree-id74 . -18) (undo-tree-id75 . -18) (undo-tree-id76 . -18) (undo-tree-id77 . -18) (undo-tree-id78 . -18) (undo-tree-id79 . -18) (undo-tree-id80 . -18) (undo-tree-id81 . -18) (undo-tree-id82 . -18) (undo-tree-id83 . -18) (undo-tree-id84 . -18) (undo-tree-id85 . -18) (undo-tree-id86 . -18) (undo-tree-id87 . -18) (undo-tree-id88 . -18) (undo-tree-id89 . -17) (undo-tree-id90 . -18)) nil (26482 10228 443417 448000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 44733) (undo-tree-id54 . -32) (undo-tree-id55 . -33) (undo-tree-id56 . -33) (undo-tree-id57 . -33) (undo-tree-id58 . -33) (undo-tree-id59 . -33) (undo-tree-id60 . -33) (undo-tree-id61 . -33) (undo-tree-id62 . -33) (undo-tree-id63 . -33) (undo-tree-id64 . -33) (undo-tree-id65 . -33) (undo-tree-id66 . -33) (undo-tree-id67 . -33) (undo-tree-id68 . -33) (undo-tree-id69 . -33) (undo-tree-id70 . -33) (undo-tree-id71 . -32) (undo-tree-id72 . -33)) nil (26482 10228 443406 147000) 0 nil])
([nil nil ((#("\\setcounter{enumi}{17}
" 0 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 22 (fontified t) 22 23 (fontified t)) . 44733) (undo-tree-id53 . -22)) nil (26482 10228 443390 719000) 0 nil])
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 46042) (undo-tree-id52 . -15)) nil (26482 10228 443996 810000) 0 nil])
([nil nil ((nil fontified t 45568 . 45570) (nil fontified t 45567 . 45568) (nil face font-lock-keyword-face 45567 . 45568) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -45567) (45574 . 45577) (nil fontified t 45253 . 45255) (nil fontified t 45252 . 45253) (nil face font-lock-keyword-face 45252 . 45253) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -45252) (45259 . 45262) (nil fontified t 44946 . 44948) (nil fontified t 44945 . 44946) (nil face font-lock-keyword-face 44945 . 44946) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -44945) (44952 . 44955) (nil fontified t 44667 . 44668) (nil fontified t 44666 . 44667) (nil fontified t 44665 . 44666) (nil face font-lock-keyword-face 44665 . 44666) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -44665) (44672 . 44675) (nil fontified t 44420 . 44421) (nil fontified t 44419 . 44420) (nil fontified t 44418 . 44419) (nil face font-lock-keyword-face 44418 . 44419) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -44418) (44425 . 44428) (nil fontified t 44075 . 44076) (nil fontified t 44074 . 44075) (nil fontified t 44073 . 44074) (nil face font-lock-keyword-face 44073 . 44074) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -44073) (44080 . 44083) (nil fontified t 43723 . 43725) (nil fontified t 43722 . 43723) (nil face font-lock-keyword-face 43722 . 43723) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -43722) (43729 . 43732) (nil fontified t 43503 . 43505) (nil fontified t 43502 . 43503) (nil face font-lock-keyword-face 43502 . 43503) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -43502) (43509 . 43512) (nil fontified t 43188 . 43189) (nil fontified t 43187 . 43188) (nil fontified t 43186 . 43187) (nil face font-lock-keyword-face 43186 . 43187) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -43186) (43193 . 43196) (nil fontified t 42950 . 42951) (nil fontified t 42949 . 42950) (nil fontified t 42948 . 42949) (nil face font-lock-keyword-face 42948 . 42949) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -42948) (42955 . 42958) (nil fontified t 42706 . 42708) (nil fontified t 42705 . 42706) (nil face font-lock-keyword-face 42705 . 42706) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -42705) (42712 . 42715) (nil fontified t 42271 . 42273) (nil fontified t 42270 . 42271) (nil face font-lock-keyword-face 42270 . 42271) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -42270) (42277 . 42280) (nil fontified t 41874 . 41875) (nil fontified t 41873 . 41874) (nil fontified t 41872 . 41873) (nil face font-lock-keyword-face 41872 . 41873) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -41872) (41879 . 41882) (nil fontified t 41600 . 41602) (nil fontified t 41599 . 41600) (nil face font-lock-keyword-face 41599 . 41600) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -41599) (41606 . 41609) (nil fontified t 41199 . 41201) (nil fontified t 41198 . 41199) (nil face font-lock-keyword-face 41198 . 41199) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -41198) (41205 . 41208) (nil fontified t 40906 . 40908) (nil fontified t 40905 . 40906) (nil face font-lock-keyword-face 40905 . 40906) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -40905) (40912 . 40915) (nil fontified t 40589 . 40591) (nil fontified t 40588 . 40589) (nil face font-lock-keyword-face 40588 . 40589) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -40588) (40595 . 40598) (nil fontified t 40280 . 40281) (nil fontified t 40279 . 40280) (nil fontified t 40278 . 40279) (nil face font-lock-keyword-face 40278 . 40279) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -40278) (40285 . 40288) (nil fontified t 39935 . 39937) (nil fontified t 39934 . 39935) (nil face font-lock-keyword-face 39934 . 39935) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -39934) (39941 . 39944) (nil fontified t 39698 . 39700) (nil fontified t 39697 . 39698) (nil face font-lock-keyword-face 39697 . 39698) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -39697) (39704 . 39707) (nil fontified t 39392 . 39393) (nil fontified t 39391 . 39392) (nil fontified t 39390 . 39391) (nil face font-lock-keyword-face 39390 . 39391) (#("\\item
 " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -39390) (39397 . 39400)) nil (26482 10260 173145 663000) 0 nil] [nil nil ((#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -45588) (45594 . 45597) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -45272) (45278 . 45281) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -44964) (44970 . 44973) (nil fontified t 44684 . 44685) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -44683) (44689 . 44692) (nil fontified t 44436 . 44437) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -44435) (44441 . 44444) (nil fontified t 44090 . 44091) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -44089) (44095 . 44098) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -43737) (43743 . 43746) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -43516) (43522 . 43525) (nil fontified t 43200 . 43201) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -43199) (43205 . 43208) (nil fontified t 42961 . 42962) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -42960) (42966 . 42969) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -42716) (42722 . 42725) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -42280) (42286 . 42289) (nil fontified t 41882 . 41883) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -41881) (41887 . 41890) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -41607) (41613 . 41616) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -41205) (41211 . 41214) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -40911) (40917 . 40920) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -40593) (40599 . 40602) (nil fontified t 40283 . 40284) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -40282) (40288 . 40291) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -39937) (39943 . 39946) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -39699) (39705 . 39708) (nil fontified t 39392 . 39393) (#("item
 " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -39391) (39397 . 39400)) ((#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 39397) (39391 . 39397) (#("
1." 0 1 (fontified nil)) . 39705) (39699 . 39705) (#("
1." 0 1 (fontified nil)) . 39943) (39937 . 39943) (#("
1." 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 40288) (40282 . 40288) (nil fontified nil 40283 . 40284) (#("
1." 0 1 (fontified nil)) . 40599) (40593 . 40599) (#("
1." 0 1 (fontified nil)) . 40917) (40911 . 40917) (#("
1." 0 1 (fontified nil)) . 41211) (41205 . 41211) (#("
1." 0 1 (fontified nil)) . 41613) (41607 . 41613) (#("
1." 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 41887) (41881 . 41887) (nil fontified nil 41882 . 41883) (#("
1." 0 1 (fontified nil)) . 42286) (42280 . 42286) (#("
1." 0 1 (fontified nil)) . 42722) (42716 . 42722) (#("
1." 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 42966) (42960 . 42966) (nil fontified nil 42961 . 42962) (#("
1." 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 43205) (43199 . 43205) (nil fontified nil 43200 . 43201) (#("
1." 0 1 (fontified nil)) . 43522) (43516 . 43522) (#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 43743) (43737 . 43743) (#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 44095) (44089 . 44095) (#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 44441) (44435 . 44441) (#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 44689) (44683 . 44689) (#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 44970) (44964 . 44970) (#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 45278) (45272 . 45278) (#("
1." 0 1 (fontified nil) 1 3 (fontified t)) . 45594) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (45588 . 45594)) (26482 10228 443376 75000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -45579) (45580 . 45582) (#("1" 0 1 (fontified t)) . -45263) (45264 . 45266) (#("1" 0 1 (fontified t)) . -44955) (44956 . 44958) (#("1" 0 1 (fontified t)) . -44674) (44675 . 44677) (#("1" 0 1 (fontified t)) . -44426) (44427 . 44429) (#("1" 0 1 (fontified t)) . -44080) (44081 . 44083) (#("1" 0 1 (fontified t)) . -43728) (43729 . 43731) (#("1" 0 1 (fontified t)) . -43507) (43508 . 43510) (#("1" 0 1 (fontified t)) . -43190) (43191 . 43193) (#("1" 0 1 (fontified t)) . -42951) (42952 . 42954) (#("1" 0 1 (fontified t)) . -42707) (42708 . 42710) (#("1" 0 1 (fontified t)) . -42271) (42272 . 42274) (#("1" 0 1 (fontified t)) . -41873) (41874 . 41875) (#("1" 0 1 (fontified t)) . -41600) (41601 . 41602) (#("1" 0 1 (fontified t)) . -41199) (41200 . 41201) (#("1" 0 1 (fontified t)) . -40906) (40907 . 40908) (#("1" 0 1 (fontified t)) . -40589) (40590 . 40591) (#("1" 0 1 (fontified t)) . -40279) (40280 . 40281) (#("1" 0 1 (fontified t)) . -39935) (39936 . 39937) (#("1" 0 1 (fontified t)) . -39698) (39699 . 39700) 39698) nil (26482 10260 173136 748000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 39390)) nil (26482 10260 173133 901000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -45738) (#("  " 0 2 (fontified t)) . -45714) (#("  " 0 2 (fontified t)) . -45647) (#("  " 0 2 (fontified t)) . -45580) (#("  " 0 2 (fontified t)) . -45509) (#("  " 0 2 (fontified t)) . -45360) (#("  " 0 2 (fontified t)) . -45335) (#("  " 0 2 (fontified t)) . -45265) (#("  " 0 2 (fontified t)) . -45198) (#("  " 0 2 (fontified t)) . -45036) (#("  " 0 2 (fontified t)) . -44968) (#("  " 0 2 (fontified t)) . -44900) (#("  " 0 2 (fontified t)) . -44746) (#("  " 0 2 (fontified t)) . -44690) (#("  " 0 2 (fontified t)) . -44625) (#("  " 0 2 (fontified t)) . -44435) (#("  " 0 2 (fontified t)) . -44371) (#("  " 0 2 (fontified t)) . -44171) (#("  " 0 2 (fontified t)) . -44101) (#("  " 0 2 (fontified t)) . -44039) (#("    " 0 4 (fontified t)) . -43869) (#("  " 0 2 (fontified t)) . -43826) (#("  " 0 2 (fontified t)) . -43764) (#("  " 0 2 (fontified t)) . -43695) (#("  " 0 2 (fontified t)) . -43545) (#("  " 0 2 (fontified t)) . -43481) (#("  " 0 2 (fontified t)) . -43334) (#("  " 0 2 (fontified t)) . -43299) (#("  " 0 2 (fontified t)) . -43235) (#("  " 0 2 (fontified t)) . -43174) (#("  " 0 2 (fontified t)) . -43019) (#("  " 0 2 (fontified t)) . -43011) (#("  " 0 2 (fontified t)) . -42941) (#("  " 0 2 (fontified t)) . -42766) (#("  " 0 2 (fontified t)) . -42697) (#("  " 0 2 (fontified t)) . -42534) (#("  " 0 2 (fontified t)) . -42470) (#("  " 0 2 (fontified t)) . -42408) (#("  " 0 2 (fontified t)) . -42340) (#("  " 0 2 (fontified t)) . -42272) (#("  " 0 2 (fontified t)) . -42126) (#("  " 0 2 (fontified t)) . -42086) (#("  " 0 2 (fontified t)) . -42018) (#("  " 0 2 (fontified t)) . -41952) (#("  " 0 2 (fontified t)) . -41884) (#("    " 0 4 (fontified t)) . -41728) (#("  " 0 2 (fontified t)) . -41690) (#("  " 0 2 (fontified t)) . -41621) (#("  " 0 2 (fontified t)) . -41465) (#("  " 0 2 (fontified t)) . -41426) (#("  " 0 2 (fontified t)) . -41360) (#("  " 0 2 (fontified t)) . -41294) (#("  " 0 2 (fontified t)) . -41229) (#("  " 0 2 (fontified t)) . -41076) (#("  " 0 2 (fontified t)) . -41013) (#("  " 0 2 (fontified t)) . -40942) (#("  " 0 2 (fontified t)) . -40789) (#("  " 0 2 (fontified t)) . -40747) (#("  " 0 2 (fontified t)) . -40693) (#("  " 0 2 (fontified t)) . -40633) (#("  " 0 2 (fontified t)) . -40531) (#("  " 0 2 (fontified t)) . -40466) (#("  " 0 2 (fontified t)) . -40396) (#("  " 0 2 (fontified t)) . -40331) (#("  " 0 2 (fontified t)) . -40129) (#("  " 0 2 (fontified t)) . -40064) (#("  " 0 2 (fontified t)) . -39993) (#("  " 0 2 (fontified t)) . -39862) (#("  " 0 2 (fontified t)) . -39827) (#("  " 0 2 (fontified t)) . -39761) (#("  " 0 2 (fontified t)) . -39609) (#("  " 0 2 (fontified t)) . -39600) (#("  " 0 2 (fontified t)) . -39532) (#("  " 0 2 (fontified t)) . -39462) 45888) nil (26482 10288 764564 63000) 0 nil])
([nil nil ((40117 . 40119)) nil (26482 10325 211250 529000) 0 nil] [nil nil ((40125 . 40126) (t 26482 10260 205082 556000)) ((#("-" 0 1 (fontified t)) . 40125) (t 26482 10281 761451 94000)) (26482 10281 713199 459000) 0 nil])
([nil nil ((40749 . 40751)) ((#("\\\\" 0 1 (face font-lock-warning-face fontified t) 1 2 (face font-lock-warning-face fontified t)) . 40749) (undo-tree-id254 . 1) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (t 26482 10308 693662 107000)) (26482 10327 835534 392000) 0 nil] [nil nil ((40185 . 40186) (t 26482 10290 994180 624000)) ((#("a" 0 1 (face tex-verbatim fontified t)) . 40185) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1)) (26482 10302 59358 592000) 0 nil])
nil
([nil nil ((41248 . 41250) (t 26482 10308 693662 107000)) nil (26482 10335 194528 240000) 0 nil] [nil nil ((40749 . 40750) (t 26482 10308 693662 107000)) ((#("r" 0 1 (fontified t)) . 40749)) (26482 10324 691405 335000) 0 nil] [nil nil ((40750 . 40751) (t 26482 10308 693662 107000)) ((#("r" 0 1 (face font-lock-keyword-face fontified t)) . 40750)) (26482 10319 177417 393000) 0 nil])
([nil nil ((nil rear-nonsticky nil 40259 . 40260) (#("
" 0 1 (fontified nil)) . -40260) (40259 . 40261) 40186) ((#("

" 0 1 (rear-nonsticky nil fontified nil) 1 2 (fontified nil)) . 40259) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (40260 . 40261) (nil rear-nonsticky t 40259 . 40260)) (26482 10301 656790 808000) 0 nil])
([nil nil ((41906 . 41908) (t 26482 10335 259883 774000)) nil (26482 10349 764163 795000) 0 nil])
([nil nil ((40751 . 40752)) ((#("n" 0 1 (face font-lock-keyword-face fontified t)) . 40751)) (26482 10324 691330 355000) 0 nil])
([nil nil ((40752 . 40753)) ((#("n" 0 1 (face font-lock-keyword-face fontified t)) . 40752)) (26482 10319 177344 77000) 0 nil])
([nil nil ((nil rear-nonsticky nil 40260 . 40261) (#("
" 0 1 (fontified nil)) . -40261) (40260 . 40262)) ((#("

" 0 1 (rear-nonsticky nil fontified nil) 1 2 (fontified nil)) . 40260) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (40261 . 40262) (nil rear-nonsticky t 40260 . 40261)) (26482 10301 656679 533000) 0 nil])
([nil nil ((41337 . 41339) (t 26482 10349 816459 932000)) nil (26482 10365 323527 775000) 0 nil])
nil
nil
nil
([nil nil ((42730 . 42732) (t 26482 10365 390007 425000)) nil (26482 10381 61651 325000) 0 nil])
([nil nil ((44758 . 44760) (t 26482 10381 114550 496000)) nil (26482 10388 505629 553000) 0 nil])
([nil current ((46651 . 46653) (t 26482 10388 538334 763000)) nil (26482 10407 485851 848000) 0 nil])
nil
